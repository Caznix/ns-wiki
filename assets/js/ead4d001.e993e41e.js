"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[6124],{4179:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=t(4848),l=t(8453);const s={},i="ornull",o={id:"squirrel/types/ornull",title:"ornull",description:"ornull is a type suffix that flags the variable to be able to contain",source:"@site/docs/squirrel/types/ornull.md",sourceDirName:"squirrel/types",slug:"/squirrel/types/ornull",permalink:"/ns-wiki/docs/squirrel/types/ornull",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/types/ornull.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Integers",permalink:"/ns-wiki/docs/squirrel/types/integers"},next:{title:"Strings",permalink:"/ns-wiki/docs/squirrel/types/strings"}},a={},c=[{value:"Default Values",id:"default-values",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ornull",children:"ornull"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ornull"})," is a type suffix that flags the variable to be able to contain\r\n",(0,r.jsx)(n.code,{children:"null"}),". This is required for nesting structs inside themselves to ensure\r\nthey are fixed size."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ornull"})," makes any type complex and stops you from using any inbuilt\r\nfunctions or passing it to a function that does not expect that exact\r\n",(0,r.jsx)(n.code,{children:"ornull"})," type."]}),"\n",(0,r.jsxs)(n.p,{children:["To use the value of an ",(0,r.jsx)(n.code,{children:"ornull"})," variable you need to ensure that it is\r\nnot ",(0,r.jsx)(n.code,{children:"null"})," and then cast to the correct type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"int ornull n = null\r\nn = 1\r\n\r\nif( n != null )\r\n{\r\n expect int( n ) // n is now in this scope an int\r\n n += 2\r\n}\r\n\r\nprint( n ) // 3\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Being required to cast the value of ",(0,r.jsx)(n.code,{children:"ornull"})," variables makes it\r\nimpossible to use it with types that cannot be casted like complex\r\narrays. You can still make complex ornull variables, just be aware that\r\nthe content type can never be recasted."]}),"\n",(0,r.jsxs)(n.p,{children:["You can use ",(0,r.jsx)(n.code,{children:"ornull"})," types in complex type as well, for example in\r\ncomplex arrays."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"array<int ornull> a = [ 1, null ]\r\na.append( 2 )\r\na.append( null )\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Additionally, ",(0,r.jsx)(n.code,{children:"ornull"})," is useful for adding optional parameters to\r\nfunctions that need to preserve backwards compatability."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"SomeAPIFunction( int ornull n = null ) {}\r\n\r\n// both are valid\r\nSomeAPIFunction()\r\nSomeAPIFunction( 1 )\n"})}),"\n",(0,r.jsx)(n.h2,{id:"default-values",children:"Default Values"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ornull"}),"-ing a type will make a variable always default initia will make\r\na variable always default initialize with ",(0,r.jsx)(n.code,{children:"null"})," instead of the types\r\nrespective default value.lize with ",(0,r.jsx)(n.code,{children:"null"})," instead of the types\r\nrespective default value."]})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const l={},s=r.createContext(l);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);