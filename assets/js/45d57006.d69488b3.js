"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[5024],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>y});var a=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(t),c=i,y=u["".concat(s,".").concat(c)]||u[c]||g[c]||r;return t?a.createElement(y,l(l({ref:n},d),{},{components:t})):a.createElement(y,l({ref:n},d))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2024:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=t(8168),i=(t(6540),t(5680));const r={},l="Threads, Signals and Flags",o={unversionedId:"squirrel/async",id:"squirrel/async",isDocsHomePage:!1,title:"Threads, Signals and Flags",description:"async-doc}",source:"@site/docs/squirrel/async.md",sourceDirName:"squirrel",slug:"/squirrel/async",permalink:"/ns-wiki/docs/squirrel/async",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/async.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/ns-wiki/docs/reverse-engineering/introduction"},next:{title:"Classes",permalink:"/ns-wiki/docs/squirrel/class"}},s=[{value:"Threads",id:"threads",children:[{value:"Spinning off a thread",id:"spinning-off-a-thread",children:[]},{value:"wait",id:"wait",children:[]},{value:"OnThreadEnd",id:"onthreadend",children:[]},{value:"Example Script",id:"example-script",children:[]}]},{value:"Signals and flags",id:"signals-and-flags",children:[{value:"Signals",id:"signals",children:[]},{value:"Flags",id:"flags",children:[]}]}],p={toc:s},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.yg)(d,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"async-doc"},"Threads, Signals and Flags"),(0,i.yg)("h2",{id:"threads"},"Threads"),(0,i.yg)("p",null,"Squirrel allows scripts to spin off function calls in a thread. All\nsubsequential function calls will be threaded as well."),(0,i.yg)("p",null,"In threaded functions, it\\'s possible to halt a threaded function with\n",(0,i.yg)("inlineCode",{parentName:"p"},"wait")," statements, signals, flags and by suspending a thread object."),(0,i.yg)("p",null,"You can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"IsNewThread()")," function to determine if the current\nfunction is threaded off."),(0,i.yg)("p",null,"For more information, check out the ",(0,i.yg)("a",{parentName:"p",href:"http://www.squirrel-lang.org/squirreldoc/reference/language/threads.html"},"squirrel documentation on\nthreads"),"\nand ",(0,i.yg)("a",{parentName:"p",href:"http://www.squirrel-lang.org/squirreldoc/reference/language/builtin_functions.html#thread"},"sq functions of\nthreads"),".\nSquirrelRe is very similar to vanilla squirrel in this regard."),(0,i.yg)("p",null,"A thread is considered finished, after the threaded function returned a\nvalue. This may be ",(0,i.yg)("inlineCode",{parentName:"p"},"null"),"."),(0,i.yg)("h3",{id:"spinning-off-a-thread"},"Spinning off a thread"),(0,i.yg)("p",null,"To create a new coroutine, call a function with the ",(0,i.yg)("inlineCode",{parentName:"p"},"thread")," keyword\nbefore."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"thread void function(){}()\nthread MyFunction()\n")),(0,i.yg)("p",null,"To get a thread object, use the ",(0,i.yg)("inlineCode",{parentName:"p"},"newthread")," function."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'void function CoroutineExample()\n{\n    suspend( "passback" ) // passback is optional\n    print( "threaded statement" )\n}\n\nvar co = newthread( CoroutineExample )\nvar suspendedReturn = co.call() // you NEED to use .call, invoking the function with () won\'t work\nco.wakeup() // continue thread\n')),(0,i.yg)("h3",{id:"wait"},"wait"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"wait")," statement halts threads for a set amount of time specified\nafter the ",(0,i.yg)("inlineCode",{parentName:"p"},"wait")," keyword. Integers and floats are accepted as times in\nseconds."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"void function WaitExample( float n )\n{\n    wait 1 // wait 1 second\n    wait n // wait n seconds\n}\n\nthread WaitExample( 0.5 ) // thread will halt for a total 1.5 seconds\n")),(0,i.yg)("p",null,"To wait a single frame, don\\'t use ",(0,i.yg)("inlineCode",{parentName:"p"},"wait 0")," since it doesn\\'t actually\nwait a game frame. For example, if you have a client loop that does wait\n0 even if the game is paused the loop will still run. Use ",(0,i.yg)("inlineCode",{parentName:"p"},"WaitFrame()"),"\ninstead."),(0,i.yg)("p",null,"When using infinite loops it\\'s important to work with ",(0,i.yg)("inlineCode",{parentName:"p"},"wait")," statements\nto avoid the game freezing."),(0,i.yg)("p",null,"If you want to wait until a thread is finished, you can spin off the\nthread that you wait for with the ",(0,i.yg)("inlineCode",{parentName:"p"},"waitthread")," keyword."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'void function ParentThread()\n{\n    printt( "pre spinoff " + string( Time() ) )\n    waitthread void function()\n    {\n        printt( "mid spinoff " + string( Time() ) )\n        wait 1\n    }\n    printt( "post spinoff" + string( Time() ) )\n}\n')),(0,i.yg)("h3",{id:"onthreadend"},"OnThreadEnd"),(0,i.yg)("p",null,"Use the ",(0,i.yg)("inlineCode",{parentName:"p"},"OnThreadEnd")," function to execute a callback after a thread has\nended. This is useful for cleanup functions that remove entities after\nthey\\'re used or similar."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'void function PlayIncomingFX( vector origin, int teamNum )\n{\n    wait 1.50\n    EmitSoundAtPosition( teamNum, origin, "Titan_1P_Warpfall_Start" )\n\n    local colorVec = Vector( 0, 255, 0 )\n    entity cpoint = CreateEntity( "info_placement_helper" )\n    SetTargetName( cpoint, UniqueString( "pickup_controlpoint" ) )\n    DispatchSpawn( cpoint )\n    cpoint.SetOrigin( colorVec )\n    entity glowFX = PlayFXWithControlPoint( INCOMING_SPAWN_FX, origin, cpoint, -1, null, null, C_PLAYFX_LOOP )\n\n    OnThreadEnd(\n        function() : ( glowFX, cpoint )\n        {\n            if ( IsValid( glowFX ) )\n                glowFX.Destroy()\n            if ( IsValid( cpoint ) )\n                cpoint.Destroy()\n        }\n    )\n\n    wait 1.25\n}\n')),(0,i.yg)("h3",{id:"example-script"},"Example Script"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"void function SetPositionDelayed( entity ent, vector pos, float delay )\n{\n    wait delay\n    ent.SetOrigin( pos )\n}\n\nSetPositionDelayed( player, <0, 0, 100>, 5.0 )\nSetPositionDelayed( player, <0, 0, 50>, 2.5 ) // this will finish sooner.\n")),(0,i.yg)("h2",{id:"signals-and-flags"},"Signals and flags"),(0,i.yg)("p",null,"Signals and flags allow threads to wait for events before running some\ncode."),(0,i.yg)("h3",{id:"signals"},"Signals"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Registers a Signals to use on any entity. It\\'s required to register\nsignals before using them.")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},(0,i.yg)("inlineCode",{parentName:"p"},"../reference/respawn/entities"),'{.interpreted-text role="doc"}'),(0,i.yg)("p",{parentName:"blockquote"},"Trigger a signal on this entity. The passed ",(0,i.yg)("inlineCode",{parentName:"p"},"results")," will be returned\nby ",(0,i.yg)("inlineCode",{parentName:"p"},"WaitSignal"),"."),(0,i.yg)("p",{parentName:"blockquote"},"Ends this thread when the identifier is signaled on this entity"),(0,i.yg)("p",{parentName:"blockquote"},"Halts this thread until a signal is activated for this entity"),(0,i.yg)("blockquote",{parentName:"blockquote"},(0,i.yg)("p",{parentName:"blockquote"},"Register a callback that executes when the ",(0,i.yg)("inlineCode",{parentName:"p"},"signal")," has been fired\non this Entity")),(0,i.yg)("blockquote",{parentName:"blockquote"},(0,i.yg)("p",{parentName:"blockquote"},"Disconnects the callback from the signal.")),(0,i.yg)("p",{parentName:"blockquote"},"Connects an output on this entity to an input on another entity via\ncode. The ",(0,i.yg)("inlineCode",{parentName:"p"},"target")," can be a name or a named entity."),(0,i.yg)("p",{parentName:"blockquote"},"Fire a signal on this entity, with optional parm and delay"),(0,i.yg)("p",{parentName:"blockquote"},"Fire a signal on this entity, with optional parm and delay\n(synchronous)")),(0,i.yg)("p",null,"It\\'s also possible to trigger and catch signals with methods that\naren\\'t properties of an entity."),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Trigger a signal on ",(0,i.yg)("inlineCode",{parentName:"p"},"ent"),". The passed ",(0,i.yg)("inlineCode",{parentName:"p"},"results")," will be returned by\n",(0,i.yg)("inlineCode",{parentName:"p"},"WaitSignal"),".")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Wait for any of the passed signals to be triggered."),(0,i.yg)("pre",{parentName:"blockquote"},(0,i.yg)("code",{parentName:"pre"},'// Wait for the NPC to die, delete, or get leeched, then remove the npc from the array\nWaitSignal( ent, "OnDeath", "OnDestroy", "OnLeeched" )\n'))),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Ends this thread when the identifier is signaled on ",(0,i.yg)("inlineCode",{parentName:"p"},"ent"))),(0,i.yg)("h4",{id:"example"},"Example"),(0,i.yg)("p",null,"For example, if we want to tell a player not to give up after being\nkilled several times, we can write it this way:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'// First, we register signal we want to use\nRegisterSignal("OnMultipleDeaths")\n\n\nvoid function WatchForDeaths (entity player) \n{\n    int deathsCount = 0\n\n    while( GamePlayingOrSuddenDeath() )\n    {\n        if ( player.isDead() )  // This doesn\'t exist, don\'t try this at home\n        {\n            deathsCount += 1\n\n            if (deathsCount >= 42)\n            {\n                // This sends "OnMultipleDeaths" signal on player entity\n                player.Signal( "OnMultipleDeaths" )\n            } \n        }\n    }\n}\n\n\nvoid function DontGiveUp (entity player)\n{\n    // This is a blocking call\n    player.WaitSignal("OnMultipleDeaths");\n\n    // This will not run until entity received "OnMultipleDeaths" signal\n    SendHudMessage( player, "Don\'t give up!", -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )\n}\n\n// Launch our methods in dedicated threads\nentity player = GetPlayerArray()[0]\nthread WatchForDeaths( player )\nthread DontGiveUp( player )\n')),(0,i.yg)("p",null,"In this example, the ",(0,i.yg)("inlineCode",{parentName:"p"},"DontGiveUp")," method is launched at the same time as\n",(0,i.yg)("inlineCode",{parentName:"p"},"WatchForDeaths"),"; but it will not run until player died 42 times."),(0,i.yg)("p",null,"When you want your thread to die on a given event, you can use\n",(0,i.yg)("inlineCode",{parentName:"p"},'entity.EndSignal( "OnMultipleDeaths" )'),"; when said signal is set,\nthread will end (after calling any ","[OnThreadEnd]","{.title-ref} methods)."),(0,i.yg)("h3",{id:"flags"},"Flags"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Flags")," work pretty much the same way as ",(0,i.yg)("inlineCode",{parentName:"p"},"Signals"),", except they can be\nset up without target entity:"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Create a flag")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Halts a thread until a flag is set. Callee must be threaded off.")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Halts until every passed flag is set. Callee must be threaded off.")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Halts until the passed flag is set or the timer runs out. Callee must\nbe threaded off.")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Raise a flag")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Set ",(0,i.yg)("inlineCode",{parentName:"p"},"flagset")," after ",(0,i.yg)("inlineCode",{parentName:"p"},"flagwait")," is set and the delay is met.")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Reset a flag")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Resets all passed flags.")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Reset ",(0,i.yg)("inlineCode",{parentName:"p"},"flagclear")," when ",(0,i.yg)("inlineCode",{parentName:"p"},"flagwait")," is set.")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Resets a flag after the timer runs out.")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Wait until any passed flag is cleared.")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Raise a flag if it is reset, or reset it if it\\'s raised.")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Ends this thread when the flag is set")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Returns the current state of a flag.")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Returns ",(0,i.yg)("inlineCode",{parentName:"p"},"true")," if the flag is initialized")),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Splits the flag on ",(0,i.yg)("inlineCode",{parentName:"p"},'" "'))),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Splits the value of the keyvalues of the entity on the index ",(0,i.yg)("inlineCode",{parentName:"p"},"field"),"\non ",(0,i.yg)("inlineCode",{parentName:"p"},'" "'))),(0,i.yg)("h4",{id:"example-1"},"Example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'void function FlagExample()\n{\n    FlagInit( "BombHasExploded" )\n\n    thread BombTicker()\n\n    FlagWait( "BombHasExploded" )\n    print( "bomb just exploded" )\n}\n\nvoid function BombTicker()\n{\n    Assert( IsNewThread(), "BombTicker must be threaded off" )\n    wait RandomFloatRange( 3, 9 )\n    FlagSet( "BombHasExploded" )\n}\n')))}u.isMDXComponent=!0}}]);