"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[7306],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),y=r,g=c["".concat(p,".").concat(y)]||c[y]||f[y]||o;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=y;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},307:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(8168),r=(n(6540),n(5680));const o={},i="Safe I/O",l={unversionedId:"reference/northstar/safeio",id:"reference/northstar/safeio",isDocsHomePage:!1,title:"Safe I/O",description:"If you want to store an extended amount of data in your mod it is not",source:"@site/docs/reference/northstar/safeio.md",sourceDirName:"reference/northstar",slug:"/reference/northstar/safeio",permalink:"/ns-wiki/docs/reference/northstar/safeio",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/reference/northstar/safeio.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Server Authentification",permalink:"/ns-wiki/docs/reference/northstar/msinterface"},next:{title:"Serverside RUI",permalink:"/ns-wiki/docs/reference/northstar/serversiderui"}},p=[{value:"Saving a file",id:"saving-a-file",children:[]},{value:"Loading a file",id:"loading-a-file",children:[]},{value:"Deleting a file",id:"deleting-a-file",children:[]},{value:"File checks",id:"file-checks",children:[]}],s={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,a.A)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"safe-io"},"Safe I/O"),(0,r.yg)("p",null,"If you want to store an extended amount of data in your mod it is not\nsustainable to only use ConVars as they are limited in space and easily\nreset. With Safe I/O you are able to write to one folder\n(",(0,r.yg)("inlineCode",{parentName:"p"},"<profile>/saves/<mod directory name>"),"). In this folder you can store\ntext files of any type (e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},".txt"),", ",(0,r.yg)("inlineCode",{parentName:"p"},".json"),"), it\\'s also possible to\nuse non text file formats (e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},".exe"),") however you won\\'t be able to\nrun them on your PC. It also allows for sub-folders."),(0,r.yg)("h2",{id:"saving-a-file"},"Saving a file"),(0,r.yg)("p",null,"To save a file you need the content you want to save as\n",(0,r.yg)("inlineCode",{parentName:"p"},"strings-overview"),'{.interpreted-text role="ref"} , for this the\n',(0,r.yg)("inlineCode",{parentName:"p"},"json_overview"),'{.interpreted-text role="ref"} functions can be useful if\nyou want to store ',(0,r.yg)("inlineCode",{parentName:"p"},"table_overview"),'{.interpreted-text role="ref"} or\n',(0,r.yg)("inlineCode",{parentName:"p"},"arrays_overview"),'{.interpreted-text role="ref"}.'),(0,r.yg)("p",null,"To actually save the file you use:"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param string file"),(0,r.yg)("p",{parentName:"blockquote"},":   The name of the file you want to store, this supports sub folders.\nNeeds to be with the file type (e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"/TitanData/tone.txt"),")."),(0,r.yg)("p",{parentName:"blockquote"},"param string data"),(0,r.yg)("p",{parentName:"blockquote"},":   The saved data, this can be any valid String.")),(0,r.yg)("p",null,"Alternatively if you want a faster way to store\n",(0,r.yg)("inlineCode",{parentName:"p"},"table_overview"),'{.interpreted-text role="ref"} you can use:'),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param string file"),(0,r.yg)("p",{parentName:"blockquote"},":   The name of the file you want to store, this supports sub folders.\nDoesn\\'t have to be ",(0,r.yg)("inlineCode",{parentName:"p"},".json")," but will use the correct formatting\nfor a ",(0,r.yg)("inlineCode",{parentName:"p"},".json"),"."),(0,r.yg)("p",{parentName:"blockquote"},"param table data"),(0,r.yg)("p",{parentName:"blockquote"},":   The table that will be written to the file, this only supports the\ntypes specified in the ",(0,r.yg)("inlineCode",{parentName:"p"},"json_overview"),'{.interpreted-text\nrole="ref"}.')),(0,r.yg)("h2",{id:"loading-a-file"},"Loading a file"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param string file"),(0,r.yg)("p",{parentName:"blockquote"},":   This is the name of the file you want to load, it has the same\nformating as in ",(0,r.yg)("inlineCode",{parentName:"p"},"NSSaveFile"),"."),(0,r.yg)("p",{parentName:"blockquote"},"param void functionref( string ) onSuccess"),(0,r.yg)("p",{parentName:"blockquote"},":   The function that gets execued when the file is successfully\nloaded, the parameter ",(0,r.yg)("inlineCode",{parentName:"p"},"string")," is the content of the loaded file."),(0,r.yg)("p",{parentName:"blockquote"},"param void functionref() onFailure = null"),(0,r.yg)("p",{parentName:"blockquote"},":   The function that gets execued when the loading was NOT\nsuccessful, by default the function is just ",(0,r.yg)("inlineCode",{parentName:"p"},"null"),"."),(0,r.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"If you are having trouble with functionrefs you can read up on them\nhere: ",(0,r.yg)("inlineCode",{parentName:"p"},"functionref_overview"),'{.interpreted-text role="ref"}\n::::')),(0,r.yg)("p",null,"You can also get all saved file:"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},'param string path = \\"\\"'),(0,r.yg)("p",{parentName:"blockquote"},":   Gets all files in a specified path, by default its just\n",(0,r.yg)("inlineCode",{parentName:"p"},"<profile>/saves/<mod directory name>"),"."),(0,r.yg)("p",{parentName:"blockquote"},"returns"),(0,r.yg)("p",{parentName:"blockquote"},":   An array with all file names in the specified path.")),(0,r.yg)("h2",{id:"deleting-a-file"},"Deleting a file"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param string file"),(0,r.yg)("p",{parentName:"blockquote"},":   This is the name of the file you want to check exsits, it has the\nsame formating as in ",(0,r.yg)("inlineCode",{parentName:"p"},"NSSaveFile"),".")),(0,r.yg)("h2",{id:"file-checks"},"File checks"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param tring file"),(0,r.yg)("p",{parentName:"blockquote"},":   This is the name of the file you want to check exsits, it has the\nsame formating as in ",(0,r.yg)("inlineCode",{parentName:"p"},"NSSaveFile"),"."),(0,r.yg)("p",{parentName:"blockquote"},"returns"),(0,r.yg)("p",{parentName:"blockquote"},":   ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," if the file was found, otherwise it returns ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),".")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param string file"),(0,r.yg)("p",{parentName:"blockquote"},":   This is the name of the file you want to get the file size from."),(0,r.yg)("p",{parentName:"blockquote"},"returns"),(0,r.yg)("p",{parentName:"blockquote"},":   KB size of the specified file."),(0,r.yg)("p",{parentName:"blockquote"},":::: warning\n::: title\nWarning\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"This fucntion will raise an error when the file doesnt exist.\n::::")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param string file"),(0,r.yg)("p",{parentName:"blockquote"},":   This is the path you want to check."),(0,r.yg)("p",{parentName:"blockquote"},"returns"),(0,r.yg)("p",{parentName:"blockquote"},":   ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," if the path is a folder, otherwise it returns ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),".")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"returns"),(0,r.yg)("p",{parentName:"blockquote"},":   Amount of KB you have left to write on."),(0,r.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"The max size of data you can store is ",(0,r.yg)("inlineCode",{parentName:"p"},"50MB")," per mod. Can be\noverwritten with ",(0,r.yg)("inlineCode",{parentName:"p"},"-maxfoldersize BYTES")," in the launch args.\n::::")))}c.isMDXComponent=!0}}]);