"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[5854],{8445:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=a(4848),t=a(8453);const i={},s="Arrays",l={id:"squirrel/types/arrays",title:"Arrays",description:"Unlike the data types previously covered, arrays can hold multiple",source:"@site/docs/squirrel/types/arrays.md",sourceDirName:"squirrel/types",slug:"/squirrel/types/arrays",permalink:"/ns-wiki/docs/squirrel/types/arrays",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/types/arrays.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Typing",permalink:"/ns-wiki/docs/squirrel/types/"},next:{title:"Booleans",permalink:"/ns-wiki/docs/squirrel/types/booleans"}},o={},d=[{value:"Literals",id:"literals",level:2},{value:"Primitive Arrays",id:"primitive-arrays",level:2},{value:"Complex Arrays",id:"complex-arrays",level:2},{value:"Static Arrays",id:"static-arrays",level:2},{value:"Compatability",id:"compatability",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"arrays",children:"Arrays"})}),"\n",(0,n.jsx)(r.p,{children:"Unlike the data types previously covered, arrays can hold multiple\r\nvalues."}),"\n",(0,n.jsx)(r.p,{children:"Their size is dynamic and you can add and remove elements at will."}),"\n",(0,n.jsxs)(r.p,{children:["The type keyword is ",(0,n.jsx)(r.code,{children:"array"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"By default, uninitialized arrays are empty."}),"\n",(0,n.jsxs)(r.p,{children:["Arrays are always zero indexed with ",(0,n.jsx)(r.code,{children:"[ <expression> ]"}),". The indexes are\r\nalways numbers. If you index an array with a key that does not exist, an\r\nerror will get thrown."]}),"\n",(0,n.jsx)(r.h2,{id:"literals",children:"Literals"}),"\n",(0,n.jsxs)(r.p,{children:["Array literals are a comma or newline seperated sequence of expressions\r\ndelimited by an opening bracket ",(0,n.jsx)(r.code,{children:"["})," and a corresponding closing bracket\r\n",(0,n.jsx)(r.code,{children:"]"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"array a = [ 1, 2, 3 ]\r\narray b = [\r\n  1\r\n  2\r\n  3\r\n]\n"})}),"\n",(0,n.jsx)(r.h2,{id:"primitive-arrays",children:"Primitive Arrays"}),"\n",(0,n.jsx)(r.p,{children:"Primitive arrays are arrays that can hold any value. Their content is\r\ntherefore untyped."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:'array a\r\na.append( 1 ) // add a number\r\na.append( "str" ) // add a string\r\na.append( [] ) // add an empty array\r\n\r\n// because the content type of the array is not defined, all content will be var\r\nvar n = a[0]\r\nvar str = a[1]\r\nvar arr = a[2]\n'})}),"\n",(0,n.jsx)(r.h2,{id:"complex-arrays",children:"Complex Arrays"}),"\n",(0,n.jsx)(r.p,{children:"Complex Arrays are arrays that can only hold values that have a specific\r\ntype."}),"\n",(0,n.jsxs)(r.p,{children:["The content type needs to be specified within ",(0,n.jsx)(r.code,{children:"<"})," and ",(0,n.jsx)(r.code,{children:">"})," brackets."]}),"\n",(0,n.jsx)(r.p,{children:"There is no way to define a complex array that holds multiple different\r\ntypes."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:'array<int> a\r\na.append( 1 )\r\na.append( 0x2 )\r\na.append( "3" ) // this will throw a compile error because the array can only contain integers\n'})}),"\n",(0,n.jsx)(r.h2,{id:"static-arrays",children:"Static Arrays"}),"\n",(0,n.jsx)(r.p,{children:"Static arrays are a different kind of complex type. Like complex arrays\r\nthey can only hold values of one specific type. However unlike complex\r\narrays static arrays have a set length that cannot be changed."}),"\n",(0,n.jsxs)(r.p,{children:["The typing for static arrays is ",(0,n.jsx)(r.code,{children:"type[size]"}),", where ",(0,n.jsx)(r.code,{children:"type"})," is the\r\ncontent type of the array and ",(0,n.jsx)(r.code,{children:"size"})," is an ",(0,n.jsx)(r.strong,{children:"integer literal"})," of the\r\ntotal size of the array."]}),"\n",(0,n.jsxs)(r.p,{children:["Uninitialized static arrays have their size by default and all content\r\nvalues are the ",(0,n.jsx)(r.strong,{children:"default values of their content type"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"You can index and change content values like with regular arrays."}),"\n",(0,n.jsxs)(r.p,{children:["When initializing a static array you can omit all values after your\r\ninitial values with ",(0,n.jsx)(r.code,{children:"..."}),". All following values will get default\r\ninitialized with the content's default."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"float[3] v1\r\nfloat[8] v2 = [ 1.0, 2.0, ... ]\r\nv2[2] = 3.0\r\n\r\nprint( v1[0] ) // notice how no value needs to be pushed into the vector\r\nprint( v2[7] ) // will print 0.0 because it has been default initialized\n"})}),"\n",(0,n.jsx)(r.h2,{id:"compatability",children:"Compatability"}),"\n",(0,n.jsxs)(r.p,{children:["It is not possible to cast or convert an array between their different\r\nforms. For example you can't assign an ",(0,n.jsx)(r.code,{children:"array<string>"})," variable to a\r\ndifferent variable that has the type ",(0,n.jsx)(r.code,{children:"array"})," or the other way around."]}),"\n",(0,n.jsx)(r.p,{children:"Instead you need to create an entirely new array with the target type or\r\nadd all contents manually."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:'array<string> orig = [ "a", "b", "c" ]\r\narray target\r\n\r\ntarget.clear() // clear all contents from the target array\r\nforeach( v in orig ) // iterate over the original array and add all contents to the target array\r\n  target.append( v )\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Furthermore it's important to understand that ",(0,n.jsx)(r.code,{children:"array"})," and ",(0,n.jsx)(r.code,{children:"array<var>"}),"\r\nbehave the same but ",(0,n.jsx)(r.strong,{children:"are not identical"}),"."]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,r,a)=>{a.d(r,{R:()=>s,x:()=>l});var n=a(6540);const t={},i=n.createContext(t);function s(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);