"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[9281],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=p(t),y=o,m=l["".concat(s,".").concat(y)]||l[y]||u[y]||i;return t?r.createElement(m,a(a({ref:n},d),{},{components:t})):r.createElement(m,a({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=y;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[l]="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},3598:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=t(8168),o=(t(6540),t(5680));const i={},a="Dependency Constants and Compiler Directives",c={unversionedId:"source/reference/northstar/dependencyconstants",id:"source/reference/northstar/dependencyconstants",isDocsHomePage:!1,title:"Dependency Constants and Compiler Directives",description:"Compiler Directives",source:"@site/docs/source/reference/northstar/dependencyconstants.md",sourceDirName:"source/reference/northstar",slug:"/source/reference/northstar/dependencyconstants",permalink:"/ns-wiki/docs/source/reference/northstar/dependencyconstants",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/source/reference/northstar/dependencyconstants.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom Damage Source IDs",permalink:"/ns-wiki/docs/source/reference/northstar/customdamagesources"},next:{title:"HTTP and JSON",permalink:"/ns-wiki/docs/source/reference/northstar/httprequests"}},s=[{value:"Compiler Directives",id:"compiler-directives",children:[]},{value:"Dependency Constants",id:"dependency-constants",children:[]}],p={toc:s},d="wrapper";function l(e){let{components:n,...t}=e;return(0,o.yg)(d,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"dependency-constants-and-compiler-directives"},"Dependency Constants and Compiler Directives"),(0,o.yg)("h2",{id:"compiler-directives"},"Compiler Directives"),(0,o.yg)("p",null,"Compiler directives are a way to compile code only if a specific\ncondition is met. To use this you have the ",(0,o.yg)("inlineCode",{parentName:"p"},"#if"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"#endif"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"#else")," and\n",(0,o.yg)("inlineCode",{parentName:"p"},"#elseif")," keyword."),(0,o.yg)("p",null,"Contditons you can check for are"),(0,o.yg)("p",null,":   -   ",(0,o.yg)("inlineCode",{parentName:"p"},"SERVER")," Checks if the code is compiled on the server VM."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"-   `CLIENT` Checks if the code is compiled on the client VM.\n-   `UI` Checks if the code is compiled on the UI VM.\n-   `MP` Checks if the code is compiled in a multiplayer match.\n-   `SP` Checks if the code is compiled in a singeplayer match.\n-   `DEV` Checks if the code is compiled with the `-dev` keyword in\n    the startup arguments.\n")),(0,o.yg)("p",null,"These conditions can also be combined with the regular squirrel boolean\nexpressions"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'#if SERVER\nChat_ServerBroadcast("Message from the server VM")\n#endif\n')),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"#if (CLIENT && MP) || DEV\n...\n#elseif SP\n...\n#endif\n")),(0,o.yg)("h2",{id:"dependency-constants"},"Dependency Constants"),(0,o.yg)("p",null,"Dependency constants are used to only compile code if a dependency your\nmod requires is loaded, these use the Compiler directives syntax."),(0,o.yg)("p",null,"Inside your ",(0,o.yg)("inlineCode",{parentName:"p"},"mod.json")," define a constant as:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'{\n    // mod.json stuff\n    "Dependencies": {\n        // sets the constant to 0 or 1, depending if the mod with the name "Mod Name" exists and is enabled\n        "CONSTANT_NAME": "Mod Name"\n    }\n}\n')),(0,o.yg)("p",null,"For Example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'"PLAYER_HAS_ROGUELIKE_MOD": "TF|Roguelike"\n')),(0,o.yg)("p",null,"Will define a constant ",(0,o.yg)("inlineCode",{parentName:"p"},"PLAYER_HAS_ROGUELIKE_MOD")," that is set to ",(0,o.yg)("inlineCode",{parentName:"p"},"0")," or\n",(0,o.yg)("inlineCode",{parentName:"p"},"1")," depending if the mod is enabled. It then can be used as a\nconstant/compiler flag."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'#if PLAYER_HAS_ROGUELIKE_MOD\nprint("player has roguelike mod")\nRoguelike_Function();\n#else\nprint("Can\'t use the function because the mod is off :\'(")\n#endif\n')))}l.isMDXComponent=!0}}]);