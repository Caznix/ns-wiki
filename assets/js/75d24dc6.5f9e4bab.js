"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[7250],{5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>m});var n=r(6540);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),d=o,m=u["".concat(c,".").concat(d)]||u[d]||y[d]||i;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1170:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(8168),o=(r(6540),r(5680));const i={},a="Vectors",s={unversionedId:"squirrel/types/vectors",id:"squirrel/types/vectors",isDocsHomePage:!1,title:"Vectors",description:"Vectors are a primitive data type to describe velocities or positions of",source:"@site/docs/squirrel/types/vectors.md",sourceDirName:"squirrel/types",slug:"/squirrel/types/vectors",permalink:"/ns-wiki/docs/squirrel/types/vectors",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/types/vectors.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Var",permalink:"/ns-wiki/docs/squirrel/types/var"}},c=[{value:"Literals",id:"literals",children:[]}],l={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.yg)(p,(0,n.A)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"vectors"},"Vectors"),(0,o.yg)("p",null,"Vectors are a primitive data type to describe velocities or positions of\nobjects in the game."),(0,o.yg)("p",null,"Usually the positions are absolute in the game world, but that may\ndepend on the function."),(0,o.yg)("p",null,"Vectors store 3 float values that can be accessed with the ",(0,o.yg)("inlineCode",{parentName:"p"},"x"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"y")," and\n",(0,o.yg)("inlineCode",{parentName:"p"},"z")," keys."),(0,o.yg)("h2",{id:"literals"},"Literals"),(0,o.yg)("p",null,"A vector literal is a comma seperated list of expressions that evaluate\nto either a ",(0,o.yg)("strong",{parentName:"p"},"float")," or ",(0,o.yg)("strong",{parentName:"p"},"integer")," delimited by ",(0,o.yg)("inlineCode",{parentName:"p"},"<")," and ",(0,o.yg)("inlineCode",{parentName:"p"},">")," brackets."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"vector v = < 1, 2.5, 3 >\nv.y = 2\nprintt( v.x, v.y, v.z ) // 1 2 3\n")))}u.isMDXComponent=!0}}]);