"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[7485],{5680:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>h});var t=r(6540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(r),g=a,h=c["".concat(s,".").concat(g)]||c[g]||d[g]||i;return r?t.createElement(h,o(o({ref:n},p),{},{components:r})):t.createElement(h,o({ref:n},p))}));function h(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},3324:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var t=r(8168),a=(r(6540),r(5680));const i={},o="Pushing Values to the SQVM Stack",l={unversionedId:"guides/reversing/squirrelreversing",id:"guides/reversing/squirrelreversing",isDocsHomePage:!1,title:"Pushing Values to the SQVM Stack",description:"Before starting to reverse engineer how to push values to the Squirrel",source:"@site/docs/guides/reversing/squirrelreversing.md",sourceDirName:"guides/reversing",slug:"/guides/reversing/squirrelreversing",permalink:"/ns-wiki/docs/guides/reversing/squirrelreversing",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/guides/reversing/squirrelreversing.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Reverse Engineering Guides",permalink:"/ns-wiki/docs/guides/reversing/index"},next:{title:"Creating a custom Menu",permalink:"/ns-wiki/docs/guides/scripting/custommenus"}},s=[{value:"Setup",id:"setup",children:[]},{value:"Understanding native Squirrel Closures",id:"understanding-native-squirrel-closures",children:[]}],u={toc:s},p="wrapper";function c(e){let{components:n,...r}=e;return(0,a.yg)(p,(0,t.A)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"pushing-values-to-the-sqvm-stack"},"Pushing Values to the SQVM Stack"),(0,a.yg)("p",null,"Before starting to reverse engineer how to push values to the Squirrel\nstack, it\\'s recommended to read the ",(0,a.yg)("a",{parentName:"p",href:"http://www.squirrel-lang.org/squirreldoc/index.html"},"Squirrel\ndocumentation"),",\nespecially the\n",(0,a.yg)("a",{parentName:"p",href:"http://www.squirrel-lang.org/squirreldoc/reference/embedding_squirrel.html"},"Embedding-"),"\nand ",(0,a.yg)("a",{parentName:"p",href:"http://www.squirrel-lang.org/squirreldoc/reference/api_reference.html"},"API\nReference"),"."),(0,a.yg)("p",null,"A lot of Respawn\\'s fork of Squirrel is very similar to Squirrel3,\nespecially the Squirrel API functions."),(0,a.yg)("h2",{id:"setup"},"Setup"),(0,a.yg)("p",null,"Before you can start reverse engineering you need to install software to\ndisassemble and decompile the binaries. This guide will use\n",(0,a.yg)("a",{parentName:"p",href:"https://ghidra-sre.org/"},"Ghidra"),", an open source reverse engineering\ntool developed by the NSA."),(0,a.yg)("p",null,"Since code decompiled by Ghidra is often closer to the raw assembly than\nthe original code, you might want to use ",(0,a.yg)("a",{parentName:"p",href:"https://hex-rays.com/"},"IDA"),"\nfor decompilation. Keep in mind that IDA is not open source and the free\nversion is lacking a lot of features and only offers a cloud decompiler."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Download the latest Ghidra archive from the ",(0,a.yg)("a",{parentName:"li",href:"https://github.com/NationalSecurityAgency/ghidra/releases"},"Github releases\npage"),".\nUsually the archive is called like ",(0,a.yg)("inlineCode",{parentName:"li"},"ghidra_[version]_PUBLIC_[date]"),"."),(0,a.yg)("li",{parentName:"ol"},"Unzip the archive in a new folder."),(0,a.yg)("li",{parentName:"ol"},"Run ",(0,a.yg)("inlineCode",{parentName:"li"},"ghidraRun.bat")," on windows or if you\\'re on Linux make\n",(0,a.yg)("inlineCode",{parentName:"li"},"ghidraRun")," executable and run it. On Linux, there\\'s a ",(0,a.yg)("a",{parentName:"li",href:"https://flathub.org/apps/org.ghidra_sre.Ghidra"},"Flatpak\nimage")," available as\nwell."),(0,a.yg)("li",{parentName:"ol"},"Create a new project under ",(0,a.yg)("inlineCode",{parentName:"li"},"File > New Project")," and select\n",(0,a.yg)("inlineCode",{parentName:"li"},"Non-Shared Project"),", then hit next. Afterwards select a location\nfor the project and a name like ",(0,a.yg)("inlineCode",{parentName:"li"},"Titanfall2"),"."),(0,a.yg)("li",{parentName:"ol"},"Import the binary you want to reverse with ",(0,a.yg)("inlineCode",{parentName:"li"},"File > Import File"),".\nThis guide will use ",(0,a.yg)("inlineCode",{parentName:"li"},"server.dll"),", found in your Titanfall2 install\ndirectory. Don\\'t change the settings ghidra auto detects when\nimporting the file."),(0,a.yg)("li",{parentName:"ol"},"Open ",(0,a.yg)("inlineCode",{parentName:"li"},"server.dll")," in the Ghidra project overview. When Ghidra asks\nyou if you want to analyse the file now, click yes. You do not need\nto change any analysis settings."),(0,a.yg)("li",{parentName:"ol"},"Wait for Ghidra to finish the analysis.")),(0,a.yg)("h2",{id:"understanding-native-squirrel-closures"},"Understanding native Squirrel Closures"),(0,a.yg)("p",null,"In vanilla Squirrel you can push values with functions like\n",(0,a.yg)("inlineCode",{parentName:"p"},"sq_pushbool"),". Since Respawn changed a lot in the SQVM, you should\nexpect these API functions to be different as well."),(0,a.yg)("p",null,"To start you\\'ll need a simple Squirrel function that is executing\nnative code without any calculations or similar, like ",(0,a.yg)("inlineCode",{parentName:"p"},"IsServer"),", or\n",(0,a.yg)("inlineCode",{parentName:"p"},"IsClient"),". These Squirrel functions are registered in native code and\nreturn ",(0,a.yg)("inlineCode",{parentName:"p"},"true")," / ",(0,a.yg)("inlineCode",{parentName:"p"},"false")," if the script VM is being ran in the ",(0,a.yg)("inlineCode",{parentName:"p"},"SERVER")," or\n",(0,a.yg)("inlineCode",{parentName:"p"},"CLIENT"),"."),(0,a.yg)("p",null,"You can search for a string in memory with ",(0,a.yg)("inlineCode",{parentName:"p"},"Search > Memory"),". Select\n",(0,a.yg)("inlineCode",{parentName:"p"},"String")," as the format you\\'re searching for and enter ",(0,a.yg)("inlineCode",{parentName:"p"},"IsServer")," as the\nsearch value."),(0,a.yg)("p",null,"The first occurence is at ",(0,a.yg)("inlineCode",{parentName:"p"},"server.dll+0x2b44f3"),". If you wait for the\nfunction to be decompiled, you\\'ll see the string in this code:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},'_DAT_181055f60 = "IsServer";\n_DAT_181055f68 = "IsServer";\n_DAT_181055fb8 = 0;\n_DAT_181055f90 = 0;\n_DAT_181055f98 = 0;\n_DAT_181055fc0 = FUN_18029a630;\n_DAT_181055f88 = _DAT_181055f88 & 0xff;\n_DAT_181055f70 = ZEXT816(0x1808fa7f8);\n_DAT_181055f80 = 0;\n_DAT_181055f8c = 0;\n_DAT_181055f9c = 6;\n')),(0,a.yg)("p",null,"Because the squirrel function executes native code, the callback\n",(0,a.yg)("inlineCode",{parentName:"p"},"FUN_18029a630")," is probably where it\\'s located. You can double click\nthe reference to decompile the function."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},"undefined4 FUN_18029a630(undefined8 param_1)\n{\n    char cVar1;\n    undefined4 uVar2;\n\n    uVar2 = 1;\n    FUN_180003710(param_1,1);\n    cVar1 = FUN_18001d840(param_1);\n    if (cVar1 != '\\0') {\n        uVar2 = 0xffffffff;\n    }\n    return uVar2;\n}\n")),(0,a.yg)("p",null,"From this you can assume that native closures in squirrel_re still use\nthe ",(0,a.yg)("inlineCode",{parentName:"p"},"SQRESULT")," convention, because the closure returns ",(0,a.yg)("inlineCode",{parentName:"p"},"-1")," if\n",(0,a.yg)("inlineCode",{parentName:"p"},"FUN_18001d840")," returns ",(0,a.yg)("inlineCode",{parentName:"p"},"NULL"),", which is typically an error and ",(0,a.yg)("inlineCode",{parentName:"p"},"1")," if\nnothing happens. It\\'s also obvious that either ",(0,a.yg)("inlineCode",{parentName:"p"},"FUN_180003710")," or\n",(0,a.yg)("inlineCode",{parentName:"p"},"FUN_18001d840")," pushes a boolean to the stack. It\\'s probably\n",(0,a.yg)("inlineCode",{parentName:"p"},"FUN_180003710")," because it takes an extra parameter but you can check\n",(0,a.yg)("inlineCode",{parentName:"p"},"IsClient")," at ",(0,a.yg)("inlineCode",{parentName:"p"},"server.dll+0x29a4d0")," as a reference."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},"undefined4 FUN_18029a4d0(undefined8 param_1)\n{\n    char cVar1;\n    undefined4 uVar2;\n\n    FUN_180003710(param_1,0);\n    cVar1 = FUN_18001d840(param_1);\n    uVar2 = 1;\n    if (cVar1 != '\\0') {\n        uVar2 = 0xffffffff;\n    }\n    return uVar2;\n}\n")),(0,a.yg)("p",null,"This is virtually the same, except that ",(0,a.yg)("inlineCode",{parentName:"p"},"FUN_180003710")," is being called\nwith a ",(0,a.yg)("inlineCode",{parentName:"p"},"0"),". This makes it pretty obvious that ",(0,a.yg)("inlineCode",{parentName:"p"},"FUN_180003710")," is the\nequivalent of ",(0,a.yg)("inlineCode",{parentName:"p"},"sq_pushbool"),". Decompile the function, then right click\nthe function and select ",(0,a.yg)("inlineCode",{parentName:"p"},"Edit Function Signature"),". Right now the\nsignature looks like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},"void FUN_180003710(longlong param_1, int param_2)\n")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"param_1")," has to be a pointer to the Squirrel VM, because a pointer on\n64x systems is 8 bytes long (the same as ",(0,a.yg)("inlineCode",{parentName:"p"},"longlong"),") and the\n",(0,a.yg)("inlineCode",{parentName:"p"},"HSquirrelVM")," struct is larger than 8 bytes."),(0,a.yg)("p",null,"The second parameter has to be the value that will be pushed to the VM\nas a boolean, since it was ",(0,a.yg)("inlineCode",{parentName:"p"},"1")," in ",(0,a.yg)("inlineCode",{parentName:"p"},"IsServer")," (which always returns\n",(0,a.yg)("inlineCode",{parentName:"p"},"true"),") and ",(0,a.yg)("inlineCode",{parentName:"p"},"0")," in ",(0,a.yg)("inlineCode",{parentName:"p"},"IsClient")," which always returns ",(0,a.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,a.yg)("p",null,"You can change the signature now to this, to make code using the\nfunction more readable. Because ",(0,a.yg)("inlineCode",{parentName:"p"},"HSquirrelVM")," isn\\'t defined yet, the\ntype needs to stay ",(0,a.yg)("inlineCode",{parentName:"p"},"longlong")," for now."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},"void sq_pushbool(longlong sqvm, int value)\n")))}c.isMDXComponent=!0}}]);