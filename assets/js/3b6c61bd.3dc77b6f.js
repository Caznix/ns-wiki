"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[3868],{315:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>a});var i=r(4848),t=r(8453);const c={},o="Remote Functions",l={id:"squirrel/networking",title:"networking",description:"Communicating between CLIENT, UI and SERVER scripts",source:"@site/docs/squirrel/networking.md",sourceDirName:"squirrel",slug:"/squirrel/networking",permalink:"/ns-wiki/docs/squirrel/networking",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/networking.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/ns-wiki/docs/squirrel/intro"},next:{title:"Squirrel VM",permalink:"/ns-wiki/docs/squirrel/sqvm"}},s={},a=[{value:"Example",id:"example",level:2},{value:"Register a server command",id:"register-a-server-command",level:2},{value:"Example",id:"example-1",level:2},{value:"<code>SERVER</code> to <code>UI</code> vm",id:"server-to-ui-vm",level:3},{value:"Example",id:"example-2",level:2},{value:"<code>CLIENT</code> to <code>SERVER</code> vm",id:"client-to-server-vm",level:3},{value:"<code>CLIENT</code> to <code>UI</code> vm",id:"client-to-ui-vm",level:3},{value:"Example",id:"example-3",level:2},{value:"<code>UI</code> to <code>CLIENT</code> vm",id:"ui-to-client-vm",level:3},{value:"Example",id:"example-4",level:2}];function d(e){const n={admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Communicating between CLIENT, UI and SERVER scripts\r\n~~~~~~~~~~~~~~~~~~~~~~"}),"\n",(0,i.jsxs)(n.p,{children:["All VMs (",(0,i.jsx)(n.code,{children:"CLIENT"}),", ",(0,i.jsx)(n.code,{children:"UI"}),", ",(0,i.jsx)(n.code,{children:"SERVER"}),") are seperate from each other and do\r\nnot share any variables, even when running on the same machine."]}),"\n",(0,i.jsx)(n.p,{children:"However, there are different interfaces to communicate between all VMs."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"SERVER"})," to ",(0,i.jsx)(n.code,{children:"CLIENT"})," vm ======================"]}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"remote-functions",children:"Remote Functions"})}),"\n",(0,i.jsxs)(n.p,{children:["Remote functions allow the ",(0,i.jsx)(n.code,{children:"SERVER"})," vm to call a function from the\r\n",(0,i.jsx)(n.code,{children:"CLIENT"})," vm with parameters."]}),"\n",(0,i.jsxs)(n.p,{children:["To use remote functions, you have to make a registration on both the\r\n",(0,i.jsx)(n.code,{children:"CLIENT"})," and the ",(0,i.jsx)(n.code,{children:"SERVER"})," vm with ",(0,i.jsx)(n.code,{children:"Remote_RegisterFunction"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Northstar provides the"}),"\n",(0,i.jsx)(n.p,{children:"callback in which you can use the"}),"\n",(0,i.jsxs)(n.p,{children:["function. It's not possible to register remote functions after\r\n",(0,i.jsx)(n.code,{children:"Remote_EndRegisteringFunctions"})," has been called. The callback exists to\r\nallow multiple mods to register remote vars."]}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsxs)(n.p,{children:["You can only pass parameters of the types ",(0,i.jsx)(n.code,{children:"null"}),", ",(0,i.jsx)(n.code,{children:"int"}),", ",(0,i.jsx)(n.code,{children:"float"})," or\r\n",(0,i.jsx)(n.code,{children:"bool"}),"."]}),(0,i.jsxs)(n.p,{children:["It is possible to communicate entities using eHandles. To get an\r\neHandle, use the ",(0,i.jsx)(n.code,{children:"entity.GetEncodedEHandle()"})," function. To get the\r\ncorresponding entity of a handle, use\r\n",(0,i.jsx)(n.code,{children:"entity ent = GetEntityFromEncodedEHandle( eHandle )"}),". eHandles are of\r\ntype ",(0,i.jsx)(n.code,{children:"int"}),"."]})]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"mod.json extract:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"Scripts": [\r\n{\r\n    "Path": "sh_spaceships.nut",\r\n    "RunOn": "CLIENT || SERVER", // execute the same function on both CLIENT and SERVER\r\n    "ClientCallback": {\r\n        "Before": "Spaceship_Network"\r\n    },\r\n    "ServerCallback": {\r\n        "Before": "Spaceship_Network"\r\n    }\r\n},\r\n{\r\n    // more script registrations ...\n'})}),"\n",(0,i.jsx)(n.p,{children:"sh_spaceships.nut:"}),"\n",(0,i.jsxs)(n.p,{children:["The networked ",(0,i.jsx)(n.code,{children:"CLIENT"})," function has to be global"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'#if CLIENT\r\nglobal function Server_GetNetworkedVariable // make the networked function only global on CLIENT\r\n#endif //CLIENT\r\n\r\nglobal function Spaceship_Network // this gets executed on both CLIENT & SERVER\r\n\r\nvoid function Spaceship_Network()\r\n{\r\n    AddCallback_OnRegisteringCustomNetworkVars( RegisterNetworkVars ) // you can only register remote functions inside of this callback\r\n}\r\n\r\nvoid function RegisterNetworkVars()\r\n{\r\n    // this has to be executed on both CLIENT and SERVER, else they will be out of sync and the client disconnects\r\n    Remote_RegisterFunction( "Server_GetNetworkedVariable" ) // register a remote function. Note that the parameters are not declared here\r\n}\r\n\r\n#if CLIENT\r\nvoid function Server_GetNetworkedVariable( int number ) // you can declare as many or few parameters as you wish\r\n{\r\n    printt("got integer", number)\r\n}\r\n#endif //CLIENT\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Calling the ",(0,i.jsx)(n.code,{children:"CLIENT"})," function ",(0,i.jsx)(n.code,{children:"Server_GetNetworkedVariable"})," on ",(0,i.jsx)(n.code,{children:"SERVER"}),"\r\nvm:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'// player: CPlayer entity that should execute the function\r\n// func: function identifier string\r\n// ...: any parameters passed to the function\r\nRemote_CallFunction_NonReplay( entity player, string func, ... ) // NOT reexecuted in a replay\r\nRemote_CallFunction_Replay( entity player, string func, ... ) // reexecuted in a replay\r\n\r\n// for the previous example, this would be a valid remote function call:\r\n\r\nRemote_CallFunction_NonReplay( player, "Server_GetNetworkedVariable", RandomIntRange( 1, 100 ) )\n'})}),"\n",(0,i.jsx)(n.h1,{id:"server-to-client-command-callbacks",children:"Server to Client command callbacks"}),"\n",(0,i.jsxs)(n.p,{children:["Allows the ",(0,i.jsx)(n.code,{children:"SERVER"})," vm to create a ",(0,i.jsx)(n.code,{children:"ServerToClientStringCommand"})," on a\r\nplayer which is linked to a Callback locally"]}),"\n",(0,i.jsx)(n.h2,{id:"register-a-server-command",children:"Register a server command"}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["this has to be executed on the ",(0,i.jsx)(n.code,{children:"Before"})," Client callback"]}),(0,i.jsx)(n.p,{children:"the formatting for the server command is like a normal console command.\r\nArguments are seperated by spaces"})]}),"\n",(0,i.jsx)(n.p,{children:"Register with the function clientside:"}),"\n",(0,i.jsx)(n.p,{children:"and execute with the function serverside:"}),"\n",(0,i.jsx)(n.h2,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'void function MessageUtils_ClientInit()\r\n{\r\n    AddServerToClientStringCommandCallback( "ServerHUDMessageShow", ServerCallback_CreateServerHUDMessage )\r\n}\r\n\r\nvoid function ServerCallback_CreateServerHUDMessage ( array<string> args )\r\n{\r\n    // client side command handle logic ...\r\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"server-to-ui-vm",children:[(0,i.jsx)(n.code,{children:"SERVER"})," to ",(0,i.jsx)(n.code,{children:"UI"})," vm"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Given a player, function name, and optional parameters, call function\r\nin UI script. Allowed var types are null, bool, int, and float."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Remote_CallFunction_UI( player, "ScriptCallback_UnlockAchievement", achievementID )\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"client-to-server-vm",children:[(0,i.jsx)(n.code,{children:"CLIENT"})," to ",(0,i.jsx)(n.code,{children:"SERVER"})," vm"]}),"\n",(0,i.jsx)(n.h1,{id:"client-to-server-command-callbacks",children:"Client to Server command callbacks"}),"\n",(0,i.jsx)(n.p,{children:"Register a client command callback serverside with"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"player"})," is the player that called the command clientside. The callback\r\nfunction should return ",(0,i.jsx)(n.code,{children:"true"})," if the command was accepted and ",(0,i.jsx)(n.code,{children:"false"})," if\r\nit was invalid."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"CLIENT"})," vm can execute commands with the function:"]}),"\n",(0,i.jsxs)(n.p,{children:["These will be handled by the ",(0,i.jsx)(n.code,{children:"SERVER"})," if the command is registered."]}),"\n",(0,i.jsx)(n.h1,{id:"clientcommand-notifications",children:"ClientCommand Notifications"}),"\n",(0,i.jsxs)(n.p,{children:["Since version 1.5 mods can receive notifications when a client command\r\nhas been handled. This is different from\r\n",(0,i.jsx)(n.code,{children:"AddClientCommandCallback"})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Example usage with the ",(0,i.jsx)(n.code,{children:"PrivateMatchLaunch"})," clientcommand"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'void function init(){\r\n    AddClientCommandNotifyCallback("PrivateMatchLaunch", started)\r\n}\r\n\r\nvoid function started(entity player, array<string> args){\r\n    print(player + " started the match")\r\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Please refer to ",(0,i.jsx)(n.code,{children:"list_client_commands"}),"  for\r\na list of native client commands you could catch."]}),"\n",(0,i.jsxs)(n.h3,{id:"client-to-ui-vm",children:[(0,i.jsx)(n.code,{children:"CLIENT"})," to ",(0,i.jsx)(n.code,{children:"UI"})," vm"]}),"\n",(0,i.jsxs)(n.p,{children:["Create a global function in the ",(0,i.jsx)(n.code,{children:"UI"})," vm and call it in the ",(0,i.jsx)(n.code,{children:"CLIENT"})," vm\r\nwith the function:"]}),"\n",(0,i.jsxs)(n.p,{children:["You can also pass parameters to the function. ",(0,i.jsx)(n.code,{children:"identifier"})," is the name\r\nof the function you want to call."]}),"\n",(0,i.jsx)(n.h2,{id:"example-3",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'#if UI\r\nglobal function CallMe\r\n\r\nvoid function CallMe( int a, int b )\r\n{\r\n    printt( a + b )\r\n}\r\n#elseif CLIENT\r\nRunUIScript( "CallMe", 1, 2 ) // 3\r\n#endif\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"ui-to-client-vm",children:[(0,i.jsx)(n.code,{children:"UI"})," to ",(0,i.jsx)(n.code,{children:"CLIENT"})," vm"]}),"\n",(0,i.jsxs)(n.p,{children:["Create a global function in the ",(0,i.jsx)(n.code,{children:"CLIENT"})," vm and call it in the ",(0,i.jsx)(n.code,{children:"UI"})," vm\r\nwith the function:"]}),"\n",(0,i.jsxs)(n.p,{children:["You can also pass parameters to the function. ",(0,i.jsx)(n.code,{children:"identifier"})," is the name\r\nof the function you want to call."]}),"\n",(0,i.jsx)(n.h2,{id:"example-4",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'#if CLIENT\r\nglobal function CallMe\r\n\r\nvoid function CallMe( int a, int b )\r\n{\r\n    printt( a + b )\r\n}\r\n#elseif UI\r\nRunClientScript( "CallMe", 1, 2 ) // 3\r\n#endif\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var i=r(6540);const t={},c=i.createContext(t);function o(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);