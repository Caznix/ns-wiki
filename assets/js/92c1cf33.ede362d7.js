"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[9763],{3940:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var t=r(4848),i=r(8453);const s={},c="Squirrel Functions",l={id:"squirrel/cpp_api/sq_functions",title:"Squirrel Functions",description:"Adding Squirrel Functions",source:"@site/docs/squirrel/cpp_api/sq_functions.md",sourceDirName:"squirrel/cpp_api",slug:"/squirrel/cpp_api/sq_functions",permalink:"/ns-wiki/docs/squirrel/cpp_api/sq_functions",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/cpp_api/sq_functions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"objectmanipulation",permalink:"/ns-wiki/docs/squirrel/cpp_api/objectmanipulation"},next:{title:"Stack",permalink:"/ns-wiki/docs/squirrel/cpp_api/stack"}},a={},o=[{value:"Adding Squirrel Functions",id:"sq-api-register-native-functions-c-macro",level:2},{value:"Examples",id:"examples",level:3},{value:"Replacing Squirrel Functions",id:"replacing-squirrel-functions",level:2},{value:"Script Contexts",id:"script-contexts",level:2},{value:"Script Returns",id:"script-returns",level:2},{value:"Calling",id:"sq-api-calling-functions",level:2},{value:"Errors",id:"errors",level:2}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"squirrel-functions",children:"Squirrel Functions"})}),"\n",(0,t.jsx)(n.h2,{id:"sq-api-register-native-functions-c-macro",children:"Adding Squirrel Functions"}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.code,{children:"ADD_SQFUNC"})," macro defined in ",(0,t.jsx)(n.code,{children:"squirrelautobind.h"})," to\r\neasily add new Squirrel functions for specific contexts."]}),"\n",(0,t.jsx)(n.p,{children:"Inside the macro you have access to the Squirrel Manager of the context\r\nthe function has been called from and the SQVM."}),"\n",(0,t.jsx)(n.p,{children:"Parameters are the initial stack in the function context."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"param return_type"}),"\n",(0,t.jsx)(n.p,{children:":   The squirrel return type the compiler expects from this function"}),"\n",(0,t.jsx)(n.p,{children:"param funcName"}),"\n",(0,t.jsx)(n.p,{children:":   The squirrel function name"}),"\n",(0,t.jsx)(n.p,{children:"param argTypes"}),"\n",(0,t.jsx)(n.p,{children:":   The args with types the compiler expects"}),"\n",(0,t.jsx)(n.p,{children:"param helpText"}),"\n",(0,t.jsx)(n.p,{children:":   A help text describing the function"}),"\n",(0,t.jsx)(n.p,{children:"param runOnContext"}),"\n",(0,t.jsx)(n.p,{children:":   The contexts that have access to this function"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:"Return a string from a native registered function:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'ADD_SQFUNC("string", CPlugTest, "", "returns \\"native gaming\\"", ScriptContext::CLIENT | ScriptContext::SERVER)\r\n{\r\n    g_pSquirrel<context>->pushstring(sqvm, "native gaming"); // push a string to the stack\r\n\r\n    return SQRESULT_NOTNULL; // Signal that the topmost item on the stack is returned by this function\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Return a complex ",(0,t.jsx)(n.code,{children:"ornull"})," type:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'ADD_SQFUNC("array<int> ornull", CPlugComplex, "int n", "returns null", ScriptContext::CLIENT | ScriptContext::SERVER | ScriptContext::UI)\r\n{\r\n    SQInteger n = g_pSquirrel<context>->getinteger(sqvm, 1);\r\n\r\n    if (n == 0)\r\n        return SQRESULT_NULL;\r\n\r\n    g_pSquirrel<context>->newarray(sqvm, 0);\r\n    g_pSquirrel<context>->pushinteger(sqvm, n);\r\n    g_pSquirrel<context>->arrayappend(sqvm, 2);\r\n    g_pSquirrel<context>->pushinteger(sqvm, n * 2);\r\n    g_pSquirrel<context>->arrayappend(sqvm, 2);\r\n\r\n    return SQRESULT_NOTNULL; // return the array [ n, n * 2 ] or NULL if n == 0\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"replacing-squirrel-functions",children:"Replacing Squirrel Functions"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Replacing functions is not possible in plugins"})}),"\n",(0,t.jsxs)(n.p,{children:["You can use the ",(0,t.jsx)(n.code,{children:"REPLACE_SQFUNC"})," macro to replace an existing sq\r\nfunction."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"param funcName"}),"\n",(0,t.jsx)(n.p,{children:":   The name of the function to replace"}),"\n",(0,t.jsx)(n.p,{children:"param runOnContext"}),"\n",(0,t.jsx)(n.p,{children:":   The contexts that have access to this function"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["It's also possible to add an override directly with the\r\n",(0,t.jsx)(n.code,{children:"AddFuncOverride"})," function of the ",(0,t.jsx)(n.code,{children:"SquirrelManager"})," class."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[":param"," std::string name: The name of the function to override ",":param","\r\nSQFunc func: A function object that replaces the logic"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'// Replaces dangerous vanilla functions to only log their call with no further logic.\r\ng_pSquirrel<context>->AddFuncOverride("DevTextBufferWrite", SQ_StubbedFunc<context, "DevTextBufferWrite">);\r\ng_pSquirrel<context>->AddFuncOverride("DevTextBufferClear", SQ_StubbedFunc<context, "DevTextBufferClear">);\r\ng_pSquirrel<context>->AddFuncOverride("DevTextBufferDumpToFile", SQ_StubbedFunc<context, "DevTextBufferDumpToFile">);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"script-contexts",children:"Script Contexts"}),"\n",(0,t.jsx)(n.p,{children:"Scriptcontexts are used to define the VMs that have access to a native\r\nfunction. Available Contexts are"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ScriptContext::SERVER"})," - The SERVER sqvm"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ScriptContext::CLIENT"})," - The CLIENT sqvm"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ScriptContext::UI"})," - The UI vm"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"script-returns",children:"Script Returns"}),"\n",(0,t.jsxs)(n.p,{children:["Squirrel functions need to return a ",(0,t.jsx)(n.code,{children:"SQRESULT"}),". Valid results are"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SQRESULT_NULL"})," - This function returns ",(0,t.jsx)(n.code,{children:"null"}),". Nothing is left over\r\non the stack."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SQRESULT_NOTNULL"})," - This functions returns the last item on the\r\nstack."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SQRESULT_ERROR"})," - This function has thrown an error."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"sq-api-calling-functions",children:"Calling"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"param char* funcname"}),"\n",(0,t.jsx)(n.p,{children:":   Name of the function to call"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This is a squirrel API wrapper added by northstar. It's not available\r\nfor plugins and is supposed to abstract squirrel calls."})}),"\n",(0,t.jsx)(n.p,{children:"This function assumes the squirrel VM is stopped/blocked at the moment\r\nof call"}),"\n",(0,t.jsx)(n.p,{children:"Calling this function while the VM is running is likely to result in a\r\ncrash due to stack destruction"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to call into squirrel asynchronously, use\r\n",(0,t.jsx)(n.a,{href:"#AsyncCall",children:"AsyncCall"})," instead."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'Call("PluginCallbackTest"); // PluginCallbackTest()\n'})}),"\n"]})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"param char* funcname"}),"\n",(0,t.jsx)(n.p,{children:":   Name of the function to call"}),"\n",(0,t.jsx)(n.p,{children:"param Args... args"}),"\n",(0,t.jsx)(n.p,{children:":   vector of args to pass to the function"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This is a squirrel API wrapper added by northstar. It's not available\r\nfor plugins and is supposed to abstract squirrel calls."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'Call("PluginCallbackTest", "param"); // PluginCallbackTest("param")\n'})}),"\n",(0,t.jsx)(n.p,{children:"param char* funcname"}),"\n",(0,t.jsx)(n.p,{children:":   Name of the function to call"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This is a squirrel API wrapper added by northstar. It's not available\r\nfor plugins and is supposed to abstract squirrel calls."})}),"\n",(0,t.jsx)(n.p,{children:"This function schedules a call to be executed on the next frame"}),"\n",(0,t.jsx)(n.p,{children:"This is useful for things like threads and plugins, which do not run\r\non the main thread."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"param char* funcname"}),"\n",(0,t.jsx)(n.p,{children:":   Name of the function to call"}),"\n",(0,t.jsx)(n.p,{children:"param Args... args"}),"\n",(0,t.jsx)(n.p,{children:":   vector of args to pass to the function"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This is a squirrel API wrapper added by northstar. It's not available\r\nfor plugins and is supposed to abstract squirrel calls."})}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,t.jsx)(n.p,{children:":   the target vm"}),"\n",(0,t.jsx)(n.p,{children:"param SQInteger args"}),"\n",(0,t.jsx)(n.p,{children:":   number of arguments to call this function with"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"_call"})," adds one to the ",(0,t.jsx)(n.code,{children:"args"})," count for ",(0,t.jsx)(n.code,{children:"this"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This is a squirrel API wrapper added by northstar. It's not available\r\nfor plugins and is supposed to abstract squirrel calls."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'SQObject functionobj {};\r\nSQRESULT result = g_pSquirrel<context>->sq_getfunction(sqvm, "PluginCallbackTest", &functionobj, 0); // Get a global squirrel function called "PluginCallbackTest"\r\n\r\nif (result == SQRESULT_ERROR)\r\n{\r\n    spdlog::error("Unable to find function. Is it global?");\r\n    return SQRESULT_ERROR;\r\n}\r\n\r\ng_pSquirrel<context>->pushobject(sqvm, &functionobj);\r\ng_pSquirrel<context>->pushroottable(sqvm);\r\ng_pSquirrel<context>->pushstring(sqvm, "param");\r\nreturn g_pSquirrel<context>->_call(sqvm, 1); // PluginCallbackTest("param")\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,t.jsx)(n.p,{children:":   the target vm"}),"\n",(0,t.jsx)(n.p,{children:"param SQInteger iArgs"}),"\n",(0,t.jsx)(n.p,{children:":   number of parameters of the function"}),"\n",(0,t.jsx)(n.p,{children:"param SQBool bShouldReturn"}),"\n",(0,t.jsx)(n.p,{children:":   if true the function will push the return value to the stack"}),"\n",(0,t.jsx)(n.p,{children:"param SQBool bThrowError"}),"\n",(0,t.jsx)(n.p,{children:":   if true, if a runtime error occurs during the execution of the\r\ncall, the vm will invoke the error handler"}),"\n",(0,t.jsx)(n.p,{children:"calls a closure or a native closure. The function pops all the\r\nparameters and leave the closure in the stack; if retval is true the\r\nreturn value of the closure is pushed. If the execution of the\r\nfunction is suspended through sq_suspendvm(), the closure and the\r\narguments will not be automatically popped from the stack."}),"\n",(0,t.jsxs)(n.p,{children:["When using to create an instance, push a dummy parameter to be filled\r\nwith the newly-created instance for the constructor's ",(0,t.jsx)(n.code,{children:"this"}),"\r\nparameter."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"errors",children:"Errors"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,t.jsx)(n.p,{children:":   the target vm"}),"\n",(0,t.jsx)(n.p,{children:"param SQChar* error"}),"\n",(0,t.jsx)(n.p,{children:":   string thrown"}),"\n",(0,t.jsx)(n.p,{children:"returns"}),"\n",(0,t.jsxs)(n.p,{children:[":   ",(0,t.jsx)(n.code,{children:"SQRESULT_ERROR"})]}),"\n",(0,t.jsxs)(n.p,{children:["Throws an error with ",(0,t.jsx)(n.code,{children:"error"})," being the thrown object."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'ADD_SQFUNC("void", CPlugThrowTest, "", "", ScriptContext::UI)\r\n{\r\n    return g_pSquirrel<context>->raiseerror(sqvm, "test error");\r\n}\r\n\r\n/* sq:\r\ntry {\r\n    CPlugThrowTest()\r\n} catch(e) {\r\n    print(e) // "test error"\r\n}\r\n*/\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{title:"TODO",type:"warning",children:[(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"from @cazdotwav"}),"\n"]}),(0,t.jsx)(n.p,{children:"This page needs some serious beautification + clarification"})]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var t=r(6540);const i={},s=t.createContext(i);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);