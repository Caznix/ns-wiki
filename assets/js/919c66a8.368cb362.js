"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[54],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var o=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),p=r,y=d["".concat(s,".").concat(p)]||d[p]||g[p]||a;return t?o.createElement(y,i(i({ref:n},u),{},{components:t})):o.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2549:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=t(8168),r=(t(6540),t(5680));const a={},i="Useful Functions",l={unversionedId:"source/reference/northstar/usefulfuncs",id:"source/reference/northstar/usefulfuncs",isDocsHomePage:!1,title:"Useful Functions",description:"Custom Ejection Messages",source:"@site/docs/source/reference/northstar/usefulfuncs.md",sourceDirName:"source/reference/northstar",slug:"/source/reference/northstar/usefulfuncs",permalink:"/ns-wiki/docs/source/reference/northstar/usefulfuncs",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/source/reference/northstar/usefulfuncs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Serverside RUI",permalink:"/ns-wiki/docs/source/reference/northstar/serversiderui"},next:{title:"Callbacks",permalink:"/ns-wiki/docs/source/reference/respawn/callbacks"}},s=[{value:"Custom Ejection Messages",id:"custom-ejection-messages",children:[{value:"How ejection messages are chosen",id:"how-ejection-messages-are-chosen",children:[]},{value:"Adding new messages",id:"adding-new-messages",children:[]},{value:"Localisation",id:"localisation",children:[]}]},{value:"Player functions",id:"player-functions",children:[{value:"Check for different weapon types on a player",id:"check-for-different-weapon-types-on-a-player",children:[]},{value:"Get weapon from entity",id:"get-weapon-from-entity",children:[]},{value:"Change a players invincibility",id:"change-a-players-invincibility",children:[]}]},{value:"Entity functions",id:"entity-functions",children:[{value:"Turret functions",id:"turret-functions",children:[]},{value:"Rest so far to be sorted",id:"rest-so-far-to-be-sorted",children:[]},{value:"Titans",id:"titans",children:[]}]},{value:"Gamemode functions",id:"gamemode-functions",children:[]},{value:"Threaded conditonals",id:"threaded-conditonals",children:[]},{value:"Random functions",id:"random-functions",children:[]},{value:"Type Utilities",id:"type-utilities",children:[{value:"Table",id:"table",children:[]},{value:"Arrays",id:"arrays",children:[]},{value:"String",id:"string",children:[]},{value:"Float",id:"float",children:[]},{value:"Integer",id:"integer",children:[]},{value:"Vectors",id:"vectors",children:[]}]}],c={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,o.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"useful-functions"},"Useful Functions"),(0,r.yg)("h2",{id:"custom-ejection-messages"},"Custom Ejection Messages"),(0,r.yg)("h3",{id:"how-ejection-messages-are-chosen"},"How ejection messages are chosen"),(0,r.yg)("p",null,"When ejecting the game selects a random number between 0 and 1, if this\nnumber is greater than 0.15 then a random common eject message is\nreturned, if it is less than 0.15 then a rare ejection message is\nreturned."),(0,r.yg)("h3",{id:"adding-new-messages"},"Adding new messages"),(0,r.yg)("p",null,"Using ",(0,r.yg)("inlineCode",{parentName:"p"},"AddCommonEjectMessage( String message )")," and\n",(0,r.yg)("inlineCode",{parentName:"p"},"AddRareEjectMessage( String message )")," in script additional messages\ncan be added to the pool of potential ejection messages"),(0,r.yg)("h3",{id:"localisation"},"Localisation"),(0,r.yg)("p",null,"Like most things custom ejection messages can be localised through\nkeyvalues"),(0,r.yg)("p",null,"There are no functions to remove ejection messages, however existing\nones can be altered by modifying localisation files"),(0,r.yg)("p",null,"Below are a list of useful functions added by Northstar."),(0,r.yg)("h2",{id:"player-functions"},"Player functions"),(0,r.yg)("h3",{id:"check-for-different-weapon-types-on-a-player"},"Check for different weapon types on a player"),(0,r.yg)("h3",{id:"get-weapon-from-entity"},"Get weapon from entity"),(0,r.yg)("p",null,"Take weapon from Entity ","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~"),(0,r.yg)("p",null,"Validity checks for player\n","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"Respawn comment next to the function:"),(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("inlineCode",{parentName:"p"},"TODO: This is a copy of SP's PlayerPosInSolid(). Not changing it to avoid patching SP. Merge into one function next game"),"\n::::")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"Respawn comment next to the function:"),(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("inlineCode",{parentName:"p"},"TODO:  This function returns true for a player standing inside a friendly grunt. It also returns true if you are right up against a ceiling.Needs fixing for next game"),"\n::::")),(0,r.yg)("h3",{id:"change-a-players-invincibility"},"Change a players invincibility"),(0,r.yg)("h2",{id:"entity-functions"},"Entity functions"),(0,r.yg)("h3",{id:"turret-functions"},"Turret functions"),(0,r.yg)("h3",{id:"rest-so-far-to-be-sorted"},"Rest so far to be sorted"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"this function only exists on clients\n::::")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"A cleaner way to get a player:\n::::")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"this function only works on NPCs and not on players\n::::")),(0,r.yg)("h3",{id:"titans"},"Titans"),(0,r.yg)("h2",{id:"gamemode-functions"},"Gamemode functions"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"Does not work for FFA modes\n::::")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Returns the local player\\'s UID, else ",(0,r.yg)("inlineCode",{parentName:"p"},"null"),". Available on CLIENT, UI\nand SERVER VM.")),(0,r.yg)("h2",{id:"threaded-conditonals"},"Threaded conditonals"),(0,r.yg)("h2",{id:"random-functions"},"Random functions"),(0,r.yg)("h2",{id:"type-utilities"},"Type Utilities"),(0,r.yg)("h3",{id:"table"},"Table"),(0,r.yg)("h3",{id:"arrays"},"Arrays"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},":::: warning\n::: title\nWarning\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"this returns ",(0,r.yg)("inlineCode",{parentName:"p"},"-1")," if the item was not found in the array\n::::")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Removes a variable by value instead of index.")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Reorders the array randomly.")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"returns a random element from array")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"changes the size of the array to the first int, new slots will be\nfilled with the 2nd argument.")),(0,r.yg)("p",null,"::::: note\n::: title\nNote\n:::"),(0,r.yg)("p",null,"A few built-in functions you can give as arguments to sort an array."),(0,r.yg)("p",null,"::: dropdown\nArray Sort Functions"),(0,r.yg)("p",null,"Functions for score comparison\n:::\n:::::"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"Returns a section of the array as new array. Copies from start to the\nend (not included). If start is negative the index is calculated as\nlength + start, if end is negative the index is calculated as length +\nend. If end is omitted end is equal to the array length.\n::::")),(0,r.yg)("h3",{id:"string"},"String"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"returns a unique string")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"returns the new string with the first occurance of the toReplace\nstring.\n::::")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Returns a formatted template")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},":::: warning\n::: title\nWarning\n:::"),(0,r.yg)("p",{parentName:"blockquote"},"returns ",(0,r.yg)("inlineCode",{parentName:"p"},"null")," if the string is not found."),(0,r.yg)("p",{parentName:"blockquote"},"You can eliminate the possibility of the returned index being null by\ncasting like this:"),(0,r.yg)("pre",{parentName:"blockquote"},(0,r.yg)("code",{parentName:"pre"},'int ornull index = GetMapName().find( "mp" )\n\nif( !index )\n    return\nint( index )\nint n = index + 1 //now we do not need the ornull anymore\n')),(0,r.yg)("p",{parentName:"blockquote"},"::::")),(0,r.yg)("h3",{id:"float"},"Float"),(0,r.yg)("h3",{id:"integer"},"Integer"),(0,r.yg)("h3",{id:"vectors"},"Vectors"))}d.isMDXComponent=!0}}]);