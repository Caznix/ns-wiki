"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[4298],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>y});var a=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=p(n),m=o,y=g["".concat(s,".").concat(m)]||g[m]||d[m]||r;return n?a.createElement(y,i(i({ref:t},u),{},{components:n})):a.createElement(y,i({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7413:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(8168),o=(n(6540),n(5680));const r={},i=void 0,l={unversionedId:"reference/northstar/modsettings",id:"reference/northstar/modsettings",isDocsHomePage:!1,title:"modsettings",description:"Mod Settings ====",source:"@site/docs/reference/northstar/modsettings.md",sourceDirName:"reference/northstar",slug:"/reference/northstar/modsettings",permalink:"/ns-wiki/docs/reference/northstar/modsettings",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/reference/northstar/modsettings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HTTP and JSON",permalink:"/ns-wiki/docs/reference/northstar/httprequests"},next:{title:"Server Authentification",permalink:"/ns-wiki/docs/reference/northstar/msinterface"}},s=[],p={toc:s},u="wrapper";function g(e){let{components:t,...n}=e;return(0,o.yg)(u,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Mod Settings ===="),(0,o.yg)("p",null,"Setup ","-","-","-","-"),(0,o.yg)("p",null,"ConVars are the easiest way to implement settings for your mod using the\nMod Settings API."),(0,o.yg)("p",null,"Your mod needs to register itself and all ConVars that are a part of\nyour mod that should be accessible in the Mod Settings menu. To do this,\nsimply add a new script to your mod that runs only in the UI VM like\nthis:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'"Path": "ui/ms_example_mod.nut",\n"RunOn": "UI",\n"UICallback": {\n  "Before": "ExampleMod_AddModSettings"\n}\n')),(0,o.yg)("p",null,"Inside of the callback specified here, you can add your settings."),(0,o.yg)("h1",{id:"api"},"API"),(0,o.yg)("p",null,":::: warning\n::: title\nWarning\n:::"),(0,o.yg)("p",null,"ConVar values will only persist if the ConVar has an ARCHIVE flag. For\nClients, use ",(0,o.yg)("inlineCode",{parentName:"p"},"FCVAR_ARCHIVE_PLAYERPROFILE"),"."),(0,o.yg)("p",null,"All Mod Settings functions have a ",(0,o.yg)("inlineCode",{parentName:"p"},"stackPos")," paramter. This parameter\nshould only be changed if you\\'re writing custom wrappers for the\nsettings.\n::::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Adds a new category in the settings for your mod"),(0,o.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,o.yg)("p",{parentName:"blockquote"},"It\\'s mandatory to register a mod before you can add any settings\n::::")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Adds a new category to your mod"),(0,o.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,o.yg)("p",{parentName:"blockquote"},"It\\'s mandatory to register a category for your mod. A mod may have\nmultiple categories\n::::")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Adds a basic setting to the last declared category."),(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"Parameters:")),(0,o.yg)("ul",{parentName:"blockquote"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"string conVar")," - the ConVar this setting modifies"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"string displayName")," - The display string of this setting. This\ncan be a localization token."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},'string type = ""')," - Optional type of this ConVar. This guards\nagainst users inserting invalid values."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"int stackPos = 2"))),(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"Types:")),(0,o.yg)("ul",{parentName:"blockquote"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"int")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"bool")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"float")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"float2")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"float3")," / ",(0,o.yg)("inlineCode",{parentName:"li"},"vector"))),(0,o.yg)("p",{parentName:"blockquote"},"other types will default to setting a string for the ConVar.")),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Adds a setting to the menu that uses an enum. Users can navigate with\nbuttons next to the input between possible values."),(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"Parameters:")),(0,o.yg)("ul",{parentName:"blockquote"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"string conVar")," - the ConVar this setting modifies"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"string displayName")," - The display string of this setting. This\ncan be a localization token."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"array<string> values")," - all possible values of this enum. The\nConVar value will be set to the index of the selected value."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"int stackPos = 2")))),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Adds a ConVar setting to the menu that has a slider."),(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("strong",{parentName:"p"},"Parameters:")),(0,o.yg)("ul",{parentName:"blockquote"},(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"string conVar")," - the conVar this setting modifies"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"string displayName")," - The display string of this setting. This\ncan be a localization token."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"float min = 0.0")," - the minimum value of the ConVar"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"float max = 0.0")," - the maximum value of the ConVar"),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"float stepSize = 0.1")," - the distance between each possible value."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"bool forceClamp = false")," - wether to force the value to round to\nthe nearest interval of ",(0,o.yg)("inlineCode",{parentName:"li"},"stepValue"),".")),(0,o.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,o.yg)("p",{parentName:"blockquote"},"Whenever Mod Settings is used, the value will be clamped to the\nnearest value available in the slider.\n::::")),(0,o.yg)("p",null,"Examples ","-","-","-","-"),(0,o.yg)("p",null,"Settings Declaration \\^\\^\\^\\^"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'AddModTitle( "#MY_LOCALIZED_MOD_TITLE" )\n\nAddModCategory( "Gameplay" )\nAddConVarSetting( "my_mod_gamer_setting", "Gamer Setting", "string" )\nAddConVarSettingEnum( "my_mod_enum_setting_whatever", "Cool Feature", [ "Disabled", "Enabled" ] )\n\nAddModCategory( "Visuals" )\nAddConVarSetting( "my_mod_display_color", "Display Color", "vector" )\nAddModSettingsButton( "Preview", void function(){ AdvanceMenu( "MyModMenu" ) } )  // Assumes you have "MyModMenu" set up etc.\n')),(0,o.yg)("p",null,"Wrapper \\^\\^\\^\\^"),(0,o.yg)("p",null,"To create custom wrapper functions you need to specify the stack\nposition where the root of your Mod Setting declarations take place."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"void function AddModSettingsDropDown( string displayName, array<string> options )\n{\n  NSModSettingsAddButton( displayName, void function() { OpenDropDown( options ) }, 3 )\n}\n")),(0,o.yg)("p",null,"Note that in this example the stack position is ",(0,o.yg)("inlineCode",{parentName:"p"},"3"),", since\n",(0,o.yg)("inlineCode",{parentName:"p"},"AddModSettingsButton")," needs to walk one additional step to the callback\nfunction."))}g.isMDXComponent=!0}}]);