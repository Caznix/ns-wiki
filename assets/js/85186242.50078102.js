"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[7375],{9569:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>o,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=t(4848),s=t(8453);const i={},l="Structs",a={id:"squirrel/types/structs",title:"Structs",description:"Structs are statically typed, fixed size structures that contain other",source:"@site/docs/squirrel/types/structs.md",sourceDirName:"squirrel/types",slug:"/squirrel/types/structs",permalink:"/ns-wiki/docs/squirrel/types/structs",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/types/structs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Strings",permalink:"/ns-wiki/docs/squirrel/types/strings"},next:{title:"Tables",permalink:"/ns-wiki/docs/squirrel/types/tables"}},c={},d=[{value:"Declaration",id:"declaration",level:2},{value:"Nesting Structs",id:"nesting-structs",level:2},{value:"Self Nesting Structs",id:"self-nesting-structs",level:3},{value:"Field Default Values",id:"field-default-values",level:2},{value:"Singleton Instances",id:"singleton-instances",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"structs",children:"Structs"})}),"\n",(0,r.jsx)(n.p,{children:"Structs are statically typed, fixed size structures that contain other\r\nvalues. Similar to tables they are used to store mutliple values,\r\nhowever structs allow for each value to have a seperate type."}),"\n",(0,r.jsx)(n.h2,{id:"declaration",children:"Declaration"}),"\n",(0,r.jsx)(n.p,{children:"Before using a struct you need to define it and all contents."}),"\n",(0,r.jsx)(n.p,{children:"The fields are typed like any regular variable."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"struct MyStruct\r\n{\r\n int field1\r\n string field2\r\n array<float> field3\r\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can then use ",(0,r.jsx)(n.code,{children:"MyStruct"})," as a type anywhere in the file. Structs are\r\ndefault initialized by assigning each field it's appropriate default\r\nvalue. Struct fields can be indexed by writing ",(0,r.jsx)(n.code,{children:"instance.field"}),", just\r\nlike with tables."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"MyStruct myStructInstance\r\nprintt( myStructInstance.field1 ) // 0\n"})}),"\n",(0,r.jsx)(n.p,{children:"Structs are passed by reference so if a function changes a field that\r\nfield is changed for everything that uses the struct instance."}),"\n",(0,r.jsx)(n.p,{children:"Struct instances can also get initiaized with different default values\r\nif required."}),"\n",(0,r.jsxs)(n.p,{children:["Similar like in static arrays, you can omit any fields that should have\r\ntheir type's default value with ",(0,r.jsx)(n.code,{children:"..."}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'MyStruct ins = { field3 = [], field1 = 1, ... }\r\nprintt( ins.field1, ins.field2 ) // 1, ""\n'})}),"\n",(0,r.jsx)(n.h2,{id:"nesting-structs",children:"Nesting Structs"}),"\n",(0,r.jsx)(n.p,{children:"Struct fields can be any type, this includes previously declared structs\r\nas well."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"struct Engine\r\n{\r\n string manufacturer\r\n}\r\n\r\nstruct Tire\r\n{\r\n string material\r\n}\r\n\r\nstruct Car\r\n{\r\n Engine engine,\r\n Tire[4] tires\r\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"self-nesting-structs",children:"Self Nesting Structs"}),"\n",(0,r.jsxs)(n.p,{children:["Structs can contain fields of their own type, however they need to be\r\n",(0,r.jsx)(n.strong,{children:"null initialized"}),". You can achieve this by specifying their type as\r\n",(0,r.jsx)(n.code,{children:"ornull"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"struct LinkedList\r\n{\r\n var content\r\n LinkedList ornull nextNode\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"field-default-values",children:"Field Default Values"}),"\n",(0,r.jsx)(n.p,{children:"Any struct field can have an optional default value. If omitted, the\r\ntype's default value is used instead."}),"\n",(0,r.jsx)(n.p,{children:"Default values need to be a constant expression that can be evaluated at\r\ncompile time."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"struct Dice\r\n{\r\n int[6] sides = [ 1, 2, 3, 4, 5, 6 ]\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"singleton-instances",children:"Singleton Instances"}),"\n",(0,r.jsx)(n.p,{children:"You can define a struct and initialize a local variable of that struct\r\ninstantly with singletons. These are often used to have global variables\r\nthat are only used in a single script file."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'struct {\r\n var menu\r\n} file\r\n\r\nvoid function InitMyMenu()\r\n{\r\n file.menu = GetMenu( "SomeMenu" )\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Singletons can also be used for struct fields."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'struct Car\r\n{\r\n struct {\r\n   string manufacturer\r\n   } engine\r\n}\r\n\r\n// ...\r\nCar car\r\ncar.engine.manufacturer = "Vinson Dynamics"\n'})})]})}function o(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var r=t(6540);const s={},i=r.createContext(s);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);