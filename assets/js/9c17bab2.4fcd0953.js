"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[252],{5680:(e,t,o)=>{o.d(t,{xA:()=>c,yg:()=>d});var n=o(6540);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=s(o),y=r,d=g["".concat(p,".").concat(y)]||g[y]||u[y]||a;return o?n.createElement(d,i(i({ref:t},c),{},{components:o})):n.createElement(d,i({ref:t},c))}));function d(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=y;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[g]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=o[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}y.displayName="MDXCreateElement"},9698:(e,t,o)=>{o.r(t),o.d(t,{contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=o(8168),r=(o(6540),o(5680));const a={},i=void 0,l={unversionedId:"source/reference/respawn/topology",id:"source/reference/respawn/topology",isDocsHomePage:!1,title:"topology",description:"Topologies \\-\\-\\-\\-\\--",source:"@site/docs/source/reference/respawn/topology.md",sourceDirName:"source/reference/respawn",slug:"/source/reference/respawn/topology",permalink:"/ns-wiki/docs/source/reference/respawn/topology",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/source/reference/respawn/topology.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Titan",permalink:"/ns-wiki/docs/source/reference/respawn/titan"},next:{title:"Materials - TODO",permalink:"/ns-wiki/docs/source/repak/assets/material"}},p=[],s={toc:p},c="wrapper";function g(e){let{components:t,...o}=e;return(0,r.yg)(c,(0,n.A)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Topologies ","-","-","-","-","-","-"),(0,r.yg)("p",null,"RUI elements are rendered on topologies."),(0,r.yg)("p",null,"The position of topologies are relative to the position of their parent."),(0,r.yg)("p",null,"Since the number of topologies that can be created is very limited and\nVanilla uses most of the slots already, try to minimize your topology\nuses. Instead of creating new ones, check if you can use one that\nalready exists:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"clGlobal.topoFullScreen\nclGlobal.topoCockpitHudPermanent\nclGlobal.topoTitanCockpitLowerHud\nclGlobal.topoTitanCockpitInstrument1 // yes, with a 1\nclGlobal.topoTitanCockpitHud\nclGlobal.topoCockpitHud\n")),(0,r.yg)("p",null,"Creating Topologies \\^\\^\\^\\^\\^\\^"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"This creates a simple topology at the specified origin relative to the\nparent position."),(0,r.yg)("p",{parentName:"blockquote"},"The parameters ",(0,r.yg)("inlineCode",{parentName:"p"},"right")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"down")," specify the dimensions of the\ntopology relative to the origin. For example, passing\n",(0,r.yg)("inlineCode",{parentName:"p"},"<GetScreenSize()[0],0,0>")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"<0,GetScreenSize()[1],0>")," will create\na topology that covers the entire screen. Note that in this example\nthe origin is the top left corner. The unit used is pixels.")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"This destroys the passed topology. However, ruis that are already\ndrawn on top of it do ",(0,r.yg)("strong",{parentName:"p"},"not")," get destroyed.")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Parents the given topology to the anchor entity. The topology moves\nand rotates relative to the parent."),(0,r.yg)("p",{parentName:"blockquote"},"Set the position of the topology to ",(0,r.yg)("inlineCode",{parentName:"p"},"<0,0,0>")," to render at the\nparent\\'s position.")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Update the position and dimensions of the topology")),(0,r.yg)("p",null,"Drawcalls \\^\\^\\^\\^\\^\\^"),(0,r.yg)("p",null,"Drawcalls determine how and where RUIs on a topology are being rendered."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"RUI_DRAW_NONE"),": Don\\'t render rui at all"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"RUI_DRAW_HUD"),": Render rui on screen. Uses screen coordinates in\npixels."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"RUI_DRAW_WORLD"),": Render rui in worldspace on a two dimensional\nsurface facing the direction of the topology."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"RUI_DRAW_COCKPIT"),": Similiar to ",(0,r.yg)("inlineCode",{parentName:"li"},"RUI_DRAW_HUD")," but follows the\ncockpit headbob movement.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Drawcalls are not set for a topology but for each rui individually")),(0,r.yg)("p",null,"HUD Topology example \\^\\^\\^\\^\\^\\^"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'// Cover the top left quadrant of the screen with a basic image\nfloat[2] s = GetScreenSize()\nvar topo = RuiTopology_CreatePlane( <0,0,0>, <s[0] / 2,0,0>, <0,s[1] / 2,0>, true ) // RUIs scale with the topology they are being drawn on so make sure to use the correct dimensions\nRuiCreate( $"ui/basic_image.rpak", topo, RUI_DRAW_HUD, 0 )\n')),(0,r.yg)("p",null,"Worldspace Topology example \\^\\^\\^\\^\\^\\^"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'// REMEMBER TO DESTROY ALL TOPOS, RUIS AND PROPS YOU CREATE WHEN YOU NO LONGER NEED THEM\n// ripped from respawn\nvar function Worldspace_CreateRUITopology( vector org, vector ang, float width, float height )\n{\n    // adjust so the RUI is drawn with the org as its center point\n    org += ( (AnglesToRight( ang )*-1) * (width*0.5) )\n    org += ( AnglesToUp( ang ) * (height*0.5) )\n\n    // right and down vectors that get added to base org to create the display size\n    vector right = ( AnglesToRight( ang ) * width )\n    vector down = ( (AnglesToUp( ang )*-1) * height )\n\n    return RuiTopology_CreatePlane( org, right, down, true )\n}\n\nvoid function WorldSpaceTopoTest()\n{\n    // To rotate a topology without manually calculating and updating position and dimensions you can parent the topology to  a client side prop\n    entity player = GetLocalClientPlayer()\n    entity weapon = player.GetActiveWeapon()\n\n    vector fwd = AnglesToForward( weapon.GetAngles() )\n    vector right = AnglesToRight( weapon.GetAngles() )\n    vector up = AnglesToUp( weapon.GetAngles() )\n    vector conf = < 20, -40, 30 > // float next to the player\'s weapon\n\n    int attachIndex = weapon.LookupAttachment( "muzzle_flash" )\n    entity anchor = CreateClientSidePropDynamic( weapon.GetAttachmentOrigin( attachIndex ) + fwd * conf.x + right * conf.y + up * conf.z, <0,0,0>, $"models/dev/empty_model.mdl") // props need a model but this one is invisible so we don\'t need to set visibility manually\n    var topo = Worldspace_CreateRUITopology( <0,0,0>, <0,90,0>, 128, 64 ) // origin <0,0,0> so the topo sits at the origin of the prop\n\n    var tm_box = RuiCreate( $"ui/helmet_scanning_percentbar.rpak", topo, RUI_DRAW_WORLD, 0 )\n    RuiSetString( tm_box, "stage3TextTop", "Top" )\n    RuiSetString( tm_box, "stage3TextBottom", "Bottom" )\n\n    anchor.SetParent( weapon )\n    RuiTopology_SetParent( topo, anchor )\n}\n')))}g.isMDXComponent=!0}}]);