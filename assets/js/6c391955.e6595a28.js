"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[1234],{1154:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>a,frontMatter:()=>t,metadata:()=>r,toc:()=>h});var l=i(4848),o=i(8453);const t={},s="MDL Modding",r={id:"guides/tools/MDLModding",title:"MDL Modding",description:"MDL Overview",source:"@site/docs/guides/tools/MDLModding.md",sourceDirName:"guides/tools",slug:"/guides/tools/MDLModding",permalink:"/ns-wiki/docs/guides/tools/MDLModding",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/guides/tools/MDLModding.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BIK Video Modding",permalink:"/ns-wiki/docs/guides/tools/BIKVideoModding"},next:{title:"VTF Modding",permalink:"/ns-wiki/docs/guides/tools/VTFModding"}},d={},h=[{value:"MDL Overview",id:"mdl-overview",level:2},{value:"Editing an existing Model",id:"editing-an-existing-model",level:2},{value:"Prequisites",id:"prequisites",level:2},{value:"Workflow",id:"workflow",level:2},{value:"Short Video Guide",id:"short-video-guide",level:2},{value:"Blender",id:"blender",level:2},{value:"Crowbar",id:"crowbar",level:2},{value:"MDLShit",id:"mdlshit",level:2},{value:"Harmony VPK",id:"harmony-vpk",level:2},{value:"Workflow in Detail",id:"workflow-in-detail",level:2},{value:"Step 1: Extracting",id:"step-1-extracting",level:2},{value:"Step 2: Decompiling the model",id:"step-2-decompiling-the-model",level:2},{value:"Decompiling the model",id:"decompiling-the-model",level:3},{value:"Step 3: Importing to Blender",id:"step-3-importing-to-blender",level:2},{value:"Step 4: Editing the model",id:"step-4-editing-the-model",level:2},{value:"Step 5: Assigning Materials",id:"step-5-assigning-materials",level:2},{value:"Assigning Materials (smd)",id:"assigning-materials-smd",level:3},{value:"Assigning Materials (dmx)",id:"assigning-materials-dmx",level:3},{value:"Step 5.5: Multiple Material Paths (dmx)",id:"step-55-multiple-material-paths-dmx",level:2},{value:"Step 6: Exporting from Blender",id:"step-6-exporting-from-blender",level:2},{value:"Step 7: Compiling the model",id:"step-7-compiling-the-model",level:2},{value:"Step 8: Combining model files",id:"step-8-combining-model-files",level:2},{value:"Common errors",id:"common-errors",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"mdl-modding",children:"MDL Modding"})}),"\n",(0,l.jsx)(n.h2,{id:"mdl-overview",children:"MDL Overview"}),"\n",(0,l.jsx)(n.p,{children:"Model (MDL) is the extension for Source's proprietary model format. It\r\ndefines the structure of the model along with animation, bounding box,\r\nhit box, materials, mesh and LOD information. Unlike other Source games\r\nin Titanfall 2 files like the .phy, .vtx, .vvd etc. are not separate\r\nfiles and are instead included in the .mdl file."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://developer.valvesoftware.com/wiki/.mdl",children:'VALVe developer docs\r\n"Model"'})}),"\n",(0,l.jsx)(n.h2,{id:"editing-an-existing-model",children:"Editing an existing Model"}),"\n",(0,l.jsx)(n.p,{children:"While creating an entire Model from scratch is possible it would be an\r\nextremely long and tedious task. Instead its recommended to use an\r\nexisting Model as your base."}),"\n",(0,l.jsx)(n.h2,{id:"prequisites",children:"Prequisites"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://www.blender.org/download/",children:"Blender"})," (min. 2.92)"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://developer.valvesoftware.com/wiki/Blender_Source_Tools",children:"Blender Source\r\nTools"}),"\r\n(refer to Download page for install instructions)"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://steamcommunity.com/groups/CrowbarTool",children:"Crowbar"})," (min 0.74)"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"One of the following on Steam:"}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://store.steampowered.com/app/620/Portal_2/",children:"Portal 2"}),"\r\n(and its Authoring Tools ",(0,l.jsx)(n.a,{href:"https://developer.valvesoftware.com/wiki/Authoring_Tools/SDK_(Portal_2)",children:"Portal 2\r\nSDK"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://store.steampowered.com/app/1840/Source_Filmmaker/",children:"SourceFilmMaker"}),"\r\n(FREE)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://github.com/headassbtw/mdlshit",children:"mdlshit"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://github.com/harmonytf/HarmonyVPKTool",children:"Harmony VPK"})," (optional\r\nif you want to extract the model yourself)"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.admonition,{type:"note",children:[(0,l.jsx)(n.div,{children:(0,l.jsx)(n.p,{children:"Note"})}),(0,l.jsx)(n.p,{children:"This Guide is tailored towards users with atleast some experience with\r\nBlender. If you are new to Blender I recommend you to first familiarize\r\nyourself with the basics of Blender. There are many tutorials on the\r\nInternet that can help you with that. Especially the following topics\r\nare important for modifying or creating game assets:"}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Modeling"}),"\n",(0,l.jsx)(n.li,{children:"UV Mapping"}),"\n",(0,l.jsx)(n.li,{children:"Texturing"}),"\n",(0,l.jsx)(n.li,{children:"Rigging"}),"\n"]}),(0,l.jsx)(n.p,{children:"These things work in conjunction with each other and are all important\r\nfor creating a game ready model. An understanding of these topics is\r\nvery helpful for proper usage of Blender."})]}),"\n",(0,l.jsx)(n.h2,{id:"workflow",children:"Workflow"}),"\n",(0,l.jsx)(n.p,{children:"The workflow for editing a model is as follows:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Extract the model using ",(0,l.jsx)(n.a,{href:"#harmony-vpk",children:"HARMONY VPK"})," or Downloading\r\nthe model from the ",(0,l.jsx)(n.a,{href:"https://github.com/BigSpice/TitanFall-2-Skin-Modding/tree/main/Models_MDL_Format",children:"Titanfall 2 Skin Modding\r\nRepo"})]}),"\n",(0,l.jsxs)(n.li,{children:["Decompile the model using ",(0,l.jsx)(n.a,{href:"#crowbar",children:"CROWBAR"})]}),"\n",(0,l.jsxs)(n.li,{children:["Importing the model in ",(0,l.jsx)(n.a,{href:"#blender",children:"BLENDER"})]}),"\n",(0,l.jsx)(n.li,{children:"Editing the model to our liking"}),"\n",(0,l.jsx)(n.li,{children:"Assigning a material to parts of our model"}),"\n",(0,l.jsxs)(n.li,{children:["Exporting the model from ",(0,l.jsx)(n.a,{href:"#blender",children:"BLENDER"})]}),"\n",(0,l.jsxs)(n.li,{children:["Compiling using ",(0,l.jsx)(n.a,{href:"#crowbar",children:"CROWBAR"})]}),"\n",(0,l.jsxs)(n.li,{children:["Converting the MDL file with other output files using\r\n",(0,l.jsx)(n.a,{href:"#mdlshit",children:"MDLSHIT"})]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"short-video-guide",children:"Short Video Guide"}),"\n",(0,l.jsx)(n.p,{children:"This is a short video guide on MDL Editing, there are some discrepancies\r\nbetween the video and this guide but the general workflow is the same.\r\nIts relatively quick but shows the process quite well."}),"\n",(0,l.jsx)(n.div,{children:(0,l.jsx)(n.p,{children:"mZg5AlWvXZs"})}),"\n",(0,l.jsx)(n.h2,{id:"blender",children:"Blender"}),"\n",(0,l.jsx)(n.p,{children:"Blender will be used to edit the model. It is a free and open-source 3D\r\ncomputer graphics software toolset with many features. It is widely used\r\nfor animation, modeling, scene creation, and game development."}),"\n",(0,l.jsx)(n.p,{children:"The Source Tools add-on for Blender allows us to import and export\r\nSource Engine assets. It is a community-driven project that aims to\r\nprovide users with a convenient way to import and export Source Engine\r\nassets from and to Blender, for a wide range of applications, including\r\nanimation, modeling, scene creation, and game development."}),"\n",(0,l.jsx)(n.p,{children:"We will use both in conjunction to edit the model."}),"\n",(0,l.jsx)(n.h2,{id:"crowbar",children:"Crowbar"}),"\n",(0,l.jsx)(n.p,{children:"Crowbar is a tool written by ZeqMacaw. It is used to decompile and\r\ncompile Source Engine assets, such as models, textures, and sounds."}),"\n",(0,l.jsx)(n.p,{children:"We will use it to decompile and compile the model."}),"\n",(0,l.jsx)(n.h2,{id:"mdlshit",children:"MDLShit"}),"\n",(0,l.jsx)(n.p,{children:"MDLShit is a tool written by headassbtw. It is used to combine the MDL\r\nfile with the other output files from Crowbar."}),"\n",(0,l.jsx)(n.p,{children:"We will use it to combine the MDL file with the other output files from\r\nCrowbar."}),"\n",(0,l.jsx)(n.h2,{id:"harmony-vpk",children:"Harmony VPK"}),"\n",(0,l.jsx)(n.p,{children:"Harmony VPK is a tool written by the Harmony Team. It's an\r\nelectron-based GUI for VPKTool, and is used to extract files from VPK\r\nfiles."}),"\n",(0,l.jsx)(n.p,{children:"We will use it to extract the model from the game files."}),"\n",(0,l.jsx)(n.h2,{id:"workflow-in-detail",children:"Workflow in Detail"}),"\n",(0,l.jsx)(n.p,{children:"In this section we will go through the workflow in detail by using the\r\nFlatline as an example. We will add a cube to the side of the Flatline\r\nand assign a custom material to it."}),"\n",(0,l.jsx)(n.h2,{id:"step-1-extracting",children:"Step 1: Extracting"}),"\n",(0,l.jsxs)(n.admonition,{type:"note",children:[(0,l.jsx)(n.div,{children:(0,l.jsx)(n.p,{children:"Note"})}),(0,l.jsxs)(n.p,{children:["Can be skipped if you downloaded the model from the ",(0,l.jsx)(n.a,{href:"https://github.com/BigSpice/TitanFall-2-Skin-Modding/tree/main/Models_MDL_Format",children:"Titanfall 2 Skin\r\nModding\r\nRepo"}),"."]})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Open HARMONY VPK."}),"\n",(0,l.jsxs)(n.li,{children:["On the top right click on the ",(0,l.jsx)(n.code,{children:"Open VPK"})," button."]}),"\n",(0,l.jsxs)(n.li,{children:["Navigate to the location of your Titanfall 2 installions ",(0,l.jsx)(n.code,{children:"/vpk/"}),"\r\nfolder."]}),"\n",(0,l.jsxs)(n.li,{children:["Open the ",(0,l.jsx)(n.code,{children:".vpk"})," file you want to extract (most multiplayer weapons\r\nare in ",(0,l.jsx)(n.code,{children:"client_mp_common.bsp.pak000_000.vpk"})," since you most likely\r\nwant one of those)."]}),"\n",(0,l.jsxs)(n.li,{children:["You will now see a list of all files in the ",(0,l.jsx)(n.code,{children:".vpk"})," file on the left\r\nside looking something like this:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"RootDir\r\n\u251c\u2500\u2500 materials\r\n\u251c\u2500\u2500 resource\r\n\u251c\u2500\u2500 cfg\r\n\u251c\u2500\u2500 scripts\r\n\u251c\u2500\u2500 models\r\n\u251c\u2500\u2500 maps\r\n\u2514\u2500\u2500 depot\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Navigate to the ",(0,l.jsx)(n.code,{children:"models"})," folder (this is where all models in this\r\nfile are located)."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Navigate to the folder of the model you want to extract (for example\r\n",(0,l.jsx)(n.code,{children:"weapons/vinson"})," which is the internal name for the Flatline)."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Select the ",(0,l.jsx)(n.code,{children:".mdl"})," file you want to extract (for example\r\n",(0,l.jsx)(n.code,{children:"ptpov_vinson.mdl"}),")."]}),"\n",(0,l.jsxs)(n.admonition,{type:"note",children:[(0,l.jsx)(n.div,{children:(0,l.jsx)(n.p,{children:"Note"})}),(0,l.jsxs)(n.p,{children:["Weapons are mostly split into two models, one for the first person\r\nview(",(0,l.jsx)(n.code,{children:"ptpov_"})," and the world model ",(0,l.jsx)(n.code,{children:"w_"}),"."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ptpov"})," is used when you are in first person."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"w_"})," is used when the weapon is viewed in the world (for example\r\nwhen its dropped on the ground)."]})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Click on the ",(0,l.jsx)(n.code,{children:"Unpack"})," button on the top right."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["You are now prompted to select a folder to extract the model to,\r\nselect a folder of your choice and click on ",(0,l.jsx)(n.code,{children:"Select Folder"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Your model is now extracted and you can close Harmony VPK."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"step-2-decompiling-the-model",children:"Step 2: Decompiling the model"}),"\n",(0,l.jsxs)(n.admonition,{type:"note",children:[(0,l.jsx)(n.div,{children:(0,l.jsx)(n.p,{children:"Note"})}),(0,l.jsx)(n.p,{children:"In order to use Crowbar the way we will we need to setup a few things\r\nfirst."}),(0,l.jsx)(n.p,{children:"This step only needs to be done once"})]}),"\n",(0,l.jsx)(n.p,{children:"Setup Crowbar (one time only) ~~~~~~~~~~~~~"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Uppon first launch select the ",(0,l.jsx)(n.code,{children:"Set Up Games"})," tab on the top left."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Select either ",(0,l.jsx)(n.code,{children:"Portal 2"})," or ",(0,l.jsx)(n.code,{children:"Source Filmmaker"})," in the dropdown menu\r\non the top."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Make sure your Library Path is set to the location of the Steam\r\nlibrary you have the game installed in on the bottom."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"Game Setup"})," section should now be filled with the correct\r\npaths."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Select the ",(0,l.jsx)(n.code,{children:"Decompile"})," tab on the top."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"In this tab make sure the following settings are set:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MDL input"}),": ",(0,l.jsx)(n.code,{children:"File"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["- ",(0,l.jsx)(n.code,{children:"Output to"}),": ",(0,l.jsx)(n.code,{children:"Subfolder (of MDL input)"})," (change the text in the\r\nbox to the right of that to ",(0,l.jsx)(n.code,{children:"decompiled"}),") Check the following boxes:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"QC file"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Each $texturegroup skin-familiy on single line"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Include $definebones lines (typical for view models)"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Use MixedCase for keywords"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Reference mesh SMD file"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Physics mesh SMD file"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Vertex animation VTA file (flexes)"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Procedural bones VRD file"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Bone animation SMD files"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:'Place in "anims" subfolder'})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Prefix mesh file names with model name"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Select the ",(0,l.jsx)(n.code,{children:"Compile"})," tab on the top."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"In this tab make sure the following settings are set:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"QC input"}),": ",(0,l.jsx)(n.code,{children:"File"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["- ",(0,l.jsx)(n.code,{children:"Output to"}),": ",(0,l.jsx)(n.code,{children:"Subfolder (of QC input)"})," (change the text in the\r\nbox to the right of that to ",(0,l.jsx)(n.code,{children:"compiled"}),") Check the following boxes:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"No P4"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"Verbose"})}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Set ",(0,l.jsx)(n.code,{children:"Game that has the model compiler"})," to the game you selected in\r\nthe ",(0,l.jsx)(n.code,{children:"Set Up Games"})," tab on the top left."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"This concludes the setup for crowbar these settings will be saved\r\nand you will not need to do this again."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"decompiling-the-model",children:"Decompiling the model"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Click on the ",(0,l.jsx)(n.code,{children:"Browse"})," button on the top right."]}),"\n",(0,l.jsx)(n.li,{children:"Navigate to the folder you extracted the model to in the previous\r\nstep."}),"\n",(0,l.jsxs)(n.li,{children:["Select the ",(0,l.jsx)(n.code,{children:".mdl"})," file you want to decompile (for example\r\n",(0,l.jsx)(n.code,{children:"ptpov_vinson.mdl"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:["Press the ",(0,l.jsx)(n.code,{children:"Decompile"})," button."]}),"\n",(0,l.jsxs)(n.li,{children:["Crowbar now decompiles the model and outputs the files to the\r\n",(0,l.jsx)(n.code,{children:"decompiled"})," folder in the same folder as the ",(0,l.jsx)(n.code,{children:".mdl"})," file."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"step-3-importing-to-blender",children:"Step 3: Importing to Blender"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Open Blender."}),"\n",(0,l.jsxs)(n.li,{children:["In the top left corner select ",(0,l.jsx)(n.code,{children:"File"})," -> ",(0,l.jsx)(n.code,{children:"Import"})," ->\r\n",(0,l.jsx)(n.code,{children:"Source Engine"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Navigate to the folder you extracted the model to in the previous\r\nstep and select the ",(0,l.jsx)(n.code,{children:".qc"})," file (for example ",(0,l.jsx)(n.code,{children:"ptpov_vinson.qc"}),") and\r\nuncheck the ",(0,l.jsx)(n.code,{children:"Import Animations"})," box and check the\r\n",(0,l.jsx)(n.code,{children:"Create Collections"})," box."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"step-4-editing-the-model",children:"Step 4: Editing the model"}),"\n",(0,l.jsxs)(n.admonition,{type:"note",children:[(0,l.jsx)(n.div,{children:(0,l.jsx)(n.p,{children:"Note"})}),(0,l.jsx)(n.p,{children:"This step is entirely up to you and depends on what you want to do with\r\nthe model. In this example we will add a cube to the side of the\r\nFlatline and assign a custom material to it."})]}),"\n",(0,l.jsxs)(n.p,{children:["Before editing let me explain how the model is structured in Blender. By\r\nselecting a qc file in the import menu we told Blender to import all SMD\r\nfiles referenced in that qc file. This means that the model is split\r\ninto multiple collections based on the SMD files referenced in the qc\r\nfile. For example the ",(0,l.jsx)(n.code,{children:"ptpov_vinson.qc"})," file references the\r\n",(0,l.jsx)(n.code,{children:"ptpov_vinson_v_vinson.smd"})," file which contains the model for the\r\nFlatline. For now the smd file will be imported into blender when you\r\nimport the qc file, later we will change this to be an dmx file instead."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Select the ",(0,l.jsx)(n.code,{children:"ptpov_vinson_v_vinson.smd"})," mesh in the outliner."]}),"\n",(0,l.jsxs)(n.li,{children:["Enter ",(0,l.jsx)(n.code,{children:"EDIT Mode"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["In ",(0,l.jsx)(n.code,{children:"EDIT Mode"})," add a cube to the side of the Flatline."]}),"\n",(0,l.jsxs)(n.li,{children:["Exit ",(0,l.jsx)(n.code,{children:"EDIT Mode"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["This cube should now be part of the ",(0,l.jsx)(n.code,{children:"ptpov_vinson_v_vinson"})," mesh."]}),"\n",(0,l.jsx)(n.li,{children:"Make sure that you now weight paint the cube to the correct bones."}),"\n",(0,l.jsxs)(n.li,{children:[".. note:: On Weapons the most safe bone to weight paint to is\r\n",(0,l.jsx)(n.code,{children:"def_c_base"})," since it is the root bone of the weapon. This means\r\nthat the cube will always move with the weapon. If you want the cube\r\nto move with a specific part of the weapon you can also weight paint\r\nit to the bone that moves that part of the weapon. Again, remember\r\nto somewhat learn how rigging works in Blender to properly\r\nunderstand this process."]}),"\n",(0,l.jsx)(n.li,{children:"Now that we have our cube we want to assign a material to it."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"step-5-assigning-materials",children:"Step 5: Assigning Materials"}),"\n",(0,l.jsxs)(n.p,{children:["This step has two ways of being done, using a ",(0,l.jsx)(n.code,{children:"qc"})," file that references\r\n",(0,l.jsx)(n.code,{children:"smd"})," files or references ",(0,l.jsx)(n.code,{children:"dmx"})," files. Usually the ",(0,l.jsx)(n.code,{children:"smd"})," way is what you\r\nwill want todo when first importing and editing a model, however if you\r\nwant to reimport a EDITED model you will need to use the ",(0,l.jsx)(n.code,{children:"dmx"})," way."]}),"\n",(0,l.jsx)(n.h3,{id:"assigning-materials-smd",children:"Assigning Materials (smd)"}),"\n",(0,l.jsxs)(n.p,{children:["This is the way you will usually do it when first importing a vanilla\r\nmodel that you have not edited yet. - Enter ",(0,l.jsx)(n.code,{children:"EDIT Mode"}),". - Select the\r\ncube. - In the ",(0,l.jsx)(n.code,{children:"Material Properties"})," tab on the right click on the ",(0,l.jsx)(n.code,{children:"New"}),"\r\nbutton. - Set the name of the material to its path in the game files, to\r\nlearn more about materials and how to make them see ",(0,l.jsx)(n.a,{href:"/ns-wiki/docs/guides/tools/rpakmodding",children:"RPak\r\nModding"})," or ",(0,l.jsx)(n.a,{href:"/ns-wiki/docs/guides/tools/VTFModding",children:"VTF\r\nModding"}),". (for example\r\n",(0,l.jsx)(n.code,{children:"models\\weapons_r2\\coolmaterial\\cool_material"}),") - Exit ",(0,l.jsx)(n.code,{children:"EDIT Mode"}),". -\r\nYour cube should now have the material assigned to it ingame after\r\ncompiling."]}),"\n",(0,l.jsx)(n.h3,{id:"assigning-materials-dmx",children:"Assigning Materials (dmx)"}),"\n",(0,l.jsxs)(n.p,{children:["This is the way you will usually do it when reimporting a model that you\r\nhave edited. - Enter ",(0,l.jsx)(n.code,{children:"EDIT Mode"}),". - Select the cube. - In the\r\n",(0,l.jsx)(n.code,{children:"Material Properties"})," tab on the right click on the ",(0,l.jsx)(n.code,{children:"New"})," button. - Set\r\nthe name of the material to its NAME in the game files"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsx)(n.div,{children:(0,l.jsx)(n.p,{children:"Note"})})}),"\n",(0,l.jsxs)(n.p,{children:["with dmx files you can set the material path later on in the export\r\nmenu. If you have multiple needed paths we will talk about that in the\r\nnext step ",(0,l.jsx)(n.a,{href:"#step-5-5-multiple-material-paths-dmx",children:"Multiple Material\r\nPaths"}),". This is why we set the\r\nname of the material to its name in the game files instead of its\r\npath."]}),"\n"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Exit ",(0,l.jsx)(n.code,{children:"EDIT Mode"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Your cube should now have the material assigned to it ingame after\r\ncompiling."}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsx)(n.div,{children:(0,l.jsx)(n.p,{children:"Note"})})}),"\n",(0,l.jsx)(n.p,{children:"To clearify: the material of a mesh or individual faces in the\r\ngame will be associated using the name of the assigned material in\r\nBlender."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"step-55-multiple-material-paths-dmx",children:"Step 5.5: Multiple Material Paths (dmx)"}),"\n",(0,l.jsxs)(n.p,{children:["If you have materials with multiple paths (different folders in the game\r\nfiles) you will want to use the ",(0,l.jsx)(n.code,{children:"$renamematerial"})," command in the qc\r\nfile. Usage:"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"$renamematerial <current material>  <new material>\n"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Example:"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'$renamematerial "models\\weapons_r2\\coolmaterial\\cool_material"  "models\\amazing\\uncoolmaterial\\cool_material2"\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Command docs: ",(0,l.jsx)(n.a,{href:"https://developer.valvesoftware.com/wiki/$renamematerial",children:"VALVe developer docs\r\n$renamematerial"})]}),"\n",(0,l.jsx)(n.h2,{id:"step-6-exporting-from-blender",children:"Step 6: Exporting from Blender"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["In the ",(0,l.jsx)(n.code,{children:"Source Engine Export"})," Menu in the ",(0,l.jsx)(n.code,{children:"Scene Properties"})," select\r\nan ",(0,l.jsx)(n.code,{children:"Export Path"})," usually the same folder as the original qc file."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Set the ",(0,l.jsx)(n.code,{children:"Export Format"})," to ",(0,l.jsx)(n.code,{children:"DMX"}),"."]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsx)(n.div,{children:(0,l.jsx)(n.p,{children:"Note"})})}),"\n",(0,l.jsx)(n.p,{children:'This is important since we want to export the model as a dmx file\r\ninstead of an smd file, this is because of limitation in the smd\r\nformat that we want to avoid. dmx by default will, uppon importing\r\nset a "material path" which is the path to the material in the\r\ngame files, if you reimport this model later on you will need to'}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Press the ",(0,l.jsx)(n.code,{children:"Export"})," button and select ",(0,l.jsx)(n.code,{children:"Scene Export"})," (this will\r\nexport all meshes in the scene to DMX files, you can also\r\nindividually export meshes by selecting them in the outliner and\r\nthen pressing the ",(0,l.jsx)(n.code,{children:"Export"})," button and selecting the mesh in the\r\nExport Menu)."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Your DMX files are now exported and you can close Blender."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"step-7-compiling-the-model",children:"Step 7: Compiling the model"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Open your ",(0,l.jsx)(n.code,{children:".qc"})," file in a text editor of your choice."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:'On the top of the file you will see so called "bodygroup" lines,\r\nthese are used to define the bodygroups of the model. They look a\r\nbit like this:'}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'$bodygroup "body"\r\n{\r\n    studio "ptpov_vinson_v_vinson.smd"\r\n    blank\r\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["For each bodygroup you will want to change the files to be the dmx\r\nfiles you exported in the previous step. (in most cases its gonna be\r\njust renaming all the files to ",(0,l.jsx)(n.code,{children:".dmx"})," instead of ",(0,l.jsx)(n.code,{children:".smd"}),")."]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsx)(n.div,{children:(0,l.jsx)(n.p,{children:"Note"})})}),"\n",(0,l.jsx)(n.p,{children:"If you have multiple bodygroups you will need to do this for each\r\nbodygroup, if you have multiple meshes in a bodygroup you will\r\nneed to do this for each mesh in the bodygroup. We do this so\r\nCrowbar uses the dmx files instead of the smd files when compiling\r\nthe model."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Open Crowbar."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Select the ",(0,l.jsx)(n.code,{children:"Compile"})," tab on the top."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Click on the ",(0,l.jsx)(n.code,{children:"Browse"})," button on the top right."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Select the ",(0,l.jsx)(n.code,{children:".qc"})," file you want to compile (for example\r\n",(0,l.jsx)(n.code,{children:"ptpov_vinson.qc"}),")."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Choose your game from the dropdown labeled\r\n",(0,l.jsx)(n.code,{children:"Games that has the model compiler"})," (for example ",(0,l.jsx)(n.code,{children:"Portal 2"}),")"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Press the ",(0,l.jsx)(n.code,{children:"Compile"})," button."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Crowbar now compiles the model and outputs the files to the\r\n",(0,l.jsx)(n.code,{children:"compiled"})," folder in the same folder as the ",(0,l.jsx)(n.code,{children:".qc"})," file, inside the\r\n",(0,l.jsx)(n.code,{children:"compiled"})," folder you will find the full folder path of the model\r\n(for example ",(0,l.jsx)(n.code,{children:"models\\weapons\\vinson\\"}),")."]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsx)(n.div,{children:(0,l.jsx)(n.p,{children:"Note"})})}),"\n",(0,l.jsx)(n.p,{children:"Usually the error is self explainatory and you can fix it by\r\nyourself. By default Crowbar will not output a compiled file if\r\nany errors occur during the compilation process."}),"\n",(0,l.jsxs)(n.p,{children:["If you have Visual Studio Code installed you can also use the\r\n",(0,l.jsx)(n.code,{children:"Valve KeyValue Files Support"})," extension to have a better overview\r\nof the qc file, extension id: ",(0,l.jsx)(n.code,{children:"GEEKiDoS.vdf"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"step-8-combining-model-files",children:"Step 8: Combining model files"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Open MDLShit."}),"\n",(0,l.jsxs)(n.li,{children:["In a file explorer navigate to the compiled folder of your model\r\n(for example ",(0,l.jsx)(n.code,{children:"compiled\\models\\weapons\\vinson\\"}),")."]}),"\n",(0,l.jsxs)(n.li,{children:["In this folder you will find the ",(0,l.jsx)(n.code,{children:".mdl"})," file and multiple other\r\nfiles, in our case there will be 3 files ",(0,l.jsx)(n.code,{children:".mdl"}),", ",(0,l.jsx)(n.code,{children:".vvd"})," and ",(0,l.jsx)(n.code,{children:".vtx"}),")\r\nall with the same name."]}),"\n",(0,l.jsx)(n.li,{children:"In MDLShit drag these into their respective boxes."}),"\n",(0,l.jsx)(n.li,{children:"Make sure they are checked and the boxes you dont have files for are\r\nunchecked."}),"\n",(0,l.jsxs)(n.li,{children:["Press the ",(0,l.jsx)(n.code,{children:"Check"})," button."]}),"\n",(0,l.jsxs)(n.li,{children:["Press the ",(0,l.jsx)(n.code,{children:"Convert"})," button."]}),"\n",(0,l.jsxs)(n.li,{children:["MDLShit will now combine the files into a single ",(0,l.jsx)(n.code,{children:"_conv.mdl"})," file,\r\nthis is our final exported and working model you can now close\r\nMDLShit and use that model in a mod."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"common-errors",children:"Common errors"}),"\n",(0,l.jsxs)(n.p,{children:["In this list the word ",(0,l.jsx)(n.code,{children:"<filename>"})," will be used to refer to the name of\r\nthe file that is causing the error and X will refer to a number\r\ndepending on your file, ",(0,l.jsx)(n.code,{children:"line"})," will refer to the line in the qc file\r\nthat is causing the error. The following words correspond to the\r\nfollowing:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<filename>"}),": The name of the file that is causing the error."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"<line>"}),": The line in the qc file that is causing the error."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"modelpath.qc(<line>): - could not load file '<<filename>.smd'"}),":"]}),"\n",(0,l.jsx)(n.p,{children:":   This error means that the qc file is trying to reference a file that\r\ndoes not exist, make sure that the file is in the same folder as the\r\nqc file and that the name of the file is correct. If the above\r\nsolution does not work think about if you need said file actually,\r\nif not you can remove it from the qc file. Or if you need it you can\r\ncreate it yourself. You can also see if a Physics or LOD file is the\r\nmissing file, if it is make sure you have the correct settings in\r\nCrowbar for the file to be generated."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:'Crowbar ERROR: The model compiler, "<filename>", does not exist.'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:'Crowbar ERROR: The game\'s "<filename>" file does not exist.'})}),"\n",(0,l.jsxs)(n.p,{children:[":   Mostly happens if you did not properly set up Crowbar, make sure you\r\nset the ",(0,l.jsx)(n.code,{children:"Game that has the model compiler"})," to ",(0,l.jsx)(n.a,{href:"https://r2northstar.readthedocs.io/en/latest/guides/tools/MDLModding.html#prequisites",children:"your prerequisite\r\ngame"}),"."]})]})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var l=i(6540);const o={},t=l.createContext(o);function s(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);