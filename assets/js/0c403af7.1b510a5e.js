"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[3797],{5680:(e,t,n)=>{n.d(t,{xA:()=>y,yg:()=>b});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},y=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,y=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,b=u["".concat(o,".").concat(d)]||u[d]||c[d]||i;return n?r.createElement(b,l(l({ref:t},y),{},{components:n})):r.createElement(b,l({ref:t},y))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9709:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var r=n(8168),a=(n(6540),n(5680));const i={},l="Tables",s={unversionedId:"squirrel/types/tables",id:"squirrel/types/tables",isDocsHomePage:!1,title:"Tables",description:"Like arrays, tables are dynamically sized data structures that can have",source:"@site/docs/squirrel/types/tables.md",sourceDirName:"squirrel/types",slug:"/squirrel/types/tables",permalink:"/ns-wiki/docs/squirrel/types/tables",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/types/tables.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Structs",permalink:"/ns-wiki/docs/squirrel/types/structs"},next:{title:"Typedefs",permalink:"/ns-wiki/docs/squirrel/types/typedefs"}},o=[{value:"Literals",id:"literals",children:[]},{value:"Primitive Tables",id:"primitive-tables",children:[]},{value:"Complex Tables",id:"complex-tables",children:[]}],p={toc:o},y="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(y,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"tables"},"Tables"),(0,a.yg)("p",null,"Like arrays, tables are dynamically sized data structures that can have\nentries added or removed at runtime."),(0,a.yg)("p",null,"In other languages tables might be called Hashmaps, Maps or Objects."),(0,a.yg)("p",null,"Entries are added with a key that can subsequently be used to read that\nobject from the table back."),(0,a.yg)("p",null,"The type keyword is ",(0,a.yg)("inlineCode",{parentName:"p"},"table"),"."),(0,a.yg)("p",null,"To index an array with a string you can write ",(0,a.yg)("inlineCode",{parentName:"p"},"t.index"),", or with an\nexpression just like in arrays with ",(0,a.yg)("inlineCode",{parentName:"p"},'t.["index"]'),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'table t = { val = "value" }\nstring v = t.val\nstring v2 = t["val"]\n')),(0,a.yg)("h2",{id:"literals"},"Literals"),(0,a.yg)("p",null,"Table literals are comma or newline seperated expressions that are\ndelimited by ",(0,a.yg)("inlineCode",{parentName:"p"},"{")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"}"),"."),(0,a.yg)("p",null,"Each entry needs to have a key, seperated from the initial value with a\n",(0,a.yg)("inlineCode",{parentName:"p"},"="),"."),(0,a.yg)("p",null,"Table keys will be by default strings if you just write their identifier\nin the literal. However they can also be any expression if wrapped with\n",(0,a.yg)("inlineCode",{parentName:"p"},"[")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"]"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'table t = { key1 = 1, key2 = "2" }\ntable t2 = {\n randomValue = getSomethingRandom()\n [1] = 0x1\n}\n\nprintt( t["key1"], t2[1] ) // 1 1\n')),(0,a.yg)("h2",{id:"primitive-tables"},"Primitive Tables"),(0,a.yg)("p",null,"Like arrays primitive tables can hold any type, both as values and keys."),(0,a.yg)("p",null,"Any value of key of the table will therefore be ",(0,a.yg)("inlineCode",{parentName:"p"},"var")," if retrieved."),(0,a.yg)("h2",{id:"complex-tables"},"Complex Tables"),(0,a.yg)("p",null,"Complex tables are tables that have their content types defined. It is\nnecessary to both define the key and value types."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"table<string, int> numbers = {\n one = 1,\n two = 2,\n three = 3,\n four = 4,\n five = 5,\n six = 6,\n seven = 7,\n eight = 8,\n nine = 9\n}\n")))}u.isMDXComponent=!0}}]);