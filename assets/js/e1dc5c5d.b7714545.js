"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[7129],{8360:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=r(4848),t=r(8453);const o={},a="Introduction",s={id:"squirrel/intro",title:"Introduction",description:"Squirrel is a high level imperative,",source:"@site/docs/squirrel/intro.md",sourceDirName:"squirrel",slug:"/squirrel/intro",permalink:"/ns-wiki/docs/squirrel/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Functions & Closures",permalink:"/ns-wiki/docs/squirrel/functions"},next:{title:"networking",permalink:"/ns-wiki/docs/squirrel/networking"}},c={},l=[];function d(n){const e={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"http://squirrel-lang.org/",children:"Squirrel"})," is a high level imperative,\r\nobject-oriented programming language used in Titanfall to script large\r\namounts of content in the game."]}),"\n",(0,i.jsx)(e.p,{children:"Respawn modified large parts of the language to fit their needs, for\r\nexample adding a static type compiler to the language."}),"\n",(0,i.jsx)(e.p,{children:"Squirrel still allows you to write dynamically typed code but this is\r\ndiscouraged if possible."}),"\n",(0,i.jsx)(e.p,{children:"The syntax of squirrel is very similar to C++ or Javascript and very\r\neasy to learn."}),"\n",(0,i.jsx)(e.p,{children:"The programmer doesn't need to think about memory management in scripts\r\nsince all objects are refcounted and the garbage collector can be\r\ninvoked manually."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"int function fibonacci( int n )\r\n{\r\n if ( n < 2 )\r\n   return n\r\n\r\n return fibonacci( n - 1 ) + fibonacci( n - 2 )\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"The language provides easy interfaces for coroutines and asynchronous\r\ncode."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"void main()\r\n{\r\n thread timer( 1.0, timercallback ) \r\n}\r\n\r\nvoid function timercallback( int iteration )\r\n{\r\n print( iteration ) \r\n}\r\n\r\n// call the callback function every n seconds\r\nvoid function timer( float n, void functionref( int ) callback )\r\n{\r\n int iterations\r\n while ( true )\r\n {\r\n   wait n\r\n   iterations += 1\r\n   callback( iterations )\r\n }\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"Signals and Flags allow you to control code execution based on events\r\nthat happen elsewhere in the code or in the ingame world."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'void main()\r\n{\r\n AddCallback_OnPlayerRespawned( OnPlayerRespawned )\r\n}\r\n\r\nvoid function OnPlayerRespawned( entity player )\r\n{\r\n thread CountPlayerTimeAlive( Time() ) // execute this function as threaded so we can use Signals in there\r\n}\r\n\r\nvoid function CountPlayerTimeAlive( entity player, float time )\r\n{\r\n player.WaitSignal( "OnDestroy" ) // wait until the player dies or disconnects\r\n print( Time() - time ) // print how long the player was alive\r\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>s});var i=r(6540);const t={},o=i.createContext(t);function a(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);