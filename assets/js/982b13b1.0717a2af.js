"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[1567],{5680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>m});var n=t(6540);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=n.createContext({}),s=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(p.Provider,{value:r},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(t),g=i,m=u["".concat(p,".").concat(g)]||u[g]||y[g]||a;return t?n.createElement(m,l(l({ref:r},c),{},{components:t})):n.createElement(m,l({ref:r},c))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=g;var o={};for(var p in r)hasOwnProperty.call(r,p)&&(o[p]=r[p]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3679:(e,r,t)=>{t.r(r),t.d(r,{contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var n=t(8168),i=(t(6540),t(5680));const a={},l="Integers",o={unversionedId:"source/squirrel/types/integers",id:"source/squirrel/types/integers",isDocsHomePage:!1,title:"Integers",description:"Integers in Squirrel are 32 bit signed integers and can be any whole",source:"@site/docs/source/squirrel/types/integers.md",sourceDirName:"source/squirrel/types",slug:"/source/squirrel/types/integers",permalink:"/ns-wiki/docs/source/squirrel/types/integers",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/source/squirrel/types/integers.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Typing",permalink:"/ns-wiki/docs/source/squirrel/types/index"},next:{title:"ornull",permalink:"/ns-wiki/docs/source/squirrel/types/ornull"}},p=[{value:"Literals",id:"literals",children:[]}],s={toc:p},c="wrapper";function u(e){let{components:r,...t}=e;return(0,i.yg)(c,(0,n.A)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"integers"},"Integers"),(0,i.yg)("p",null,"Integers in Squirrel are 32 bit signed integers and can be any whole\nnumber (in the 32 bit confines)."),(0,i.yg)("p",null,"An Integer is a primitive type with a default value of ",(0,i.yg)("inlineCode",{parentName:"p"},"0"),"."),(0,i.yg)("p",null,"The type keyword for Integers is ",(0,i.yg)("inlineCode",{parentName:"p"},"int"),"."),(0,i.yg)("h2",{id:"literals"},"Literals"),(0,i.yg)("p",null,"Integers can be represented with multiple different literals."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Decimal"),(0,i.yg)("p",{parentName:"li"},"Regular decimal letters will always be an integer decimal literal.\n.. code-block:"),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre"},"int n = 123\n"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Hexadecimal"),(0,i.yg)("p",{parentName:"li"},"If any number is prefixed with ",(0,i.yg)("inlineCode",{parentName:"p"},"0x"),", it is a hexadecimal literal."),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre"},"int n = 0x0012 // 18\n"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Octal"),(0,i.yg)("p",{parentName:"li"},"Numbers starting with a ",(0,i.yg)("inlineCode",{parentName:"p"},"0")," are octal literals."),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre"},"int n = 075 // 61\n"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Chars"),(0,i.yg)("p",{parentName:"li"},"A single letter or escaped sequence are character literals. Their\nvalue is the ASCII value of the letter."),(0,i.yg)("pre",{parentName:"li"},(0,i.yg)("code",{parentName:"pre"},"int a = 'a' // 97\nint newline = '\\n' // 10\n")))))}u.isMDXComponent=!0}}]);