"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[6985],{6656:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var t=r(4848),i=r(8453);const a={},s="Functions & Closures",o={id:"squirrel/functions",title:"Functions & Closures",description:"Functions are an integral part of any programming language. They allow",source:"@site/docs/squirrel/functions.md",sourceDirName:"squirrel",slug:"/squirrel/functions",permalink:"/ns-wiki/docs/squirrel/functions",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/functions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Stack",permalink:"/ns-wiki/docs/squirrel/cpp_api/stack"},next:{title:"Introduction",permalink:"/ns-wiki/docs/squirrel/intro"}},c={},l=[{value:"Declaring Functions",id:"declaring-functions",level:2},{value:"Returning Data",id:"returning-data",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Optional parameters",id:"optional-parameters",level:2},{value:"vargs",id:"vargs",level:2},{value:"Closures",id:"closures",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"functions--closures",children:"Functions & Closures"})}),"\n",(0,t.jsx)(n.p,{children:"Functions are an integral part of any programming language. They allow\r\nto repeat blocks of code whenever and however often is needed."}),"\n",(0,t.jsx)(n.h2,{id:"declaring-functions",children:"Declaring Functions"}),"\n",(0,t.jsxs)(n.p,{children:["Functions in squirrel are defined with this syntax:\r\n",(0,t.jsx)(n.code,{children:"<return type> function <name>(<parameters>) <body>"})]}),"\n",(0,t.jsxs)(n.p,{children:["For example, a simple function that returns either ",(0,t.jsx)(n.code,{children:"true"})," or ",(0,t.jsx)(n.code,{children:"false"}),"\r\nwould look like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"bool function CoinFlip()\r\n{\r\n  return RandomInt( 2 ) == 0 // generate a random number from 0 - 1\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:'It is not possible to have multiple functions that share the same name\r\n(often called "overriding" functions). Every function needs to have an\r\nunique name from any global or local variable or function.'}),"\n",(0,t.jsx)(n.h2,{id:"returning-data",children:"Returning Data"}),"\n",(0,t.jsx)(n.p,{children:"If you need some data after a function is finished (for example after a\r\ncalculation), you need to return that data."}),"\n",(0,t.jsx)(n.p,{children:"You can return anything, however the type of the returned variable needs\r\nto match with the return type of the function."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'string function GetNorthstarName()\r\n{\r\n return "Northstar" // this would be valid\r\n return 1 // this would be invalid because the function needs to return a string\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Keep in mind that no code after a return statement will get executed."}),"\n",(0,t.jsxs)(n.p,{children:["If you don't want to return any value, use ",(0,t.jsx)(n.code,{children:"void"})," as the return type."]}),"\n",(0,t.jsxs)(n.p,{children:["This indicates that your function returns ",(0,t.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If nothing is returned by a function, ",(0,t.jsx)(n.code,{children:"null"})," will get returned\r\nimplicitly."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"void function ReturnNull()\r\n{\r\n  // return null regardless what happens, this all does the same\r\n  switch( RandomInt( 3 ) )\r\n  {\r\n    case 0:\r\n      return\r\n    case 1:\r\n      return null\r\n  }\r\n\r\n  // only if a 2 was rolled, code here will be executed before the other paths already returned.\r\n  // because a return statement is lacking, null is getting returned implicitly.\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"untyped"})," files you may leave out the return type. In those cases the\r\nreturn type will default to ",(0,t.jsx)(n.code,{children:"var"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(n.p,{children:"Parameters are the input a function gets when called. They are local\r\nvariables whose values come from the calling function."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"void function main()\r\n{\r\n int refcount = 0\r\n refcount = IncreaseRefcount( refcount )\r\n Assert( refcount == 1 )\r\n}\r\n\r\nint function IncreaseRefcount( int n )\r\n{\r\n return n + 1\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"optional-parameters",children:"Optional parameters"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes you need parameters that are optional for a function, like\r\nextra options. If a parameter name is followed by ",(0,t.jsx)(n.code,{children:"= <default-value>"}),",\r\nthat parameter is not required to call the function."]}),"\n",(0,t.jsx)(n.p,{children:"Optional parameters need to be the last parameters of a function."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"void function main()\r\n{\r\n array a = [ 1, 2, 3, 4 ]\r\n PopN( a )\r\n PopN( a, 2 )\r\n\r\n Assert( a.len() == 1 )\r\n}\r\n\r\nvoid function PopN( array arr, int n = 1 )\r\n{\r\n for ( int i; i < n; i++ )\r\n {\r\n   arr.pop()\r\n }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"vargs",children:"vargs"}),"\n",(0,t.jsxs)(n.p,{children:["With vargs you can pass a function an unlimited amount of parameters.\r\nThe parameters will be inside a pseudo array called ",(0,t.jsx)(n.code,{children:"vargv"}),". The length\r\nof the vargs the function receives will be stored inside a variable\r\ncalled ",(0,t.jsx)(n.code,{children:"vargc"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["You can denote a function to have vargs with adding ",(0,t.jsx)(n.code,{children:"..."})," to the end of\r\nthe parameter list."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"string function CombineStuff( string base, ... )\r\n{\r\n string s = base\r\n for ( int i; i < argc; i++ )\r\n {\r\n   base += vargv[i].tostring()\r\n }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"closures",children:"Closures"}),"\n",(0,t.jsx)(n.p,{children:"Closures are functions that are anonymous (unnamed) functions created in\r\na specific script context that can use variables from the parent scope."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'void function main()\r\n{\r\n void functionref() fn = void function(){ print( "I\'m a closure" ) } // create a closure\r\n fn() // call the closure\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Closures can capture variables from their parent scope."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'void function PlayFXOnEntity( entity ent )\r\n{\r\n   int fxHandle = StartParticleEffectOnEntity( ent, PILOT_THROWN_TICK_WARNING, FX_ATTACH_POINT_FOLLOW, ent.LookupAttachment( "head_base" )\r\n   OnThreadEnd( void function() : ( fxHandle ){ EffectStop( fxHandle, false, true ) } ) // create a function to stop the fx effect and give it the fx handle it needs\r\n   ent.EndSignal( "OnDestroy" ) // stop the thread when the entity dies\r\n   WaitForever()\r\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(6540);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);