"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[8406],{1184:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var r=t(4848),s=t(8453);const a={},i="Arrays",l={id:"squirrel/cpp_api/objectmanipulation",title:"objectmanipulation",description:"Creating / Manipulating Objects \\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\--",source:"@site/docs/squirrel/cpp_api/objectmanipulation.md",sourceDirName:"squirrel/cpp_api",slug:"/squirrel/cpp_api/objectmanipulation",permalink:"/ns-wiki/docs/squirrel/cpp_api/objectmanipulation",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/cpp_api/objectmanipulation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"objecthandling",permalink:"/ns-wiki/docs/squirrel/cpp_api/objecthandling"},next:{title:"Squirrel Functions",permalink:"/ns-wiki/docs/squirrel/cpp_api/sq_functions"}},c={},o=[];function h(e){const n={admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Creating / Manipulating Objects --------------------"}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"arrays",children:"Arrays"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,r.jsx)(n.p,{children:":   the target vm"}),"\n",(0,r.jsx)(n.p,{children:"param SQInteger size"}),"\n",(0,r.jsx)(n.p,{children:":   initial size of the array"}),"\n",(0,r.jsx)(n.p,{children:"returns"}),"\n",(0,r.jsxs)(n.p,{children:[":   a ",(0,r.jsx)(n.code,{children:"SQRESULT"})]}),"\n",(0,r.jsx)(n.p,{children:"creates a new array and pushes it to the stack"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'newarray(sqvm, 0);\r\npushstring(sqvm, "val1");\r\narrayappend(sqvm, -2);\r\npushinteger(sqvm, 15);\r\narrayappend(sqvm, -2);\r\n\r\n/*\r\n    The array on the stack now looks like this:\r\n    [ "val1", 15 ]\r\n*/\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,r.jsx)(n.p,{children:":   the target vm"}),"\n",(0,r.jsx)(n.p,{children:"param SQInteger stackpos"}),"\n",(0,r.jsx)(n.p,{children:":   stack position of the array to append to"}),"\n",(0,r.jsx)(n.p,{children:"returns"}),"\n",(0,r.jsxs)(n.p,{children:[":   a ",(0,r.jsx)(n.code,{children:"SQRESULT"})]}),"\n",(0,r.jsx)(n.p,{children:"pops a value from the stack and pushes it to the back of the array at\r\nthe position idx in the stack"}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"tables",children:"Tables"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,r.jsx)(n.p,{children:":   the target vm"}),"\n",(0,r.jsx)(n.p,{children:"returns"}),"\n",(0,r.jsxs)(n.p,{children:[":   a ",(0,r.jsx)(n.code,{children:"SQRESULT"})]}),"\n",(0,r.jsx)(n.p,{children:"creates a new table and pushes it onto the stack."}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,r.jsx)(n.p,{children:":   the target vm"}),"\n",(0,r.jsx)(n.p,{children:"param SQInteger stackpos"}),"\n",(0,r.jsx)(n.p,{children:":   the index of the table to insert into"}),"\n",(0,r.jsx)(n.p,{children:"param SQBool bstatic"}),"\n",(0,r.jsxs)(n.p,{children:[":   if ",(0,r.jsx)(n.code,{children:"SQTrue"})," creates a static member. This parameter is only used\r\nif the target object is a class."]}),"\n",(0,r.jsx)(n.p,{children:"pops a key and a value from the stack and performs a set operation on\r\nthe table or class that is at position idx in the stack, if the slot\r\ndoes not exist it will be created."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'newtable(sqvm);\r\n// slot 1\r\npushstring(sqvm, "key");\r\npushstring(sqvm, "value");\r\nnewslot(sqvm, -3);\r\n// slot 2\r\npushstring(sqvm, "key2");\r\npushasset(sqvm, "value2");\r\nnewslot(sqvm, -3);\r\n// slot 3\r\npushstring(sqvm, "key3");\r\nnewtable(sqvm);\r\npushstring(sqvm, "sub");\r\npushinteger(sqvm, 13);\r\nnewslot(sqvm, -3);\r\nnewslot(sqvm, -3);\r\n\r\n/*\r\n    The table on the stack now looks like this:\r\n    {\r\n        key = "value"\r\n        key2 = $"value2"\r\n        key3 = { sub = 13 }\r\n    }\r\n*/\n'})}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"structs",children:"Structs"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"These functions aren't available for plugins yet."})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,r.jsx)(n.p,{children:":   The target vm"}),"\n",(0,r.jsx)(n.p,{children:"param int fieldCount"}),"\n",(0,r.jsx)(n.p,{children:":   total number of fields the struct contains"}),"\n",(0,r.jsxs)(n.p,{children:["Creates and pushes a struct instance with ",(0,r.jsx)(n.code,{children:"fieldCount"})," to the stack."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,r.jsx)(n.p,{children:":   The target vm"}),"\n",(0,r.jsx)(n.p,{children:"param int fieldIndex"}),"\n",(0,r.jsx)(n.p,{children:":   Index of the field to fill"}),"\n",(0,r.jsxs)(n.p,{children:["Pops a value from the stack and fills the field at ",(0,r.jsx)(n.code,{children:"fieldIndex"})," from\r\nthe struct object that needs to be at the top of the stack."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'pushnewstructinstance(sqvm, 2); // create a struct instance with 2 slots\r\npushinteger(sqvm, 12);\r\nsealstructslot(sqvm, 0);\r\npushstring(sqvm, "example", -1);\r\nsealstructslot(sqvm, 1);\r\n\r\n/*\r\n    Assuming the compiler expects this slot:\r\n    struct ExStruct { int i, string s }\r\n    , the struct on the stack looks like this\r\n\r\n    ExStruct {\r\n        i = 12,\r\n        s = "example"\r\n    }\r\n*/\n'})}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"userdata",children:"Userdata"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,r.jsx)(n.p,{children:":   The target vm"}),"\n",(0,r.jsx)(n.p,{children:"param SQInteger size"}),"\n",(0,r.jsx)(n.p,{children:":   bit size of the userdata object"}),"\n",(0,r.jsx)(n.p,{children:"When the function sq_newuserdata is called, Squirrel allocates a new\r\nuserdata with the specified size, returns a pointer to his payload\r\nbuffer and push the object in the stack; at this point the application\r\ncan do whatever it want with this memory chunk, the VM will\r\nautomatically take care of the memory deallocation like for every\r\nother built-in type. A userdata can be passed to a function or stored\r\nin a table slot. By default Squirrel cannot manipulate directly\r\nuserdata; however is possible to assign a delegate to it and define a\r\nbehavior like it would be a table. Because the application would want\r\nto do something with the data stored in a userdata object when it get\r\ndeleted, is possible to assign a callback that will be called by the\r\nVM just before deleting a certain userdata. This is done through the\r\nAPI call sq_setreleasehook."}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,r.jsx)(n.p,{children:":   The target vm"}),"\n",(0,r.jsx)(n.p,{children:"param SQInteger stackpos"}),"\n",(0,r.jsx)(n.p,{children:":   Stack position of the userdata"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,r.jsx)(n.p,{children:":   The target vm"}),"\n",(0,r.jsx)(n.p,{children:"param SQInteger stackpos"}),"\n",(0,r.jsx)(n.p,{children:":   Stack position of the userdata"}),"\n",(0,r.jsx)(n.p,{children:"param T* data"}),"\n",(0,r.jsx)(n.p,{children:":   Pointer to an arbitrary variable the userdata gets mapped to"}),"\n",(0,r.jsx)(n.p,{children:"param uint64_t* typeid"}),"\n",(0,r.jsx)(n.p,{children:":   Pointer to a variable edited to hold the userdata type"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);