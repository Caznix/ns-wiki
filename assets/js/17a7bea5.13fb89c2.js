"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[8406],{5680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>y});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),i=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=i(a),g=r,y=c["".concat(s,".").concat(g)]||c[g]||m[g]||o;return a?n.createElement(y,p(p({ref:t},u),{},{components:a})):n.createElement(y,p({ref:t},u))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,p=new Array(o);p[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,p[1]=l;for(var i=2;i<o;i++)p[i]=a[i];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},3887:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=a(8168),r=(a(6540),a(5680));const o={},p=void 0,l={unversionedId:"squirrel/cpp_api/objectmanipulation",id:"squirrel/cpp_api/objectmanipulation",isDocsHomePage:!1,title:"objectmanipulation",description:"Creating / Manipulating Objects \\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\--",source:"@site/docs/squirrel/cpp_api/objectmanipulation.md",sourceDirName:"squirrel/cpp_api",slug:"/squirrel/cpp_api/objectmanipulation",permalink:"/ns-wiki/docs/squirrel/cpp_api/objectmanipulation",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/cpp_api/objectmanipulation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"objecthandling",permalink:"/ns-wiki/docs/squirrel/cpp_api/objecthandling"},next:{title:"Squirrel Functions",permalink:"/ns-wiki/docs/squirrel/cpp_api/sq_functions"}},s=[],i={toc:s},u="wrapper";function c(e){let{components:t,...a}=e;return(0,r.yg)(u,(0,n.A)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Creating / Manipulating Objects ","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),(0,r.yg)("h1",{id:"arrays"},"Arrays"),(0,r.yg)("p",null,"::: {#newarray}\n:::"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,r.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,r.yg)("p",{parentName:"blockquote"},"param SQInteger size"),(0,r.yg)("p",{parentName:"blockquote"},":   initial size of the array"),(0,r.yg)("p",{parentName:"blockquote"},"returns"),(0,r.yg)("p",{parentName:"blockquote"},":   a ",(0,r.yg)("inlineCode",{parentName:"p"},"SQRESULT")),(0,r.yg)("p",{parentName:"blockquote"},"creates a new array and pushes it to the stack"),(0,r.yg)("pre",{parentName:"blockquote"},(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'newarray(sqvm, 0);\npushstring(sqvm, "val1");\narrayappend(sqvm, -2);\npushinteger(sqvm, 15);\narrayappend(sqvm, -2);\n\n/*\n    The array on the stack now looks like this:\n    [ "val1", 15 ]\n*/\n'))),(0,r.yg)("p",null,"::: {#arrayappend}\n:::"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,r.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,r.yg)("p",{parentName:"blockquote"},"param SQInteger stackpos"),(0,r.yg)("p",{parentName:"blockquote"},":   stack position of the array to append to"),(0,r.yg)("p",{parentName:"blockquote"},"returns"),(0,r.yg)("p",{parentName:"blockquote"},":   a ",(0,r.yg)("inlineCode",{parentName:"p"},"SQRESULT")),(0,r.yg)("p",{parentName:"blockquote"},"pops a value from the stack and pushes it to the back of the array at\nthe position idx in the stack")),(0,r.yg)("h1",{id:"tables"},"Tables"),(0,r.yg)("p",null,"::: {#newtable}\n:::"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,r.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,r.yg)("p",{parentName:"blockquote"},"returns"),(0,r.yg)("p",{parentName:"blockquote"},":   a ",(0,r.yg)("inlineCode",{parentName:"p"},"SQRESULT")),(0,r.yg)("p",{parentName:"blockquote"},"creates a new table and pushes it onto the stack.")),(0,r.yg)("p",null,"::: {#newslot}\n:::"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,r.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,r.yg)("p",{parentName:"blockquote"},"param SQInteger stackpos"),(0,r.yg)("p",{parentName:"blockquote"},":   the index of the table to insert into"),(0,r.yg)("p",{parentName:"blockquote"},"param SQBool bstatic"),(0,r.yg)("p",{parentName:"blockquote"},":   if ",(0,r.yg)("inlineCode",{parentName:"p"},"SQTrue")," creates a static member. This parameter is only used\nif the target object is a class."),(0,r.yg)("p",{parentName:"blockquote"},"pops a key and a value from the stack and performs a set operation on\nthe table or class that is at position idx in the stack, if the slot\ndoes not exist it will be created."),(0,r.yg)("pre",{parentName:"blockquote"},(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'newtable(sqvm);\n// slot 1\npushstring(sqvm, "key");\npushstring(sqvm, "value");\nnewslot(sqvm, -3);\n// slot 2\npushstring(sqvm, "key2");\npushasset(sqvm, "value2");\nnewslot(sqvm, -3);\n// slot 3\npushstring(sqvm, "key3");\nnewtable(sqvm);\npushstring(sqvm, "sub");\npushinteger(sqvm, 13);\nnewslot(sqvm, -3);\nnewslot(sqvm, -3);\n\n/*\n    The table on the stack now looks like this:\n    {\n        key = "value"\n        key2 = $"value2"\n        key3 = { sub = 13 }\n    }\n*/\n'))),(0,r.yg)("h1",{id:"structs"},"Structs"),(0,r.yg)("p",null,":::: note\n::: title\nNote\n:::"),(0,r.yg)("p",null,"These functions aren\\'t available for plugins yet.\n::::"),(0,r.yg)("p",null,"::: {#pushnewstructinstance}\n:::"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,r.yg)("p",{parentName:"blockquote"},":   The target vm"),(0,r.yg)("p",{parentName:"blockquote"},"param int fieldCount"),(0,r.yg)("p",{parentName:"blockquote"},":   total number of fields the struct contains"),(0,r.yg)("p",{parentName:"blockquote"},"Creates and pushes a struct instance with ",(0,r.yg)("inlineCode",{parentName:"p"},"fieldCount")," to the stack.")),(0,r.yg)("p",null,"::: {#sealstructslot}\n:::"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,r.yg)("p",{parentName:"blockquote"},":   The target vm"),(0,r.yg)("p",{parentName:"blockquote"},"param int fieldIndex"),(0,r.yg)("p",{parentName:"blockquote"},":   Index of the field to fill"),(0,r.yg)("p",{parentName:"blockquote"},"Pops a value from the stack and fills the field at ",(0,r.yg)("inlineCode",{parentName:"p"},"fieldIndex")," from\nthe struct object that needs to be at the top of the stack."),(0,r.yg)("pre",{parentName:"blockquote"},(0,r.yg)("code",{parentName:"pre",className:"language-cpp"},'pushnewstructinstance(sqvm, 2); // create a struct instance with 2 slots\npushinteger(sqvm, 12);\nsealstructslot(sqvm, 0);\npushstring(sqvm, "example", -1);\nsealstructslot(sqvm, 1);\n\n/*\n    Assuming the compiler expects this slot:\n    struct ExStruct { int i, string s }\n    , the struct on the stack looks like this\n\n    ExStruct {\n        i = 12,\n        s = "example"\n    }\n*/\n'))),(0,r.yg)("h1",{id:"userdata"},"Userdata"),(0,r.yg)("p",null,"::: {#createuserdata}\n:::"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,r.yg)("p",{parentName:"blockquote"},":   The target vm"),(0,r.yg)("p",{parentName:"blockquote"},"param SQInteger size"),(0,r.yg)("p",{parentName:"blockquote"},":   bit size of the userdata object"),(0,r.yg)("p",{parentName:"blockquote"},"When the function sq_newuserdata is called, Squirrel allocates a new\nuserdata with the specified size, returns a pointer to his payload\nbuffer and push the object in the stack; at this point the application\ncan do whatever it want with this memory chunk, the VM will\nautomatically take care of the memory deallocation like for every\nother built-in type. A userdata can be passed to a function or stored\nin a table slot. By default Squirrel cannot manipulate directly\nuserdata; however is possible to assign a delegate to it and define a\nbehavior like it would be a table. Because the application would want\nto do something with the data stored in a userdata object when it get\ndeleted, is possible to assign a callback that will be called by the\nVM just before deleting a certain userdata. This is done through the\nAPI call sq_setreleasehook.")),(0,r.yg)("p",null,"::: {#setuserdatatypeid}\n:::"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,r.yg)("p",{parentName:"blockquote"},":   The target vm"),(0,r.yg)("p",{parentName:"blockquote"},"param SQInteger stackpos"),(0,r.yg)("p",{parentName:"blockquote"},":   Stack position of the userdata")),(0,r.yg)("p",null,"::: {#getuserdata}\n:::"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,r.yg)("p",{parentName:"blockquote"},":   The target vm"),(0,r.yg)("p",{parentName:"blockquote"},"param SQInteger stackpos"),(0,r.yg)("p",{parentName:"blockquote"},":   Stack position of the userdata"),(0,r.yg)("p",{parentName:"blockquote"},"param T","*"," data"),(0,r.yg)("p",{parentName:"blockquote"},":   Pointer to an arbitrary variable the userdata gets mapped to"),(0,r.yg)("p",{parentName:"blockquote"},"param uint64_t","*"," typeid"),(0,r.yg)("p",{parentName:"blockquote"},":   Pointer to a variable edited to hold the userdata type")))}c.isMDXComponent=!0}}]);