"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[3402],{5680:(e,r,n)=>{n.d(r,{xA:()=>u,yg:()=>p});var t=n(6540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function _(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var R=t.createContext({}),l=function(e){var r=t.useContext(R),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=l(e.components);return t.createElement(R.Provider,{value:r},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},A=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,R=e.parentName,u=_(e,["components","mdxType","originalType","parentName"]),c=l(n),A=a,p=c["".concat(R,".").concat(A)]||c[A]||s[A]||o;return n?t.createElement(p,i(i({ref:r},u),{},{components:n})):t.createElement(p,i({ref:r},u))}));function p(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=A;var _={};for(var R in r)hasOwnProperty.call(r,R)&&(_[R]=r[R]);_.originalType=e,_[c]="string"==typeof e?e:a,i[1]=_;for(var l=2;l<o;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}A.displayName="MDXCreateElement"},7555:(e,r,n)=>{n.r(r),n.d(r,{contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>_,toc:()=>R});var t=n(8168),a=(n(6540),n(5680));const o={},i="Rui",_={unversionedId:"reference/respawn/rui",id:"reference/respawn/rui",isDocsHomePage:!1,title:"Rui",description:"Functions for creating a rui, and methods of the rui object",source:"@site/docs/reference/respawn/rui.md",sourceDirName:"reference/respawn",slug:"/reference/respawn/rui",permalink:"/ns-wiki/docs/reference/respawn/rui",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/reference/respawn/rui.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Weapon Utilities",permalink:"/ns-wiki/docs/reference/respawn/native_server/weapons"},next:{title:"Titan",permalink:"/ns-wiki/docs/reference/respawn/titan"}},R=[],l={toc:R},u="wrapper";function c(e){let{components:r,...n}=e;return(0,a.yg)(u,(0,t.A)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"rui"},"Rui"),(0,a.yg)("p",null,"Functions for creating a rui, and methods of the rui object"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'// To create one, do:\nrui = RuiCreate( $"ui/assetname.rpak", topology, drawGroup, sortKey ) // sortkey = int to prevent z-fighting. higher -> in front\n\n// You can then manipulate it using the following:\nRuiSetDrawGroup( rui, drawGroup )\nRuiSetString( rui, argName, value )\nRuiSetBool( rui, argName, value )\nRuiSetInt( rui, argName, value )\nRuiSetFloat( rui, argName, value )\nRuiSetFloat2( rui, argName, value )  // value is a vector; only x and y are used\nRuiSetFloat3( rui, argName, value )\nRuiSetColorAlpha( rui, argName, color, alpha )  // color is a vector\n\n// To destroy it, just do:\nRuiDestroy( rui )\n')),(0,a.yg)("p",null,"Drawgroups"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"RUI_DRAW_WORLD\nRUI_DRAW_HUD\nRUI_DRAW_COCKPIT\nRUI_DRAW_NONE\n")),(0,a.yg)("p",null,"Trackers"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"// VECTOR TYPES\nRUI_TRACK_ABSORIGIN_FOLLOW                   // Create at absorigin, and update to follow the entity\nRUI_TRACK_POINT_FOLLOW                       // Create on attachment point, and update to follow the entity\nRUI_TRACK_OVERHEAD_FOLLOW                    // Create at the top of the entity's bbox\nRUI_TRACK_EYEANGLES_FOLLOW\n\n// FLOAT TYPES\nRUI_TRACK_HEALTH                   // Health as fraction from 0 to 1\nRUI_TRACK_FRIENDLINESS                   // 0 if ent is enemy, 1 if it's friendly\nRUI_TRACK_PLAYER_SUIT_POWER                   // Player's suit power from 0 to 1\nRUI_TRACK_PLAYER_GRAPPLE_POWER                   // Player's grapple power from 0 to 1\nRUI_TRACK_PLAYER_SHARED_ENERGY                   // Players shared energy value\nRUI_TRACK_WEAPON_CHARGE_FRACTION                   // Weapon charge as fraction from 0 to 1\nRUI_TRACK_WEAPON_SMART_AMMO_LOCK_FRACTION                   // Smart ammo weapon lock fraction from 0 to N\nRUI_TRACK_WEAPON_READY_TO_FIRE_FRACTION                   // Weapon cooldown as fraction from 0 to 1\nRUI_TRACK_WEAPON_RELOAD_FRACTION                   // Weapon reloading as fraction from 0 to 1\nRUI_TRACK_WEAPON_DRYFIRE_FRACTION                   \nRUI_TRACK_WEAPON_CLIP_AMMO_FRACTION                   // Weapon clip ammo as fraction from 0 to 1\nRUI_TRACK_WEAPON_REMAINING_AMMO_FRACTION                   // Weapon remaining ammo as fraction from 0 to 1\nRUI_TRACK_WEAPON_CLIP_AMMO_MAX                   \nRUI_TRACK_WEAPON_STOCKPILE_AMMO_MAX                   \nRUI_TRACK_WEAPON_LIFETIME_SHOTS                   \nRUI_TRACK_WEAPON_AMMO_REGEN_RATE                   \nRUI_TRACK_BOOST_METER_FRACTION                   // Player boost meter as fraction from 0 to 1\nRUI_TRACK_GLIDE_METER_FRACTION                   // Player glide meter as fraction from 0 to 1\nRUI_TRACK_SHIELD_FRACTION                   // Shield health as fraction from 0 to 1\nRUI_TRACK_STATUS_EFFECT_SEVERITY                   // Status effect severity as fraction from 0 to 1; attachmentIndex used as status effect index\nRUI_TRACK_SCRIPT_NETWORK_VAR                   // Value of a script network variable (use GetNetworkedVariableIndex())\nRUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL                   // Value of a script network variable without an entity (use GetNetworkedVariableIndex())\nRUI_TRACK_SCRIPT_NETWORK_VAR_LOCAL_VIEW_PLAYER                   // Value of a script network variable on the local view player (changes automatically during kill replay) (use GetNetworkedVariableIndex())\nRUI_TRACK_FRIENDLY_TEAM_SCORE                   \nRUI_TRACK_FRIENDLY_TEAM_ROUND_SCORE                   // The value of score2 for friendlies\nRUI_TRACK_ENEMY_TEAM_SCORE                   \nRUI_TRACK_ENEMY_TEAM_ROUND_SCORE                   // The value of score2 for enemies\nRUI_TRACK_MINIMAP_SCALE                   \nRUI_TRACK_SOUND_METER                   // Sound meter as fraction from 0 to 1.\n\n// INT TYPES\nRUI_TRACK_MINIMAP_FLAGS,\nRUI_TRACK_MINIMAP_CUSTOM_STATE,\nRUI_TRACK_TEAM_RELATION_VIEWPLAYER,                   // ENEMY: -1, NEUTRAL: 0, FRIENDLY: 1\nRUI_TRACK_TEAM_RELATION_CLIENTPLAYER,                   // ENEMY: -1, NEUTRAL: 0, FRIENDLY: 1\nRUI_TRACK_SCRIPT_NETWORK_VAR_INT,                   // Value of a script network variable (use GetNetworkedVariableIndex())\nRUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL_INT,                   // Value of a script network variable without an entity (use GetNetworkedVariableIndex())\nRUI_TRACK_SCRIPT_NETWORK_VAR_LOCAL_VIEW_PLAYER_INT,                   // Value of a script network variable on the local view player (changes automatically during kill replay) (use GetNetworkedVariableIndex())\n\n// GAMETIME TYPES\nRUI_TRACK_LAST_FIRED_TIME,\nRUI_TRACK_MINIMAP_THREAT_SECTOR,\n\n// IMAGE TYPES\nRUI_TRACK_WEAPON_MENU_ICON,\nRUI_TRACK_WEAPON_HUD_ICON\n")),(0,a.yg)("blockquote",null,(0,a.yg)("blockquote",{parentName:"blockquote"},(0,a.yg)("pre",{parentName:"blockquote"},(0,a.yg)("code",{parentName:"pre"},"screenSizeX = GetScreenSize()[0]\nscreenSizeY = GetScreenSize()[1]\n"))),(0,a.yg)("blockquote",{parentName:"blockquote"},(0,a.yg)("p",{parentName:"blockquote"},"value is a vector; only x and y are used")),(0,a.yg)("blockquote",{parentName:"blockquote"},(0,a.yg)("p",{parentName:"blockquote"},"color is a vector"))))}c.isMDXComponent=!0}}]);