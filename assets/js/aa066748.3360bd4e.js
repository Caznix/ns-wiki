"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[1750],{4341:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var t=n(4848),s=n(8453);const i={},a="Stryder",o={id:"reference/respawn/native_server/stryder",title:"Stryder",description:"Stryder is in a sense like the masterserver Northstar uses but for",source:"@site/docs/reference/respawn/native_server/stryder.md",sourceDirName:"reference/respawn/native_server",slug:"/reference/respawn/native_server/stryder",permalink:"/ns-wiki/docs/reference/respawn/native_server/stryder",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/reference/respawn/native_server/stryder.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Status Effects",permalink:"/ns-wiki/docs/reference/respawn/native_server/statuseffects"},next:{title:"Time",permalink:"/ns-wiki/docs/reference/respawn/native_server/time"}},l={},d=[{value:"Lobbies",id:"lobbies",level:2},{value:"Parties",id:"parties",level:2},{value:"Stryder API",id:"stryder-api",level:2},{value:"PIN",id:"pin",level:2},{value:"Matchmaking",id:"matchmaking",level:2},{value:"Balancing",id:"balancing",level:2}];function c(e){const r={admonition:"admonition",blockquote:"blockquote",div:"div",h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"stryder",children:"Stryder"})}),"\n",(0,t.jsx)(r.p,{children:"Stryder is in a sense like the masterserver Northstar uses but for\r\nvanilla. It handles player data, matchmaking, servers and more."}),"\n",(0,t.jsx)(r.h2,{id:"lobbies",children:"Lobbies"}),"\n",(0,t.jsxs)(r.admonition,{type:"note",children:[(0,t.jsx)(r.div,{children:(0,t.jsx)(r.p,{children:"Note"})}),(0,t.jsx)(r.p,{children:"Not exclusive to vanilla lobbies. These may be used in northstar as well"})]}),"\n",(0,t.jsx)(r.p,{children:"Methods for pregame lobbies."}),"\n",(0,t.jsx)(r.h2,{id:"parties",children:"Parties"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"Sends a group of players off to the party screen, possibly by\r\nallocating a server first"}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"stryder-api",children:"Stryder API"}),"\n",(0,t.jsx)(r.p,{children:"Methods for communication with the vanilla master server"}),"\n",(0,t.jsx)(r.h2,{id:"pin",children:"PIN"}),"\n",(0,t.jsx)(r.p,{children:"Some proprietary telemetry system used by respawn."}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"Gets the platform name the way PIN likes it."}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"matchmaking",children:"Matchmaking"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"Gets the name of this server's datacenter"}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"balancing",children:"Balancing"})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(6540);const s={},i=t.createContext(s);function a(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);