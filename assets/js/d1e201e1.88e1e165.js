"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[2696],{5680:(e,n,r)=>{r.d(n,{xA:()=>l,yg:()=>g});var t=r(6540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=t.createContext({}),u=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},l=function(e){var n=u(e.components);return t.createElement(i.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(r),d=a,g=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return r?t.createElement(g,c(c({ref:n},l),{},{components:r})):t.createElement(g,c({ref:n},l))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[p]="string"==typeof e?e:a,c[1]=s;for(var u=2;u<o;u++)c[u]=r[u];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},384:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var t=r(8168),a=(r(6540),r(5680));const o={},c="Custom Damage Source IDs",s={unversionedId:"reference/northstar/customdamagesources",id:"reference/northstar/customdamagesources",isDocsHomePage:!1,title:"Custom Damage Source IDs",description:"Custom damage source IDs can be used to create new damage source IDs for",source:"@site/docs/reference/northstar/customdamagesources.md",sourceDirName:"reference/northstar",slug:"/reference/northstar/customdamagesources",permalink:"/ns-wiki/docs/reference/northstar/customdamagesources",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/reference/northstar/customdamagesources.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chathooks",permalink:"/ns-wiki/docs/reference/northstar/chathooks"},next:{title:"Dependency Constants and Compiler Directives",permalink:"/ns-wiki/docs/reference/northstar/dependencyconstants"}},i=[],u={toc:i},l="wrapper";function p(e){let{components:n,...r}=e;return(0,a.yg)(l,(0,t.A)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"custom-damage-source-ids"},"Custom Damage Source IDs"),(0,a.yg)("p",null,"Custom damage source IDs can be used to create new damage source IDs for\nmodded weapons, abilities, damage, etc."),(0,a.yg)("p",null,"They can only be registered server-side and cannot modify existing\ndamage source IDs. Clients pre-1.9.4 will not see the custom damage\nsources in the obituary."),(0,a.yg)("p",null,"To add a single damage source ID, use:"),(0,a.yg)("p",null,"To add multiple damage source IDs, use"),(0,a.yg)("p",null,"The first string parameter is the in-code weapon name while the latter\nis the name displayed in the obituary."),(0,a.yg)("p",null,"Damage source IDs should be added in ",(0,a.yg)("inlineCode",{parentName:"p"},'"After"')," server callbacks."),(0,a.yg)("p",null,"For example, we can call the methods from a function in\n",(0,a.yg)("inlineCode",{parentName:"p"},"damage_source_example.nut"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},'global function SimpleSourceInit\n\nvoid function SimpleSourceInit()\n{\n    // Server-side code\n\n    // Register a single damage source ID\n    RegisterWeaponDamageSource( "mp_weapon_minigun", "Minigun" )\n\n    // Register multiple damage source IDs\n    RegisterWeaponDamageSources(\n        {\n            mp_titanweapon_barrage_core_launcher = "Barrage Core",\n            mp_titanweapon_grenade_launcher = "Grenade Launcher"\n        }\n    )\n}\n')),(0,a.yg)("p",null,"Then call the function as an ",(0,a.yg)("inlineCode",{parentName:"p"},'"After"')," server callback in the\n",(0,a.yg)("inlineCode",{parentName:"p"},"mod.json"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n    "Scripts": [\n        {\n            "Path": "damage_source_example.nut",\n            "RunOn": "SERVER && MP",\n            "ServerCallback": {\n                "After": "SimpleSourceInit"\n            }\n        },\n    ]\n}\n')),(0,a.yg)("p",null,"Now, these damage source IDs can be referenced in script like so:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-csharp"},"eDamageSourceId.mp_weapon_minigun\neDamageSourceId.mp_titanweapon_barrage_core_launcher\neDamageSourceId.mp_titanweapon_grenade_launcher\n")),(0,a.yg)("p",null,"and their corresponding precached weapons (if applicable) will\nautomatically use their custom damage source IDs."))}p.isMDXComponent=!0}}]);