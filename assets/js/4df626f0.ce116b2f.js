"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[5037],{7237:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=n(4848),r=n(8453);const i={},a="Strings",l={id:"squirrel/types/strings",title:"Strings",description:"Unlike in other languages, strings in squirrel are primitive types and",source:"@site/docs/squirrel/types/strings.md",sourceDirName:"squirrel/types",slug:"/squirrel/types/strings",permalink:"/ns-wiki/docs/squirrel/types/strings",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/types/strings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ornull",permalink:"/ns-wiki/docs/squirrel/types/ornull"},next:{title:"Structs",permalink:"/ns-wiki/docs/squirrel/types/structs"}},o={},c=[{value:"Verbatim Strings",id:"verbatim-strings",level:2},{value:"Assets",id:"assets",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"strings",children:"Strings"})}),"\n",(0,t.jsx)(s.p,{children:"Unlike in other languages, strings in squirrel are primitive types and\r\nimmutable. That means you can't change the value of a string but will\r\nneed to copy and change it in another variable."}),"\n",(0,t.jsx)(s.p,{children:"The default value of strings is an empty string with a length of 0."}),"\n",(0,t.jsxs)(s.p,{children:["The type keyword for strings is ",(0,t.jsx)(s.code,{children:"string"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["To create strings, simply write the text of the literals in ",(0,t.jsx)(s.code,{children:'"'})," quotes."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-string",metastring:'s = "this is an example string literal"'})}),"\n",(0,t.jsx)(s.h2,{id:"verbatim-strings",children:"Verbatim Strings"}),"\n",(0,t.jsxs)(s.p,{children:["Verbatim strings do not escape sequences. They begin with a ",(0,t.jsx)(s.code,{children:"@"})," token\r\nbefore a regular string literal. Verbatim strings can also extend over\r\nmultiple lines. If they do they include any white space between the\r\nmatching string quotes."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'string a = "simple string\\nover two lines"\r\nstring b = @"simple string\r\nover two lines"\r\n\r\nAssert( a == b )\n'})}),"\n",(0,t.jsx)(s.p,{children:"However, a doubled quotation mark within a verbatim string is replaced\r\nby a single quotation mark."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'string a = "extra quotation mark\\""\r\nstring b = @"extra quotation mark """\r\n\r\nAssert( a == b )\n'})}),"\n",(0,t.jsx)(s.h2,{id:"assets",children:"Assets"}),"\n",(0,t.jsx)(s.p,{children:"Assets and strings are internally the same but at compile time they are\r\ndifferent types."}),"\n",(0,t.jsx)(s.p,{children:"Assets are used to reference a specific resource (often in rpak files)."}),"\n",(0,t.jsxs)(s.p,{children:["The type keyword for assets is ",(0,t.jsx)(s.code,{children:"asset"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Asset literals are regular string literals prefixed with the ",(0,t.jsx)(s.code,{children:"$"})," token.\r\nVerbatim strings can't be an asset."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'asset a = $"my/resource"\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Northstar added the ",(0,t.jsx)(s.code,{children:"StringToAsset"})," function that allows converting any\r\nstring into an asset."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var t=n(6540);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);