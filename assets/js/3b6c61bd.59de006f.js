"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[3868],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var a=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),p=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(c.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=p(t),u=i,g=s["".concat(c,".").concat(u)]||s[u]||m[u]||r;return t?a.createElement(g,o(o({ref:n},d),{},{components:t})):a.createElement(g,o({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[s]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5552:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>s,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(8168),i=(t(6540),t(5680));const r={},o=void 0,l={unversionedId:"squirrel/networking",id:"squirrel/networking",isDocsHomePage:!1,title:"networking",description:"Communicating between CLIENT, UI and SERVER scripts",source:"@site/docs/squirrel/networking.md",sourceDirName:"squirrel",slug:"/squirrel/networking",permalink:"/ns-wiki/docs/squirrel/networking",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/networking.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/ns-wiki/docs/squirrel/intro"},next:{title:"Squirrel VM",permalink:"/ns-wiki/docs/squirrel/sqvm"}},c=[{value:"Example",id:"example",children:[]},{value:"Register a server command",id:"register-a-server-command",children:[]},{value:"Example",id:"example-1",children:[{value:"<code>SERVER</code> to <code>UI</code> vm",id:"server-to-ui-vm",children:[]}]},{value:"Example",id:"example-2",children:[{value:"<code>CLIENT</code> to <code>SERVER</code> vm",id:"client-to-server-vm",children:[]},{value:"<code>CLIENT</code> to <code>UI</code> vm",id:"client-to-ui-vm",children:[]}]},{value:"Example",id:"example-3",children:[{value:"<code>UI</code> to <code>CLIENT</code> vm",id:"ui-to-client-vm",children:[]}]},{value:"Example",id:"example-4",children:[]}],p={toc:c},d="wrapper";function s(e){let{components:n,...t}=e;return(0,i.yg)(d,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Communicating between CLIENT, UI and SERVER scripts\n","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~","~"),(0,i.yg)("p",null,"All VMs (",(0,i.yg)("inlineCode",{parentName:"p"},"CLIENT"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"UI"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"SERVER"),") are seperate from each other and do\nnot share any variables, even when running on the same machine."),(0,i.yg)("p",null,"However, there are different interfaces to communicate between all VMs."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"SERVER")," to ",(0,i.yg)("inlineCode",{parentName:"p"},"CLIENT")," vm ======================"),(0,i.yg)("h1",{id:"remote-functions"},"Remote Functions"),(0,i.yg)("p",null,"Remote functions allow the ",(0,i.yg)("inlineCode",{parentName:"p"},"SERVER")," vm to call a function from the\n",(0,i.yg)("inlineCode",{parentName:"p"},"CLIENT")," vm with parameters."),(0,i.yg)("p",null,"To use remote functions, you have to make a registration on both the\n",(0,i.yg)("inlineCode",{parentName:"p"},"CLIENT")," and the ",(0,i.yg)("inlineCode",{parentName:"p"},"SERVER")," vm with ",(0,i.yg)("inlineCode",{parentName:"p"},"Remote_RegisterFunction"),"."),(0,i.yg)("p",null,"Northstar provides the"),(0,i.yg)("p",null,"callback in which you can use the"),(0,i.yg)("p",null,"function. It\\'s not possible to register remote functions after\n",(0,i.yg)("inlineCode",{parentName:"p"},"Remote_EndRegisteringFunctions")," has been called. The callback exists to\nallow multiple mods to register remote vars."),(0,i.yg)("p",null,":::: warning\n::: title\nWarning\n:::"),(0,i.yg)("p",null,"You can only pass parameters of the types ",(0,i.yg)("inlineCode",{parentName:"p"},"null"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"int"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"float")," or\n",(0,i.yg)("inlineCode",{parentName:"p"},"bool"),"."),(0,i.yg)("p",null,"It is possible to communicate entities using eHandles. To get an\neHandle, use the ",(0,i.yg)("inlineCode",{parentName:"p"},"entity.GetEncodedEHandle()")," function. To get the\ncorresponding entity of a handle, use\n",(0,i.yg)("inlineCode",{parentName:"p"},"entity ent = GetEntityFromEncodedEHandle( eHandle )"),". eHandles are of\ntype ",(0,i.yg)("inlineCode",{parentName:"p"},"int"),".\n::::"),(0,i.yg)("h2",{id:"example"},"Example"),(0,i.yg)("p",null,"mod.json extract:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-json"},'"Scripts": [\n{\n    "Path": "sh_spaceships.nut",\n    "RunOn": "CLIENT || SERVER", // execute the same function on both CLIENT and SERVER\n    "ClientCallback": {\n        "Before": "Spaceship_Network"\n    },\n    "ServerCallback": {\n        "Before": "Spaceship_Network"\n    }\n},\n{\n    // more script registrations ...\n')),(0,i.yg)("p",null,"sh_spaceships.nut:"),(0,i.yg)("p",null,"The networked ",(0,i.yg)("inlineCode",{parentName:"p"},"CLIENT")," function has to be global"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'#if CLIENT\nglobal function Server_GetNetworkedVariable // make the networked function only global on CLIENT\n#endif //CLIENT\n\nglobal function Spaceship_Network // this gets executed on both CLIENT & SERVER\n\nvoid function Spaceship_Network()\n{\n    AddCallback_OnRegisteringCustomNetworkVars( RegisterNetworkVars ) // you can only register remote functions inside of this callback\n}\n\nvoid function RegisterNetworkVars()\n{\n    // this has to be executed on both CLIENT and SERVER, else they will be out of sync and the client disconnects\n    Remote_RegisterFunction( "Server_GetNetworkedVariable" ) // register a remote function. Note that the parameters are not declared here\n}\n\n#if CLIENT\nvoid function Server_GetNetworkedVariable( int number ) // you can declare as many or few parameters as you wish\n{\n    printt("got integer", number)\n}\n#endif //CLIENT\n')),(0,i.yg)("p",null,"Calling the ",(0,i.yg)("inlineCode",{parentName:"p"},"CLIENT")," function ",(0,i.yg)("inlineCode",{parentName:"p"},"Server_GetNetworkedVariable")," on ",(0,i.yg)("inlineCode",{parentName:"p"},"SERVER"),"\nvm:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'// player: CPlayer entity that should execute the function\n// func: function identifier string\n// ...: any parameters passed to the function\nRemote_CallFunction_NonReplay( entity player, string func, ... ) // NOT reexecuted in a replay\nRemote_CallFunction_Replay( entity player, string func, ... ) // reexecuted in a replay\n\n// for the previous example, this would be a valid remote function call:\n\nRemote_CallFunction_NonReplay( player, "Server_GetNetworkedVariable", RandomIntRange( 1, 100 ) )\n')),(0,i.yg)("h1",{id:"server-to-client-command-callbacks"},"Server to Client command callbacks"),(0,i.yg)("p",null,"Allows the ",(0,i.yg)("inlineCode",{parentName:"p"},"SERVER")," vm to create a ",(0,i.yg)("inlineCode",{parentName:"p"},"ServerToClientStringCommand")," on a\nplayer which is linked to a Callback locally"),(0,i.yg)("h2",{id:"register-a-server-command"},"Register a server command"),(0,i.yg)("p",null,":::: note\n::: title\nNote\n:::"),(0,i.yg)("p",null,"this has to be executed on the ",(0,i.yg)("inlineCode",{parentName:"p"},"Before")," Client callback"),(0,i.yg)("p",null,"the formatting for the server command is like a normal console command.\nArguments are seperated by spaces\n::::"),(0,i.yg)("p",null,"Register with the function clientside:"),(0,i.yg)("p",null,"and execute with the function serverside:"),(0,i.yg)("h2",{id:"example-1"},"Example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'void function MessageUtils_ClientInit()\n{\n    AddServerToClientStringCommandCallback( "ServerHUDMessageShow", ServerCallback_CreateServerHUDMessage )\n}\n\nvoid function ServerCallback_CreateServerHUDMessage ( array<string> args )\n{\n    // client side command handle logic ...\n}\n')),(0,i.yg)("h3",{id:"server-to-ui-vm"},(0,i.yg)("inlineCode",{parentName:"h3"},"SERVER")," to ",(0,i.yg)("inlineCode",{parentName:"h3"},"UI")," vm"),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Given a player, function name, and optional parameters, call function\nin UI script. Allowed var types are null, bool, int, and float.")),(0,i.yg)("h2",{id:"example-2"},"Example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'Remote_CallFunction_UI( player, "ScriptCallback_UnlockAchievement", achievementID )\n')),(0,i.yg)("h3",{id:"client-to-server-vm"},(0,i.yg)("inlineCode",{parentName:"h3"},"CLIENT")," to ",(0,i.yg)("inlineCode",{parentName:"h3"},"SERVER")," vm"),(0,i.yg)("h1",{id:"client-to-server-command-callbacks"},"Client to Server command callbacks"),(0,i.yg)("p",null,"Register a client command callback serverside with"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"player")," is the player that called the command clientside. The callback\nfunction should return ",(0,i.yg)("inlineCode",{parentName:"p"},"true")," if the command was accepted and ",(0,i.yg)("inlineCode",{parentName:"p"},"false")," if\nit was invalid."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"CLIENT")," vm can execute commands with the function:"),(0,i.yg)("p",null,"These will be handled by the ",(0,i.yg)("inlineCode",{parentName:"p"},"SERVER")," if the command is registered."),(0,i.yg)("h1",{id:"clientcommand-notifications"},"ClientCommand Notifications"),(0,i.yg)("p",null,"Since version 1.5 mods can receive notifications when a client command\nhas been handled. This is different from\n",(0,i.yg)("inlineCode",{parentName:"p"},"AddClientCommandCallback"),'{.interpreted-text role="cpp:func"}'),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"Example usage with the ",(0,i.yg)("inlineCode",{parentName:"p"},"PrivateMatchLaunch"),'{.interpreted-text\nrole="doc"} clientcommand'),(0,i.yg)("pre",{parentName:"blockquote"},(0,i.yg)("code",{parentName:"pre"},'void function init(){\n    AddClientCommandNotifyCallback("PrivateMatchLaunch", started)\n}\n\nvoid function started(entity player, array<string> args){\n    print(player + " started the match")\n}\n'))),(0,i.yg)("p",null,"Please refer to ",(0,i.yg)("inlineCode",{parentName:"p"},"list_client_commands"),'{.interpreted-text role="ref"} for\na list of native client commands you could catch.'),(0,i.yg)("h3",{id:"client-to-ui-vm"},(0,i.yg)("inlineCode",{parentName:"h3"},"CLIENT")," to ",(0,i.yg)("inlineCode",{parentName:"h3"},"UI")," vm"),(0,i.yg)("p",null,"Create a global function in the ",(0,i.yg)("inlineCode",{parentName:"p"},"UI")," vm and call it in the ",(0,i.yg)("inlineCode",{parentName:"p"},"CLIENT")," vm\nwith the function:"),(0,i.yg)("p",null,"You can also pass parameters to the function. ",(0,i.yg)("inlineCode",{parentName:"p"},"identifier")," is the name\nof the function you want to call."),(0,i.yg)("h2",{id:"example-3"},"Example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'#if UI\nglobal function CallMe\n\nvoid function CallMe( int a, int b )\n{\n    printt( a + b )\n}\n#elseif CLIENT\nRunUIScript( "CallMe", 1, 2 ) // 3\n#endif\n')),(0,i.yg)("h3",{id:"ui-to-client-vm"},(0,i.yg)("inlineCode",{parentName:"h3"},"UI")," to ",(0,i.yg)("inlineCode",{parentName:"h3"},"CLIENT")," vm"),(0,i.yg)("p",null,"Create a global function in the ",(0,i.yg)("inlineCode",{parentName:"p"},"CLIENT")," vm and call it in the ",(0,i.yg)("inlineCode",{parentName:"p"},"UI")," vm\nwith the function:"),(0,i.yg)("p",null,"You can also pass parameters to the function. ",(0,i.yg)("inlineCode",{parentName:"p"},"identifier")," is the name\nof the function you want to call."),(0,i.yg)("h2",{id:"example-4"},"Example"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'#if CLIENT\nglobal function CallMe\n\nvoid function CallMe( int a, int b )\n{\n    printt( a + b )\n}\n#elseif UI\nRunClientScript( "CallMe", 1, 2 ) // 3\n#endif\n')))}s.isMDXComponent=!0}}]);