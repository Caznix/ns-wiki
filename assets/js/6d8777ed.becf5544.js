"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[15],{7915:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var i=r(4848),s=r(8453);const t={},o="Statements",a={id:"squirrel/statements",title:"Statements",description:"If statements",source:"@site/docs/squirrel/statements.md",sourceDirName:"squirrel",slug:"/squirrel/statements",permalink:"/ns-wiki/docs/squirrel/statements",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/statements.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Control Flow",permalink:"/ns-wiki/docs/squirrel/statements/controlflow"},next:{title:"Typing",permalink:"/ns-wiki/docs/squirrel/types/"}},l={},c=[{value:"If statements",id:"if-statements",level:2},{value:"Loops",id:"loops",level:2},{value:"While Loops",id:"while-loops",level:3},{value:"For Loop",id:"for-loop",level:3},{value:"Foreach Loop",id:"foreach-loop",level:3},{value:"Implicit conditional behavior",id:"implicit-conditional-behavior",level:2},{value:"Formatting of actions",id:"formatting-of-actions",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"statements",children:"Statements"})}),"\n",(0,i.jsx)(n.h2,{id:"if-statements",children:"If statements"}),"\n",(0,i.jsxs)(n.p,{children:["If statements use a similar style to most programming languages and will\r\nexecute their asigned code if the test placed inside returns the boolean\r\nvalue true. If I wanted to have something occur if, and only if, our\r\nprevious ",(0,i.jsx)(n.code,{children:"ReturnTrueOrFalse"})," function returned true, then you can use:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"if( ReturnTrueOrFalse() )\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Conditional operators can also be used to make comparisons, such as ",(0,i.jsx)(n.code,{children:"=="}),"\r\n(equals), ",(0,i.jsx)(n.code,{children:"<"})," (less than), ",(0,i.jsx)(n.code,{children:"<="})," (less than or equal), ",(0,i.jsx)(n.code,{children:"!="})," (not equal),\r\netc., returning true if their condition is satisfied. For example, to\r\nexecute code if a dice roll landed on 5:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"if( RandomInt( 6 ) + 1 == 5 )\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Like other languages, if statements can be connected to ",(0,i.jsx)(n.code,{children:"else if"})," and\r\n",(0,i.jsx)(n.code,{children:"else"})," statements. ",(0,i.jsx)(n.code,{children:"else if"})," statements must be used immediately after\r\nan ",(0,i.jsx)(n.code,{children:"if"})," or ",(0,i.jsx)(n.code,{children:"else if"})," and will only check their condition if the\r\npreceding statements failed. ",(0,i.jsx)(n.code,{children:"else"})," statements behave similarly, but\r\nalways run if the preceding statements failed and must be last."]}),"\n",(0,i.jsxs)(n.p,{children:["Squirrel supports ternary operations like most languages. The value of\r\nthe expression depends if a condition is truthy or not. However, if not\r\nused carefully this can worsen readability. The Syntax is\r\n",(0,i.jsx)(n.code,{children:"condition ? if_condition_true : if_condition_false"}),". This is especially\r\nuseful when declaring variables or passing parameters."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'// shortenedUsername is "longus..."" if username is "longusername" or "short" if username is "short"\r\nstring shortenedUsername = username.len() > 9 ? username.slice(0,6) + "..." : username;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"loops",children:"Loops"}),"\n",(0,i.jsx)(n.p,{children:"Loops are used to execute the same code n times."}),"\n",(0,i.jsx)(n.h3,{id:"while-loops",children:"While Loops"}),"\n",(0,i.jsx)(n.p,{children:"A while loop runs as long as the condition evaluates to a truthy value."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"while( true )\r\n{\r\n  // this will result in an endless loop because the probe condition will never be false \r\n}\r\n\r\nwhile( RandomInt( 2 ) )\r\n{\r\n  // This will run until a 1 is generated by chance, because squirrel treats 0 as a falsy value and 1 as truthy.\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Do While Loop ~~~~"}),"\n",(0,i.jsxs)(n.p,{children:["A do while loop is the same as a while loop but the condition is checked\r\n",(0,i.jsx)(n.strong,{children:"after"})," the body is executed."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"do\r\n{\r\n  // this will execute only one time\r\n} while( false )\n"})}),"\n",(0,i.jsx)(n.h3,{id:"for-loop",children:"For Loop"}),"\n",(0,i.jsx)(n.p,{children:"A for loop also runs until a condition is met however it provides you\r\nwith a counter variable."}),"\n",(0,i.jsxs)(n.p,{children:["The Syntax is as follows:\r\n",(0,i.jsx)(n.code,{children:"for( int counter; condition; behaviour_after_body_execution )"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// prints 0, 1, 2, 3, 4\r\nfor( int i; i < 5; i++ )\r\n{\r\n  print( i )\r\n}\r\n\r\narray<int> arr = [ 14, 2, 18, 9 ]\r\n// prints 14, 2, 18, 9\r\nfor( int i; i < arr.len() * 2; i += 2 )\r\n{\r\n  print( arr[i] )\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"foreach-loop",children:"Foreach Loop"}),"\n",(0,i.jsxs)(n.p,{children:["A foreach loop iterates over a ",(0,i.jsx)(n.code,{children:"table"})," or an ",(0,i.jsx)(n.code,{children:"array"})," and executes for\r\neach entry. The loop provides you with an optional counter for arrays or\r\nkey for tables."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'array<int> arr = [ 1, 2, 3, 4 ]\r\ntable<string, string> map = {\r\n  key1 = "mapped value 1",\r\n  key2 = "mapped value 2"\r\n}\r\n\r\n// prints 0 1, 1 2, 2 3, 3 4\r\nforeach( int index, int value in arr )\r\n{\r\n  printt( index, value )\r\n}\r\n\r\n// prints key1 mapped value 1, key2 mapped value 2\r\nforeach( string key, string value in map )\r\n{\r\n  printt( key, value )\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"implicit-conditional-behavior",children:"Implicit conditional behavior"}),"\n",(0,i.jsxs)(n.p,{children:["Conditional statements, such as while loops and if statements, also\r\nimplictly cast non-boolean inputs to booleans. For numbers, this means 0\r\nis considered false and anything else is considered true. For instance\r\nvariables like arrays and entities, ",(0,i.jsx)(n.code,{children:"null"})," is considered false and\r\nanything else is considered true. For example, these inputs are\r\nconsidered true by the if statements:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"if(2)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"array somelist = [0, 1]\r\nif(somelist)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Be aware that empty arrays and strings, ",(0,i.jsx)(n.code,{children:"[]"})," and ",(0,i.jsx)(n.code,{children:'""'}),", are considered\r\ntrue by this logic."]}),"\n",(0,i.jsx)(n.h2,{id:"formatting-of-actions",children:"Formatting of actions"}),"\n",(0,i.jsxs)(n.p,{children:["So great, we can loop and check things, but what can we do with this\r\ninformation? Squirrel uses ",(0,i.jsx)(n.code,{children:"{}"})," to denote the contents of a series of\r\nactions caused by such a statement."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, lets make our ",(0,i.jsx)(n.code,{children:"ReturnTrueOrFalse"})," function, that randomly\r\npicks either true or false, first:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"bool function ReturnTrueOrFalse() {\r\n  return RandomInt(2) == 1\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that while functions always need ",(0,i.jsx)(n.code,{children:"{}"}),", single-line ",(0,i.jsx)(n.code,{children:"if"}),"/",(0,i.jsx)(n.code,{children:"else"}),"\r\nstatements and loops do not:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'if(ReturnTrueOrFalse())\r\n  printt("Only called if true")\n'})}),"\n",(0,i.jsx)(n.p,{children:"Now let's make a more complicated function that will use the previous\r\nscript to determine true or false, printing a list each time it returns\r\ntrue:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"array<int> someinformation = [1,2,3,4,5,6]\r\nvoid function ThisDoesStuff(){\r\n  while(ReturnTrueOrFalse()){\r\n    foreach( int information in someinformation){\r\n      printt(information)\r\n    }\r\n  }\r\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(6540);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);