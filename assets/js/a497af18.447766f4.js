"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[4558],{5680:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>m});var n=r(6540);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(r),y=i,m=c["".concat(l,".").concat(y)]||c[y]||g[y]||s;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=r.length,a=new Array(s);a[0]=y;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,a[1]=o;for(var p=2;p<s;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},9996:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var n=r(8168),i=(r(6540),r(5680));const s={},a="Strings",o={unversionedId:"source/squirrel/types/strings",id:"source/squirrel/types/strings",isDocsHomePage:!1,title:"Strings",description:"Unlike in other languages, strings in squirrel are primitive types and",source:"@site/docs/source/squirrel/types/strings.md",sourceDirName:"source/squirrel/types",slug:"/source/squirrel/types/strings",permalink:"/ns-wiki/docs/source/squirrel/types/strings",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/source/squirrel/types/strings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ornull",permalink:"/ns-wiki/docs/source/squirrel/types/ornull"},next:{title:"Structs",permalink:"/ns-wiki/docs/source/squirrel/types/structs"}},l=[{value:"Verbatim Strings",id:"verbatim-strings",children:[]},{value:"Assets",id:"assets",children:[]}],p={toc:l},u="wrapper";function c(e){let{components:t,...r}=e;return(0,i.yg)(u,(0,n.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"strings"},"Strings"),(0,i.yg)("p",null,"Unlike in other languages, strings in squirrel are primitive types and\nimmutable. That means you can\\'t change the value of a string but will\nneed to copy and change it in another variable."),(0,i.yg)("p",null,"The default value of strings is an empty string with a length of 0."),(0,i.yg)("p",null,"The type keyword for strings is ",(0,i.yg)("inlineCode",{parentName:"p"},"string"),"."),(0,i.yg)("p",null,"To create strings, simply write the text of the literals in ",(0,i.yg)("inlineCode",{parentName:"p"},'"')," quotes."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-string",metastring:'s = "this is an example string literal"',s:!0,"":"",'"this':!0,is:!0,an:!0,example:!0,string:!0,'literal"':!0},"")),(0,i.yg)("h2",{id:"verbatim-strings"},"Verbatim Strings"),(0,i.yg)("p",null,"Verbatim strings do not escape sequences. They begin with a ",(0,i.yg)("inlineCode",{parentName:"p"},"@")," token\nbefore a regular string literal. Verbatim strings can also extend over\nmultiple lines. If they do they include any white space between the\nmatching string quotes."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'string a = "simple string\\nover two lines"\nstring b = @"simple string\nover two lines"\n\nAssert( a == b )\n')),(0,i.yg)("p",null,"However, a doubled quotation mark within a verbatim string is replaced\nby a single quotation mark."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'string a = "extra quotation mark\\""\nstring b = @"extra quotation mark """\n\nAssert( a == b )\n')),(0,i.yg)("h2",{id:"assets"},"Assets"),(0,i.yg)("p",null,"Assets and strings are internally the same but at compile time they are\ndifferent types."),(0,i.yg)("p",null,"Assets are used to reference a specific resource (often in rpak files)."),(0,i.yg)("p",null,"The type keyword for assets is ",(0,i.yg)("inlineCode",{parentName:"p"},"asset"),"."),(0,i.yg)("p",null,"Asset literals are regular string literals prefixed with the ",(0,i.yg)("inlineCode",{parentName:"p"},"$")," token.\nVerbatim strings can\\'t be an asset."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'asset a = $"my/resource"\n')),(0,i.yg)("p",null,"Northstar added the ",(0,i.yg)("inlineCode",{parentName:"p"},"StringToAsset")," function that allows converting any\nstring into an asset."))}c.isMDXComponent=!0}}]);