"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[3271],{5381:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var r=s(4848),t=s(8453);const a={},i="Classes",c={id:"squirrel/class",title:"Classes",description:"Note",source:"@site/docs/squirrel/class.md",sourceDirName:"squirrel",slug:"/squirrel/class",permalink:"/ns-wiki/docs/squirrel/class",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/class.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Threads, Signals and Flags",permalink:"/ns-wiki/docs/squirrel/async"},next:{title:"C++ Interface",permalink:"/ns-wiki/docs/squirrel/cpp_api/"}},l={},o=[{value:"Declaring Classes",id:"declaring-classes",level:2},{value:"Declaring Functions of Classes",id:"declaring-functions-of-classes",level:2},{value:"Inserting Properties Into Classes",id:"inserting-properties-into-classes",level:2},{value:"Instantiating Objects",id:"instantiating-objects",level:2},{value:"Cloning Instances",id:"cloning-instances",level:2},{value:"Emulating Namespaces",id:"namespaces",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",div:"div",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"classes",children:"Classes"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.div,{children:(0,r.jsx)(n.p,{children:"Note"})}),(0,r.jsx)(n.p,{children:"The version Respawn is using differs in some places from classes that\r\nare in use in Squirrel 3.x"}),(0,r.jsx)(n.p,{children:"This is by no means complete. Please add anything you know."})]}),"\n",(0,r.jsx)(n.h2,{id:"declaring-classes",children:"Declaring Classes"}),"\n",(0,r.jsxs)(n.p,{children:["To declare a class, first add the ",(0,r.jsx)(n.code,{children:"untyped"})," keyword and the class as a\r\nvariable at file level."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"untyped\r\nvar ExampleClass\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"untyped"})," declaration is required because instances have an unknown\r\ntype and it's not possible to use classes as types."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"var [classname]"})," represents the class. After declaring the class inside\r\nof a function you can use it in the script. You can use any type that\r\ncan hold vars to store classes. Refer to ",(0,r.jsx)(n.a,{href:"#namespaces",children:"Namespaces"})," for\r\nmore info."]}),"\n",(0,r.jsx)(n.p,{children:"If needed, add the global keyword for the variable to make the class\r\nusable everywhere in the vm."}),"\n",(0,r.jsx)(n.p,{children:"It's not possible to declare classes on local variables. It's required\r\nto declare the class inside of a function."}),"\n",(0,r.jsx)(n.p,{children:"Most classes use a constructor. A constructor is a function of the\r\ninstance that gets executed on object creation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'void function initClient() {\r\n    class ExampleClass {\r\n        constructor(){print("Instance of ExampleClass created");}\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can require parameters in the constructor. Keep in mind that you\r\nhave to pass those when creating an object."}),"\n",(0,r.jsxs)(n.p,{children:["Function parameters are passed as type ",(0,r.jsx)(n.code,{children:"var"}),", but the type keyword is\r\nnot required. ",(0,r.jsx)(n.code,{children:"constructor( parameter ){}; func( parameter ){};"})," and\r\n",(0,r.jsx)(n.code,{children:"constructor( var parameter ){}; func( var parameter ){};"})," are both\r\ncorrect."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'class ExampleClass {\r\n        propertyString = null // Actual type is var\r\n        propertyInt = null // Actual type is var\r\n        constructor( var pString, var pInt ) {\r\n            this.propertyString = expect string(pString);\r\n            this.propertyInt = expect int(pInt);\r\n        }\r\n}\r\n\r\n// See section "Declaring Objects" for more information on object creation\r\nvar obj = ExampleClass( "foo", 1 );\r\nprintt(obj.propertyString, obj.propertyString ) // foo, 1\r\nvar lObj = ExampleClass(); tObj = ExampleClass( "" , 0 , 0); // Both throw an error compile time because parameters don\'t match with the constructor\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Usually objects have properties. To define them, just add their\r\nidentifier into the class without type declaration. The properties will\r\nbe of type ",(0,r.jsx)(n.code,{children:"var"}),". However, you are required to set a default value of a\r\nproperty. This may be ",(0,r.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Every object has a reference to itself called ",(0,r.jsx)(n.code,{children:"this"}),". You can change\r\nparameters of an object by reference."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"void function initClient() {\r\n    class ExampleClass {\r\n        property = null\r\n        constructor( var parameter ) {\r\n            this.property = expect int(parameter);\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can't use the class name as a type. Use ",(0,r.jsx)(n.code,{children:"var"})," instead. You can't\r\n",(0,r.jsx)(n.code,{children:"expect"})," them either."]}),"\n",(0,r.jsx)(n.h2,{id:"declaring-functions-of-classes",children:"Declaring Functions of Classes"}),"\n",(0,r.jsxs)(n.p,{children:["Functions of a class have to return a value of type ",(0,r.jsx)(n.code,{children:"var"}),". This may be\r\n",(0,r.jsx)(n.code,{children:"null"}),". Define functions like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"global var ExampleClass;\r\nvoid function initClassF(){\r\n    class ExampleClass {\r\n        variable = \"default value\"\r\n\r\n        // Set field 'variable' of this instance to passed parameter\r\n        function setV( pV ){\r\n            this.variable = pV\r\n        }\r\n\r\n        // Return field 'variable' of this instance\r\n        function getV(){\r\n            return this.variable; // return value can be of any type\r\n        }\r\n    }\r\n    var inst = ExampleClass();\r\n    print(inst.getV()); // -> default value\r\n    inst.setV(\"new value\");\r\n    print(inst.getV()); // -> new value\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"inserting-properties-into-classes",children:"Inserting Properties Into Classes"}),"\n",(0,r.jsxs)(n.p,{children:["It's possible to insert more properties into a class at runtime. To\r\nachieve this, use the ",(0,r.jsx)(n.code,{children:"<-"})," operator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// Using ``ExampleClass`` and ``exampleObject`` from example above\r\nExampleClass.newProperty <- "New property in class"\r\n// The value of the new index may be of any type.\r\nExampleClass.newFunc <- function(){return "Function return value";}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.div,{children:(0,r.jsx)(n.p,{children:"Note"})}),(0,r.jsxs)(n.p,{children:["It is not possible to insert new fields into an instance or a class\r\n",(0,r.jsx)(n.em,{children:"after instantiation"})]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'var ExampleErrorClass;\r\n\r\nfunc(){\r\n    class ExampleErrorClass {};\r\n    var eInst = ExampleErrorClass()\r\n    eInst.e <- "Instance error value"; // Asserts error: class instances do not support the new slot operator\r\n    ExampleErrorClass.e <- "Class error value"; // Fails because an instance of class ExampleErrorClass has already been created. Asserts error: trying to modify a class that has already been instantiated\r\n}\n'})})]}),"\n",(0,r.jsxs)(n.p,{children:["Inserting functions is also possible using the ",(0,r.jsx)(n.code,{children:"::"})," operator"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"function ExampleClass::AddOne( var param /* parameters have to be var */ ){ return expect int( param ) + 1 }\r\nvar e = ExampleClass()\r\nprint( expect int( e.AddOne( 1 ) ) ) // prints 2\n"})}),"\n",(0,r.jsx)(n.p,{children:"This allows mods to extend functionality of classes declared in the base\r\ngame and other mods that have already been loaded."}),"\n",(0,r.jsx)(n.p,{children:"For example, extending functionality of the CPlayer class might look\r\nlike this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'global function InitCPlayerInsert\r\n\r\nvoid function InitCPlayerInsert()\r\n{\r\n        CPlayer.afkCount <- 0 // Insert new property into the CPlayer class\r\n        CPlayer.maxAFKCount <- 3\r\n        function CPlayer::AFK(){ // Kick a player when they are afk multiple times in a match\r\n                if ( this.afkCount >= this.maxAFKCount )\r\n                        ClientCommand( this, "disconnect You have been AFK too often in a match")\r\n                else\r\n                {\r\n                        this.afkCount++\r\n                        SendHudMessage( this, format( "You are AFK!\\nYou will get kicked after %i more violations", this.maxAFKCount - this.afkCount ), -1, 0.4, 255, 255, 255, 0, 0.5, 5, 0.9 )\r\n                }\r\n        }\r\n\r\n        // To trigger the method, do GetPlayerArray()[0].AFK()\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This will allow scripts to run the ",(0,r.jsx)(n.code,{children:"AFK"})," method on CPlayer entities,\r\nwhich will kick a player after 3"]}),"\n",(0,r.jsxs)(n.p,{children:["Make sure to load this script ",(0,r.jsx)(n.strong,{children:"after"})," the class has been declared and\r\n",(0,r.jsx)(n.strong,{children:"before"})," it's instantiated!"]}),"\n",(0,r.jsx)(n.p,{children:"Note that any properties added to classes don't apply to other classes\r\nthat are inherited from a modified class."}),"\n",(0,r.jsx)(n.h2,{id:"instantiating-objects",children:"Instantiating Objects"}),"\n",(0,r.jsx)(n.p,{children:"To create an instance, do:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"class ExampleClass {\r\n    property = null\r\n    constructor( var parameter ) {\r\n        this.property = expect int(parameter);\r\n    }\r\n}\r\n\r\nvar exampleObject = ExampleClass(1);\r\nint n = exampleObject.property // n = 1\r\nexampleObject.property++;\r\nn = exampleObject.property // n = 2\n"})}),"\n",(0,r.jsx)(n.p,{children:"It's also possible to create an instance without calling the\r\nconstructor."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"// Using 'ExampleClass' from previous examples\r\nvar e = ExampleClass.instance()\r\ne.constructor(1) // Constructor is a normal function so you can call it manually.\n"})}),"\n",(0,r.jsx)(n.p,{children:"Like the example above shows you can manipulate properties of a class\r\ndirectly. There is no way to make a private property."}),"\n",(0,r.jsxs)(n.p,{children:["Methods from a class can be accessed without an instance. Note that the\r\nclass itself doesn't have a reference to itself, meaning that the\r\n",(0,r.jsx)(n.code,{children:"this"})," keyword refers to the root table."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var class = ExampleClass\r\nvar instance = class.constructor()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"cloning-instances",children:"Cloning Instances"}),"\n",(0,r.jsx)(n.p,{children:"Unlike other types, passing an object does not pass a copy of the\r\nobject, but a reference to itself. This means that any modifications\r\ninside of a function are applied to the original object."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'void function initClass(){\r\n    class Container {\r\n        content = null\r\n        constructor ( var pString ) {\r\n            this.content = expect string(pString);\r\n        }\r\n    }\r\n    var con = Container("original string")\r\n    manipulateContainer( con )\r\n    print(con.content) // -> manipulated string\r\n}\r\n\r\nvoid function manipulateContainer( var con ){\r\n    con.content = "manipulated string";\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can avoid this by using cloned objects. Use the ",(0,r.jsx)(n.code,{children:"clone"})," keyword to\r\ncreate a copy of an object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// Assumes the \'Container\' class from the previous example has already been declared\r\nvoid function initClass(){\r\n    var originalObj = Container("original string")\r\n    var clonedObj = clone originalObj\r\n    manipulateContainer( clonedObj )\r\n    printt(orignalObj.content, clonedObj.content) // -> original string, manipulated string\r\n}\r\n\r\nvoid function manipulateContainer( var con ){\r\n    con.content = "manipulated string";\r\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"namespaces",children:"Emulating Namespaces"}),"\n",(0,r.jsx)(n.p,{children:"Instead of declaring classes as a global var, you can use other types\r\nsuch as tables to hold multiple class objects that emulate the behaviour\r\nof namespaces to a certain extend."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"global table<string, var> fakeNamespace = {\r\n        class1 = null,\r\n        class2 = null\r\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"This allows you to group classes together in a single global variable."}),"\n",(0,r.jsx)(n.p,{children:"You can use the classes inside of the table like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// Create a class object in field\r\nclass fakeNamespace.class1 { constructor(){ print("constructing instance of class1") } }\r\nclass fakeNamespace.class2 { constructor(){ print("constructing instance of class2") } }\r\n\r\n// Access class object in field\r\nvar c1 = fakeNamespace.class1()\r\nvar c2 = fakeNamespace.class2()\r\n\r\n// Insert functions into class object in field\r\nfakeNamespace.class1.testfunc <- var function(){ print( "inserted function in class1" ) }\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can also declare classes in an array:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'array<var> classes // This has to be at file level\r\n\r\n// This has to be inside of a function:\r\nclasses.append( class { constructor(){ print( "inline constructor" ) } )\r\nvar instance = classes[0]()\n'})}),"\n",(0,r.jsx)(n.p,{children:"And in a similar fashion in structs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'struct {\r\n        var class1 = null\r\n        var class2 = null\r\n} classes // This has to be at file level\r\n\r\n// This has to be inside of a function:\r\nclasses.class1 = class { constructor(){ print( "inline constructor" ) } )\r\nclasses.class2 = class { constructor(){ print( "inline constructor" ) } )\r\nvar c1 = classes.class1()\r\nvar c2 = classes.class2()\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.div,{children:(0,r.jsx)(n.p,{children:"Warning"})}),(0,r.jsxs)(n.p,{children:["Respawn's fork doesn't appear to support inheritance. Using the\r\n",(0,r.jsx)(n.code,{children:"extend"})," keyword won't compile."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"class Child extends Parent{}\n"})})]}),"\n",(0,r.jsxs)(n.p,{children:["Make sure you check out the squirrel documentation on\r\n",(0,r.jsx)(n.a,{href:"http://www.squirrel-lang.org/squirreldoc/reference/language/classes.html",children:"classes"}),"\r\nand built in ",(0,r.jsx)(n.a,{href:"http://www.squirrel-lang.org/squirreldoc/reference/language/builtin_functions.html#class-instance",children:"class\r\ninstance"}),"\r\nmethods for more information."]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var r=s(6540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);