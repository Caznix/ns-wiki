"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[4869],{1479:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=r(4848),a=r(8453);const s={},i="DamageInfo",o={id:"reference/respawn/native_server/damageinfo",title:"DamageInfo",description:"DamageInfos are variables holding information about damage inflicted on",source:"@site/docs/reference/respawn/native_server/damageinfo.md",sourceDirName:"reference/respawn/native_server",slug:"/reference/respawn/native_server/damageinfo",permalink:"/ns-wiki/docs/reference/respawn/native_server/damageinfo",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/reference/respawn/native_server/damageinfo.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DamageDef",permalink:"/ns-wiki/docs/reference/respawn/native_server/damagedef"},next:{title:"DataTables",permalink:"/ns-wiki/docs/reference/respawn/native_server/datatables"}},d={},l=[{value:"Getters",id:"getters",level:2},{value:"Setters",id:"setters",level:2},{value:"Utils",id:"utils",level:2},{value:"Damage Flags",id:"damage-flag-overview",level:2}];function c(e){const n={admonition:"admonition",blockquote:"blockquote",code:"code",div:"div",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"damageinfo",children:"DamageInfo"})}),"\n",(0,t.jsx)(n.p,{children:"DamageInfos are variables holding information about damage inflicted on\r\nan entity."}),"\n",(0,t.jsx)(n.p,{children:"Because damageInfo instances are implemented as userdata they can't be\r\ntyped."}),"\n",(0,t.jsx)(n.h2,{id:"getters",children:"Getters"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Returns the attacker of this damageInfo"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Returns the inflictor of this damageInfo"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Returns the weapon that dealt this damage"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Get if this damage is supposed to kill the victim regardless of health"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Get the inflicted damage"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Returns the position where the damage originated. Usually this is the\r\nbarrel attachment of the weapon that inflicted the damage."}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"damageinfo-getdamagetype",children:"DamageInfo-GetDamageType"}),"\n",(0,t.jsx)(n.h1,{id:"damage-source-id-overview",children:"damage-source-id-overview"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Returns the ",(0,t.jsx)(n.code,{children:"eDamageSourceId"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"damageSourceId"})," is an ",(0,t.jsx)(n.code,{children:"int"})," that references an ",(0,t.jsx)(n.code,{children:"enum"})," and can be used\r\nto identify what source damage came from."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"damageSourceId"})," is mostly found as an argument in some kill and\r\ndamage related functions. Respawn has created a function that will\r\nattempt to localise the damageSourceId inputed. To add your own custom\r\n",(0,t.jsx)(n.code,{children:"damageSourceID"})," , see:\r\n",(0,t.jsx)(n.code,{children:"../../northstar/customdamagesources"})]}),"\n",(0,t.jsxs)(n.p,{children:["Other useful functions can be found in the ",(0,t.jsx)(n.code,{children:"damageinfo"})," section of\r\nthis page and in ",(0,t.jsx)(n.code,{children:"entities"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"GetObitFromdamageSourceId"})," is a global function that attempts to\r\nlocalise the ",(0,t.jsx)(n.code,{children:"damageSourceId"})," inputed, if it cannot get a localised\r\nstring it will simply return the localisation string of the source."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Get the distance from where the bullet/projectile was fired."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"If it's a radius damage, gives the distance from the center of the\r\nblast. Otherwise defaults to zero."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Get damage force vector."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Checks if code is allowing this entity to ragdoll on death"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Get all () flags. ",(0,t.jsx)(n.em,{children:"damageflag used to be here"})]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:['"Returns true if contains all given () flags. ',(0,t.jsx)(n.em,{children:"and here too"})]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Returns weapon name, even if weapon entity is gone"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Returns if stats should be recorded for damage weapon"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"setters",children:"Setters"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Sets whether this damage should force a kill"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Set the amount of damage"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Overrides the damage type that was set by script when firing the\r\nweapon."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Add a damage flag."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Remove damage flag."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Sets the damage source identifier."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Set what death (anim) package to use if this damage kills the guy."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Set damage force vector"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Set which direction the target should flinch in."}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Add a () flag. ",(0,t.jsx)(n.em,{children:"here aswell"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"utils",children:"Utils"}),"\n",(0,t.jsx)(n.p,{children:"TODO: fix helpers section, its been removed for redundancy"}),"\n",(0,t.jsx)(n.h2,{id:"damage-flag-overview",children:"Damage Flags"}),"\n",(0,t.jsxs)(n.p,{children:["You can get a bitflag of all damage types used with\r\n",(0,t.jsx)(n.code,{children:"DamageInfo_GetDamageType <DamageInfo-GetDamageType>"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"dropdown"}),"\n",(0,t.jsx)(n.admonition,{title:"TODO",type:"info",children:(0,t.jsx)(n.p,{children:"Turn this into a real dropdown"})}),"\n",(0,t.jsx)(n.p,{children:"Damage flags"}),"\n",(0,t.jsx)(n.p,{children:"List of all Damage flags"}),"\n",(0,t.jsx)(n.p,{children:"Variable name           Value"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"DF_GIB                  1\r\nDF_DISSOLVE             2\r\nDF_INSTANT              3\r\nDF_NO_SELF_DAMAGE       4\r\nDF_IMPACT               5\r\nDF_BYPASS_SHIELD        6\r\nDF_RAGDOLL              7\r\nDF_TITAN_STEP           8\r\nDF_RADIUS_DAMAGE        9\r\nDF_ELECTRICAL           10\r\nDF_BULLET               11\r\nDF_EXPLOSION            12\r\nDF_MELEE                13\r\nDF_NO_INDICATOR         14\r\nDF_KNOCK_BACK           15\r\nDF_STOPS_TITAN_REGEN    16\r\nDF_DISMEMBERMENT        17\r\nDF_MAX_RANGE            18\r\nDF_SHIELD_DAMAGE        19\r\nDF_CRITICAL             20\r\nDF_SKIP_DAMAGE_PROT     21\r\nDF_HEADSHOT             22\r\nDF_VORTEX_REFIRE        23\r\nDF_RODEO                24\r\nDF_BURN_CARD_WEAPON     25\r\nDF_KILLSHOT             26\r\nDF_SHOTGUN              27\r\nDF_SKIPS_DOOMED_STATE   28\r\nDF_DOOMED_HEALTH_LOSS   29\r\nDF_DOOM_PROTECTED       30\r\nDF_DOOM_FATALITY        31\r\nDF_NO_HITBEEP           32\r\n:::"}),"\n",(0,t.jsxs)(n.div,{children:[(0,t.jsx)(n.p,{children:"Damage types"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"global enum damageTypes\r\n{\r\n    gibs = (DF_GIB)\r\n    largeCaliberExp  = (DF_BULLET | DF_GIB | DF_EXPLOSION)\r\n    gibBullet = (DF_BULLET | DF_GIB)\r\n    instant = (DF_INSTANT)\r\n    dissolve = (DF_DISSOLVE)\r\n    projectileImpact = (DF_GIB)\r\n    pinkMist = (DF_GIB) //If updated from DF_GIB, change the DF_GIB in Arc Cannon to match.\r\n    ragdoll = (DF_RAGDOLL)\r\n    titanStepCrush = (DF_TITAN_STEP)\r\n    arcCannon = (DF_DISSOLVE | DF_GIB | DF_ELECTRICAL )\r\n    electric = (DF_ELECTRICAL) //Only increases Vortex Shield decay for bullet weapons atm.\r\n    explosive = (DF_RAGDOLL | DF_EXPLOSION )\r\n    bullet = (DF_BULLET)\r\n    largeCaliber = (DF_BULLET | DF_KNOCK_BACK)\r\n    shotgun = (DF_BULLET | DF_GIB | DF_SHOTGUN )\r\n    titanMelee = (DF_MELEE | DF_RAGDOLL)\r\n    titanBerserkerMelee = (DF_MELEE | DF_RAGDOLL)\r\n    titanEjectExplosion = (DF_GIB | DF_EXPLOSION)\r\n    dissolveForce = (DF_DISSOLVE | DF_KNOCK_BACK | DF_EXPLOSION)\r\n    rodeoBatteryRemoval = (DF_RODEO | DF_EXPLOSION | DF_STOPS_TITAN_REGEN )\r\n}\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);