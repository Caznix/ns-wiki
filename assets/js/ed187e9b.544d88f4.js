"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[3402],{3024:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>R,contentTitle:()=>_,default:()=>A,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var t=n(4848),o=n(8453);const a={},_="Rui",i={id:"reference/respawn/rui",title:"Rui",description:"Functions for creating a rui, and methods of the rui object",source:"@site/docs/reference/respawn/rui.md",sourceDirName:"reference/respawn",slug:"/reference/respawn/rui",permalink:"/ns-wiki/docs/reference/respawn/rui",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/reference/respawn/rui.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Weapon Utilities",permalink:"/ns-wiki/docs/reference/respawn/native_server/weapons"},next:{title:"Titan",permalink:"/ns-wiki/docs/reference/respawn/titan"}},R={},s=[];function c(e){const r={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"rui",children:"Rui"})}),"\n",(0,t.jsx)(r.p,{children:"Functions for creating a rui, and methods of the rui object"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'// To create one, do:\r\nrui = RuiCreate( $"ui/assetname.rpak", topology, drawGroup, sortKey ) // sortkey = int to prevent z-fighting. higher -> in front\r\n\r\n// You can then manipulate it using the following:\r\nRuiSetDrawGroup( rui, drawGroup )\r\nRuiSetString( rui, argName, value )\r\nRuiSetBool( rui, argName, value )\r\nRuiSetInt( rui, argName, value )\r\nRuiSetFloat( rui, argName, value )\r\nRuiSetFloat2( rui, argName, value )  // value is a vector; only x and y are used\r\nRuiSetFloat3( rui, argName, value )\r\nRuiSetColorAlpha( rui, argName, color, alpha )  // color is a vector\r\n\r\n// To destroy it, just do:\r\nRuiDestroy( rui )\n'})}),"\n",(0,t.jsx)(r.p,{children:"Drawgroups"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"RUI_DRAW_WORLD\r\nRUI_DRAW_HUD\r\nRUI_DRAW_COCKPIT\r\nRUI_DRAW_NONE\n"})}),"\n",(0,t.jsx)(r.p,{children:"Trackers"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"// VECTOR TYPES\r\nRUI_TRACK_ABSORIGIN_FOLLOW                   // Create at absorigin, and update to follow the entity\r\nRUI_TRACK_POINT_FOLLOW                       // Create on attachment point, and update to follow the entity\r\nRUI_TRACK_OVERHEAD_FOLLOW                    // Create at the top of the entity's bbox\r\nRUI_TRACK_EYEANGLES_FOLLOW\r\n\r\n// FLOAT TYPES\r\nRUI_TRACK_HEALTH                   // Health as fraction from 0 to 1\r\nRUI_TRACK_FRIENDLINESS                   // 0 if ent is enemy, 1 if it's friendly\r\nRUI_TRACK_PLAYER_SUIT_POWER                   // Player's suit power from 0 to 1\r\nRUI_TRACK_PLAYER_GRAPPLE_POWER                   // Player's grapple power from 0 to 1\r\nRUI_TRACK_PLAYER_SHARED_ENERGY                   // Players shared energy value\r\nRUI_TRACK_WEAPON_CHARGE_FRACTION                   // Weapon charge as fraction from 0 to 1\r\nRUI_TRACK_WEAPON_SMART_AMMO_LOCK_FRACTION                   // Smart ammo weapon lock fraction from 0 to N\r\nRUI_TRACK_WEAPON_READY_TO_FIRE_FRACTION                   // Weapon cooldown as fraction from 0 to 1\r\nRUI_TRACK_WEAPON_RELOAD_FRACTION                   // Weapon reloading as fraction from 0 to 1\r\nRUI_TRACK_WEAPON_DRYFIRE_FRACTION                   \r\nRUI_TRACK_WEAPON_CLIP_AMMO_FRACTION                   // Weapon clip ammo as fraction from 0 to 1\r\nRUI_TRACK_WEAPON_REMAINING_AMMO_FRACTION                   // Weapon remaining ammo as fraction from 0 to 1\r\nRUI_TRACK_WEAPON_CLIP_AMMO_MAX                   \r\nRUI_TRACK_WEAPON_STOCKPILE_AMMO_MAX                   \r\nRUI_TRACK_WEAPON_LIFETIME_SHOTS                   \r\nRUI_TRACK_WEAPON_AMMO_REGEN_RATE                   \r\nRUI_TRACK_BOOST_METER_FRACTION                   // Player boost meter as fraction from 0 to 1\r\nRUI_TRACK_GLIDE_METER_FRACTION                   // Player glide meter as fraction from 0 to 1\r\nRUI_TRACK_SHIELD_FRACTION                   // Shield health as fraction from 0 to 1\r\nRUI_TRACK_STATUS_EFFECT_SEVERITY                   // Status effect severity as fraction from 0 to 1; attachmentIndex used as status effect index\r\nRUI_TRACK_SCRIPT_NETWORK_VAR                   // Value of a script network variable (use GetNetworkedVariableIndex())\r\nRUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL                   // Value of a script network variable without an entity (use GetNetworkedVariableIndex())\r\nRUI_TRACK_SCRIPT_NETWORK_VAR_LOCAL_VIEW_PLAYER                   // Value of a script network variable on the local view player (changes automatically during kill replay) (use GetNetworkedVariableIndex())\r\nRUI_TRACK_FRIENDLY_TEAM_SCORE                   \r\nRUI_TRACK_FRIENDLY_TEAM_ROUND_SCORE                   // The value of score2 for friendlies\r\nRUI_TRACK_ENEMY_TEAM_SCORE                   \r\nRUI_TRACK_ENEMY_TEAM_ROUND_SCORE                   // The value of score2 for enemies\r\nRUI_TRACK_MINIMAP_SCALE                   \r\nRUI_TRACK_SOUND_METER                   // Sound meter as fraction from 0 to 1.\r\n\r\n// INT TYPES\r\nRUI_TRACK_MINIMAP_FLAGS,\r\nRUI_TRACK_MINIMAP_CUSTOM_STATE,\r\nRUI_TRACK_TEAM_RELATION_VIEWPLAYER,                   // ENEMY: -1, NEUTRAL: 0, FRIENDLY: 1\r\nRUI_TRACK_TEAM_RELATION_CLIENTPLAYER,                   // ENEMY: -1, NEUTRAL: 0, FRIENDLY: 1\r\nRUI_TRACK_SCRIPT_NETWORK_VAR_INT,                   // Value of a script network variable (use GetNetworkedVariableIndex())\r\nRUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL_INT,                   // Value of a script network variable without an entity (use GetNetworkedVariableIndex())\r\nRUI_TRACK_SCRIPT_NETWORK_VAR_LOCAL_VIEW_PLAYER_INT,                   // Value of a script network variable on the local view player (changes automatically during kill replay) (use GetNetworkedVariableIndex())\r\n\r\n// GAMETIME TYPES\r\nRUI_TRACK_LAST_FIRED_TIME,\r\nRUI_TRACK_MINIMAP_THREAT_SECTOR,\r\n\r\n// IMAGE TYPES\r\nRUI_TRACK_WEAPON_MENU_ICON,\r\nRUI_TRACK_WEAPON_HUD_ICON\n"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"screenSizeX = GetScreenSize()[0]\r\nscreenSizeY = GetScreenSize()[1]\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"value is a vector; only x and y are used"}),"\n"]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"color is a vector"}),"\n"]}),"\n"]})]})}function A(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>_,x:()=>i});var t=n(6540);const o={},a=t.createContext(o);function _(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:_(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);