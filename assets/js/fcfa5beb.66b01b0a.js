"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[7485],{6345:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>o});var i=n(4848),s=n(8453);const t={},a="Pushing Values to the SQVM Stack",c={id:"guides/reversing/squirrelreversing",title:"Pushing Values to the SQVM Stack",description:"Before starting to reverse engineer how to push values to the Squirrel",source:"@site/docs/guides/reversing/squirrelreversing.md",sourceDirName:"guides/reversing",slug:"/guides/reversing/squirrelreversing",permalink:"/ns-wiki/docs/guides/reversing/squirrelreversing",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/guides/reversing/squirrelreversing.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Reverse Engineering Guides",permalink:"/ns-wiki/docs/guides/reversing/"},next:{title:"Scripting tutorials",permalink:"/ns-wiki/docs/guides/scripting/"}},l={},o=[{value:"Setup",id:"setup",level:2},{value:"Understanding native Squirrel Closures",id:"understanding-native-squirrel-closures",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"pushing-values-to-the-sqvm-stack",children:"Pushing Values to the SQVM Stack"})}),"\n",(0,i.jsxs)(r.p,{children:["Before starting to reverse engineer how to push values to the Squirrel\r\nstack, it's recommended to read the ",(0,i.jsx)(r.a,{href:"http://www.squirrel-lang.org/squirreldoc/index.html",children:"Squirrel\r\ndocumentation"}),",\r\nespecially the\r\n",(0,i.jsx)(r.a,{href:"http://www.squirrel-lang.org/squirreldoc/reference/embedding_squirrel.html",children:"Embedding-"}),"\r\nand ",(0,i.jsx)(r.a,{href:"http://www.squirrel-lang.org/squirreldoc/reference/api_reference.html",children:"API\r\nReference"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"A lot of Respawn's fork of Squirrel is very similar to Squirrel3,\r\nespecially the Squirrel API functions."}),"\n",(0,i.jsx)(r.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsxs)(r.p,{children:["Before you can start reverse engineering you need to install software to\r\ndisassemble and decompile the binaries. This guide will use\r\n",(0,i.jsx)(r.a,{href:"https://ghidra-sre.org/",children:"Ghidra"}),", an open source reverse engineering\r\ntool developed by the NSA."]}),"\n",(0,i.jsxs)(r.p,{children:["Since code decompiled by Ghidra is often closer to the raw assembly than\r\nthe original code, you might want to use ",(0,i.jsx)(r.a,{href:"https://hex-rays.com/",children:"IDA"}),"\r\nfor decompilation. Keep in mind that IDA is not open source and the free\r\nversion is lacking a lot of features and only offers a cloud decompiler."]}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Download the latest Ghidra archive from the ",(0,i.jsx)(r.a,{href:"https://github.com/NationalSecurityAgency/ghidra/releases",children:"Github releases\r\npage"}),".\r\nUsually the archive is called like ",(0,i.jsx)(r.code,{children:"ghidra_[version]_PUBLIC_[date]"}),"."]}),"\n",(0,i.jsx)(r.li,{children:"Unzip the archive in a new folder."}),"\n",(0,i.jsxs)(r.li,{children:["Run ",(0,i.jsx)(r.code,{children:"ghidraRun.bat"})," on windows or if you're on Linux make\r\n",(0,i.jsx)(r.code,{children:"ghidraRun"})," executable and run it. On Linux, there's a ",(0,i.jsx)(r.a,{href:"https://flathub.org/apps/org.ghidra_sre.Ghidra",children:"Flatpak\r\nimage"})," available as\r\nwell."]}),"\n",(0,i.jsxs)(r.li,{children:["Create a new project under ",(0,i.jsx)(r.code,{children:"File > New Project"})," and select\r\n",(0,i.jsx)(r.code,{children:"Non-Shared Project"}),", then hit next. Afterwards select a location\r\nfor the project and a name like ",(0,i.jsx)(r.code,{children:"Titanfall2"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Import the binary you want to reverse with ",(0,i.jsx)(r.code,{children:"File > Import File"}),".\r\nThis guide will use ",(0,i.jsx)(r.code,{children:"server.dll"}),", found in your Titanfall2 install\r\ndirectory. Don't change the settings ghidra auto detects when\r\nimporting the file."]}),"\n",(0,i.jsxs)(r.li,{children:["Open ",(0,i.jsx)(r.code,{children:"server.dll"})," in the Ghidra project overview. When Ghidra asks\r\nyou if you want to analyse the file now, click yes. You do not need\r\nto change any analysis settings."]}),"\n",(0,i.jsx)(r.li,{children:"Wait for Ghidra to finish the analysis."}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"understanding-native-squirrel-closures",children:"Understanding native Squirrel Closures"}),"\n",(0,i.jsxs)(r.p,{children:["In vanilla Squirrel you can push values with functions like\r\n",(0,i.jsx)(r.code,{children:"sq_pushbool"}),". Since Respawn changed a lot in the SQVM, you should\r\nexpect these API functions to be different as well."]}),"\n",(0,i.jsxs)(r.p,{children:["To start you'll need a simple Squirrel function that is executing\r\nnative code without any calculations or similar, like ",(0,i.jsx)(r.code,{children:"IsServer"}),", or\r\n",(0,i.jsx)(r.code,{children:"IsClient"}),". These Squirrel functions are registered in native code and\r\nreturn ",(0,i.jsx)(r.code,{children:"true"})," / ",(0,i.jsx)(r.code,{children:"false"})," if the script VM is being ran in the ",(0,i.jsx)(r.code,{children:"SERVER"})," or\r\n",(0,i.jsx)(r.code,{children:"CLIENT"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["You can search for a string in memory with ",(0,i.jsx)(r.code,{children:"Search > Memory"}),". Select\r\n",(0,i.jsx)(r.code,{children:"String"})," as the format you're searching for and enter ",(0,i.jsx)(r.code,{children:"IsServer"})," as the\r\nsearch value."]}),"\n",(0,i.jsxs)(r.p,{children:["The first occurence is at ",(0,i.jsx)(r.code,{children:"server.dll+0x2b44f3"}),". If you wait for the\r\nfunction to be decompiled, you'll see the string in this code:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:'_DAT_181055f60 = "IsServer";\r\n_DAT_181055f68 = "IsServer";\r\n_DAT_181055fb8 = 0;\r\n_DAT_181055f90 = 0;\r\n_DAT_181055f98 = 0;\r\n_DAT_181055fc0 = FUN_18029a630;\r\n_DAT_181055f88 = _DAT_181055f88 & 0xff;\r\n_DAT_181055f70 = ZEXT816(0x1808fa7f8);\r\n_DAT_181055f80 = 0;\r\n_DAT_181055f8c = 0;\r\n_DAT_181055f9c = 6;\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Because the squirrel function executes native code, the callback\r\n",(0,i.jsx)(r.code,{children:"FUN_18029a630"})," is probably where it's located. You can double click\r\nthe reference to decompile the function."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"undefined4 FUN_18029a630(undefined8 param_1)\r\n{\r\n    char cVar1;\r\n    undefined4 uVar2;\r\n\r\n    uVar2 = 1;\r\n    FUN_180003710(param_1,1);\r\n    cVar1 = FUN_18001d840(param_1);\r\n    if (cVar1 != '\\0') {\r\n        uVar2 = 0xffffffff;\r\n    }\r\n    return uVar2;\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["From this you can assume that native closures in squirrel_re still use\r\nthe ",(0,i.jsx)(r.code,{children:"SQRESULT"})," convention, because the closure returns ",(0,i.jsx)(r.code,{children:"-1"})," if\r\n",(0,i.jsx)(r.code,{children:"FUN_18001d840"})," returns ",(0,i.jsx)(r.code,{children:"NULL"}),", which is typically an error and ",(0,i.jsx)(r.code,{children:"1"})," if\r\nnothing happens. It's also obvious that either ",(0,i.jsx)(r.code,{children:"FUN_180003710"})," or\r\n",(0,i.jsx)(r.code,{children:"FUN_18001d840"})," pushes a boolean to the stack. It's probably\r\n",(0,i.jsx)(r.code,{children:"FUN_180003710"})," because it takes an extra parameter but you can check\r\n",(0,i.jsx)(r.code,{children:"IsClient"})," at ",(0,i.jsx)(r.code,{children:"server.dll+0x29a4d0"})," as a reference."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"undefined4 FUN_18029a4d0(undefined8 param_1)\r\n{\r\n    char cVar1;\r\n    undefined4 uVar2;\r\n\r\n    FUN_180003710(param_1,0);\r\n    cVar1 = FUN_18001d840(param_1);\r\n    uVar2 = 1;\r\n    if (cVar1 != '\\0') {\r\n        uVar2 = 0xffffffff;\r\n    }\r\n    return uVar2;\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["This is virtually the same, except that ",(0,i.jsx)(r.code,{children:"FUN_180003710"})," is being called\r\nwith a ",(0,i.jsx)(r.code,{children:"0"}),". This makes it pretty obvious that ",(0,i.jsx)(r.code,{children:"FUN_180003710"})," is the\r\nequivalent of ",(0,i.jsx)(r.code,{children:"sq_pushbool"}),". Decompile the function, then right click\r\nthe function and select ",(0,i.jsx)(r.code,{children:"Edit Function Signature"}),". Right now the\r\nsignature looks like this:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"void FUN_180003710(longlong param_1, int param_2)\n"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"param_1"})," has to be a pointer to the Squirrel VM, because a pointer on\r\n64x systems is 8 bytes long (the same as ",(0,i.jsx)(r.code,{children:"longlong"}),") and the\r\n",(0,i.jsx)(r.code,{children:"HSquirrelVM"})," struct is larger than 8 bytes."]}),"\n",(0,i.jsxs)(r.p,{children:["The second parameter has to be the value that will be pushed to the VM\r\nas a boolean, since it was ",(0,i.jsx)(r.code,{children:"1"})," in ",(0,i.jsx)(r.code,{children:"IsServer"})," (which always returns\r\n",(0,i.jsx)(r.code,{children:"true"}),") and ",(0,i.jsx)(r.code,{children:"0"})," in ",(0,i.jsx)(r.code,{children:"IsClient"})," which always returns ",(0,i.jsx)(r.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["You can change the signature now to this, to make code using the\r\nfunction more readable. Because ",(0,i.jsx)(r.code,{children:"HSquirrelVM"})," isn't defined yet, the\r\ntype needs to stay ",(0,i.jsx)(r.code,{children:"longlong"})," for now."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"void sq_pushbool(longlong sqvm, int value)\n"})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>c});var i=n(6540);const s={},t=i.createContext(s);function a(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);