"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[2717],{5680:(e,r,a)=>{a.d(r,{xA:()=>p,yg:()=>g});var t=a(6540);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function i(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?i(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function o(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=t.createContext({}),y=function(e){var r=t.useContext(s),a=r;return e&&(a="function"==typeof e?e(r):l(l({},r),e)),a},p=function(e){var r=y(e.components);return t.createElement(s.Provider,{value:r},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=y(a),u=n,g=c["".concat(s,".").concat(u)]||c[u]||d[u]||i;return a?t.createElement(g,l(l({ref:r},p),{},{components:a})):t.createElement(g,l({ref:r},p))}));function g(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o[c]="string"==typeof e?e:n,l[1]=o;for(var y=2;y<i;y++)l[y]=a[y];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7334:(e,r,a)=>{a.r(r),a.d(r,{contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var t=a(8168),n=(a(6540),a(5680));const i={},l="Arrays",o={unversionedId:"source/squirrel/types/arrays",id:"source/squirrel/types/arrays",isDocsHomePage:!1,title:"Arrays",description:"Unlike the data types previously covered, arrays can hold multiple",source:"@site/docs/source/squirrel/types/arrays.md",sourceDirName:"source/squirrel/types",slug:"/source/squirrel/types/arrays",permalink:"/ns-wiki/docs/source/squirrel/types/arrays",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/source/squirrel/types/arrays.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Statements",permalink:"/ns-wiki/docs/source/squirrel/statements/index"},next:{title:"Booleans",permalink:"/ns-wiki/docs/source/squirrel/types/booleans"}},s=[{value:"Literals",id:"literals",children:[]},{value:"Primitive Arrays",id:"primitive-arrays",children:[]},{value:"Complex Arrays",id:"complex-arrays",children:[]},{value:"Static Arrays",id:"static-arrays",children:[]},{value:"Compatability",id:"compatability",children:[]}],y={toc:s},p="wrapper";function c(e){let{components:r,...a}=e;return(0,n.yg)(p,(0,t.A)({},y,a,{components:r,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"arrays"},"Arrays"),(0,n.yg)("p",null,"Unlike the data types previously covered, arrays can hold multiple\nvalues."),(0,n.yg)("p",null,"Their size is dynamic and you can add and remove elements at will."),(0,n.yg)("p",null,"The type keyword is ",(0,n.yg)("inlineCode",{parentName:"p"},"array"),"."),(0,n.yg)("p",null,"By default, uninitialized arrays are empty."),(0,n.yg)("p",null,"Arrays are always zero indexed with ",(0,n.yg)("inlineCode",{parentName:"p"},"[ <expression> ]"),". The indexes are\nalways numbers. If you index an array with a key that does not exist, an\nerror will get thrown."),(0,n.yg)("h2",{id:"literals"},"Literals"),(0,n.yg)("p",null,"Array literals are a comma or newline seperated sequence of expressions\ndelimited by an opening bracket ",(0,n.yg)("inlineCode",{parentName:"p"},"[")," and a corresponding closing bracket\n",(0,n.yg)("inlineCode",{parentName:"p"},"]"),"."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"array a = [ 1, 2, 3 ]\narray b = [\n  1\n  2\n  3\n]\n")),(0,n.yg)("h2",{id:"primitive-arrays"},"Primitive Arrays"),(0,n.yg)("p",null,"Primitive arrays are arrays that can hold any value. Their content is\ntherefore untyped."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},'array a\na.append( 1 ) // add a number\na.append( "str" ) // add a string\na.append( [] ) // add an empty array\n\n// because the content type of the array is not defined, all content will be var\nvar n = a[0]\nvar str = a[1]\nvar arr = a[2]\n')),(0,n.yg)("h2",{id:"complex-arrays"},"Complex Arrays"),(0,n.yg)("p",null,"Complex Arrays are arrays that can only hold values that have a specific\ntype."),(0,n.yg)("p",null,"The content type needs to be specified within ",(0,n.yg)("inlineCode",{parentName:"p"},"<")," and ",(0,n.yg)("inlineCode",{parentName:"p"},">")," brackets."),(0,n.yg)("p",null,"There is no way to define a complex array that holds multiple different\ntypes."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},'array<int> a\na.append( 1 )\na.append( 0x2 )\na.append( "3" ) // this will throw a compile error because the array can only contain integers\n')),(0,n.yg)("h2",{id:"static-arrays"},"Static Arrays"),(0,n.yg)("p",null,"Static arrays are a different kind of complex type. Like complex arrays\nthey can only hold values of one specific type. However unlike complex\narrays static arrays have a set length that cannot be changed."),(0,n.yg)("p",null,"The typing for static arrays is ",(0,n.yg)("inlineCode",{parentName:"p"},"type[size]"),", where ",(0,n.yg)("inlineCode",{parentName:"p"},"type")," is the\ncontent type of the array and ",(0,n.yg)("inlineCode",{parentName:"p"},"size")," is an ",(0,n.yg)("strong",{parentName:"p"},"integer literal")," of the\ntotal size of the array."),(0,n.yg)("p",null,"Uninitialized static arrays have their size by default and all content\nvalues are the ",(0,n.yg)("strong",{parentName:"p"},"default values of their content type"),"."),(0,n.yg)("p",null,"You can index and change content values like with regular arrays."),(0,n.yg)("p",null,"When initializing a static array you can omit all values after your\ninitial values with ",(0,n.yg)("inlineCode",{parentName:"p"},"..."),". All following values will get default\ninitialized with the content\\'s default."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"float[3] v1\nfloat[8] v2 = [ 1.0, 2.0, ... ]\nv2[2] = 3.0\n\nprint( v1[0] ) // notice how no value needs to be pushed into the vector\nprint( v2[7] ) // will print 0.0 because it has been default initialized\n")),(0,n.yg)("h2",{id:"compatability"},"Compatability"),(0,n.yg)("p",null,"It is not possible to cast or convert an array between their different\nforms. For example you can\\'t assign an ",(0,n.yg)("inlineCode",{parentName:"p"},"array<string>")," variable to a\ndifferent variable that has the type ",(0,n.yg)("inlineCode",{parentName:"p"},"array")," or the other way around."),(0,n.yg)("p",null,"Instead you need to create an entirely new array with the target type or\nadd all contents manually."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},'array<string> orig = [ "a", "b", "c" ]\narray target\n\ntarget.clear() // clear all contents from the target array\nforeach( v in orig ) // iterate over the original array and add all contents to the target array\n  target.append( v )\n')),(0,n.yg)("p",null,"Furthermore it\\'s important to understand that ",(0,n.yg)("inlineCode",{parentName:"p"},"array")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"array<var>"),"\nbehave the same but ",(0,n.yg)("strong",{parentName:"p"},"are not identical"),"."))}c.isMDXComponent=!0}}]);