"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[6639],{9076:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>a,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var r=t(4848),i=t(8453);const o={},s="Creating a custom Menu",u={id:"guides/scripting/custommenus",title:"Creating a custom Menu",description:"This tutorial will explain how to create a mod that adds a new menu",source:"@site/docs/guides/scripting/custommenus.md",sourceDirName:"guides/scripting",slug:"/guides/scripting/custommenus",permalink:"/ns-wiki/docs/guides/scripting/custommenus",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/guides/scripting/custommenus.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scripting tutorials",permalink:"/ns-wiki/docs/guides/scripting/"},next:{title:"Creating gamemodes",permalink:"/ns-wiki/docs/guides/scripting/gamemodemods"}},d={},l=[{value:"Setup",id:"setup",level:2},{value:"Minimal Example",id:"minimal-example",level:2},{value:"Adding a footer to the Main menu",id:"adding-a-footer-to-the-main-menu",level:2},{value:"Scripting Menu Logic",id:"scripting-menu-logic",level:2},{value:"Adding a Counter",id:"adding-a-counter",level:3},{value:"Adding a Reset Button",id:"adding-a-reset-button",level:3},{value:"Resetting the Counter when the Menu is closed",id:"resetting-the-counter-when-the-menu-is-closed",level:3}];function c(e){const n={code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"creating-a-custom-menu",children:"Creating a custom Menu"})}),"\n",(0,r.jsx)(n.p,{children:"This tutorial will explain how to create a mod that adds a new menu\r\nthat's viewable by a footer in the main menu."}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsxs)(n.p,{children:["First, create a new folder with this ",(0,r.jsx)(n.code,{children:"mod.json"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\r\n    "Name": "CustomMenuTutorial",\r\n    "Description": "Custom menu tutorial",\r\n    "LoadPriority": 1,\r\n    "Scripts": [\r\n        {\r\n            "Path": "ui/custom_menu.nut",\r\n            "RunOn": "UI",\r\n            "UICallback": {\r\n                "Before": "AddCustomMenu"\r\n            }\r\n        }\r\n    ]\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then create ",(0,r.jsx)(n.code,{children:"custom_menu.nut"})," in ",(0,r.jsx)(n.code,{children:"./mod/scripts/vscripts/ui"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"minimal-example",children:"Minimal Example"}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"AddCustomMenu"})," in ",(0,r.jsx)(n.code,{children:"custom_menu.nut"})," like this and make it\r\nglobal:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'global function AddCustomMenu\r\n\r\nvoid function AddCustomMenu()\r\n{\r\n    AddMenu( "CustomMenu", $"resource/ui/menus/custommenu.menu", CustomMenu_Init )\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"AddCustomMenu"})," will get called when the UI vm is initializing and\r\ninstantiate your menu. You can access your menu with\r\n",(0,r.jsx)(n.code,{children:'GetMenu( "CustomMenu" )'})," after it has been initialized."]}),"\n",(0,r.jsxs)(n.p,{children:["Next, create the file that defines the layout of your menu. It's\r\nalready referenced in the above code at\r\n",(0,r.jsx)(n.code,{children:'$"resource/ui/menus/custommenu.menu"'}),". Create the file\r\n",(0,r.jsx)(n.code,{children:"./mod/resource/ui/menus/custommenu.menu"})," and paste this code in it."]}),"\n",(0,r.jsxs)(n.div,{children:[(0,r.jsx)(n.p,{children:".menu configuration"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'resource/ui/menus/custommenu.menu\r\n{\r\n    menu\r\n    {\r\n        ControlName Frame\r\n        xpos 0\r\n        ypos 0\r\n        zpos 3\r\n        wide f0\r\n        tall f0\r\n        autoResize 0\r\n        visible 1\r\n        enabled 1\r\n        pinCorner 0\r\n        PaintBackgroundType 0\r\n        infocus_bgcolor_override "0 0 0 0"\r\n        outoffocus_bgcolor_override "0 0 0 0"\r\n\r\n        Vignette // Darkened frame edges\r\n        {\r\n            ControlName ImagePanel\r\n            InheritProperties MenuVignette\r\n        }\r\n\r\n        Title // The title of this menu\r\n        {\r\n            ControlName Label\r\n            InheritProperties MenuTitle\r\n            labelText "#CUSTOM_MENU_TITLE"\r\n        }\r\n\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/// Content\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        SomeLabel // A label that is placed in the middle of the screen\r\n        {\r\n            ControlName Label\r\n\r\n            labelText "Some Label"\r\n\r\n            auto_wide_tocontents 1 // Set width automatically relative to the label content\r\n\r\n            xpos %50\r\n            ypos %50\r\n        }\r\n\r\n        SomeButton // A button that is placed directly beneath the label\r\n        {\r\n            ControlName RuiButton\r\n            InheritProperties RuiSmallButton\r\n\r\n            tall 50\r\n            wide 250\r\n\r\n            labelText "Some Button"\r\n            textAlignment center\r\n\r\n            pin_to_sibling SomeLabel\r\n            pin_corner_to_sibling TOP\r\n            pin_to_sibling_corner BOTTOM\r\n        }\r\n\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/// Footer\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        FooterButtons // Allow adding footers to this menu\r\n        {\r\n            ControlName         CNestedPanel\r\n            InheritProperties   FooterButtons\r\n        }\r\n    }\r\n}\n'})})]}),"\n",(0,r.jsxs)(n.p,{children:["Now you'll need to define ",(0,r.jsx)(n.code,{children:"CustomMenu_Init"}),". This is the function\r\npreviously defined that contains all initializations needed for this\r\nmenu."]}),"\n",(0,r.jsx)(n.p,{children:"First, create an instantiated struct for variables that should be\r\navailable in the scope of your custom menu script."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"struct {\r\n    var menu\r\n} file\n"})}),"\n",(0,r.jsxs)(n.p,{children:["At the moment, this struct can only contain your menu. To set it, edit\r\n",(0,r.jsx)(n.code,{children:"AddCustomMenu"})," like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:'void function AddCustomMenu()\r\n{\r\n   AddMenu( "CustomMenu", $"resource/ui/menus/custommenu.menu", CustomMenu_Init )\r\n+   file.menu = GetMenu( "CustomMenu" )\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now, define ",(0,r.jsx)(n.code,{children:"CustomMenu_Init"}),". It doesn't need to be global."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'void function CustomMenu_Init()\r\n{\r\n    AddMenuFooterOption( file.menu, BUTTON_B, "#B_BUTTON_BACK", "#BACK" )\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This adds a footer to your menu, that allows the user to navigate back."}),"\n",(0,r.jsx)(n.h2,{id:"adding-a-footer-to-the-main-menu",children:"Adding a footer to the Main menu"}),"\n",(0,r.jsxs)(n.p,{children:["Currently, there is no way to access your menu. You can open your (or\r\nany other menu) with ",(0,r.jsx)(n.code,{children:"AdvanceMenu"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'AdvanceMenu( GetMenu( "CustomMenu" ) )\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This is useful for callbacks triggered by button presses like from\r\nfooters. To add a footer to the Main menu, first edit your ",(0,r.jsx)(n.code,{children:"mod.json"}),"\r\ncode callbacks:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:'"Scripts": [\r\n   {\r\n       "Path": "ui/custom_menu.nut",\r\n       "RunOn": "UI",\r\n       "UICallback": {\r\n+           "Before": "AddCustomMenu", // <- Notice the added comma\r\n+           "After": "AddCustomMenuFooter"\r\n       }\r\n   }\r\n]\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We need a new callback that's run after all menus are initialized to\r\nadd any footers to them. Create the global function\r\n",(0,r.jsx)(n.code,{children:"AddCustomMenuFooter"})," in ",(0,r.jsx)(n.code,{children:"custom_menu.nut"})," like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'void function AddCustomMenuFooter()\r\n{\r\n    AddMenuFooterOption(\r\n        GetMenu( "MainMenu" ), // Get the main menu. We want to add a footer to this one. Change this if you want to add a footer to another menu\r\n        BUTTON_X, // This sets the gamepad button that will trigger the click callback defined later\r\n        PrependControllerPrompts( BUTTON_X, " Custom Menu" ), // This is the text that will show as the label of the footer if a gamepad is used\r\n        "Custom Menu", // This is the label text of the footer if no gamepad is used\r\n        void function( var button ) // This is the click callback.\r\n        {\r\n            /*\r\n                This is an anonymous function.\r\n                It will be run every time the footer is pressed.\r\n            */\r\n            AdvanceMenu( file.menu )\r\n        }\r\n    )\r\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"scripting-menu-logic",children:"Scripting Menu Logic"}),"\n",(0,r.jsx)(n.h3,{id:"adding-a-counter",children:"Adding a Counter"}),"\n",(0,r.jsxs)(n.p,{children:["We'll use the button we defined earlier in the ",(0,r.jsx)(n.code,{children:".menu"})," file to increase\r\na number of clicks and the label to show how often the user has clicked\r\nthat button."]}),"\n",(0,r.jsxs)(n.p,{children:["first, add ",(0,r.jsx)(n.code,{children:"someLabel"})," and ",(0,r.jsx)(n.code,{children:"clicks"})," to the ",(0,r.jsx)(n.code,{children:"file"})," struct. Then define\r\nthe label in the ",(0,r.jsx)(n.code,{children:"AddCustomMenu"})," and add a callback to the button."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:'struct {\r\n   var menu\r\n+   var someLabel\r\n+   int clicks\r\n} file\r\n\r\nvoid function AddCustomMenu()\r\n{\r\n   AddMenu( "CustomMenu", $"resource/ui/menus/custommenu.menu", CustomMenu_Init )\r\n   file.menu = GetMenu( "CustomMenu" )\r\n+   file.someLabel = Hud_GetChild( file.menu, "SomeLabel" )\r\n\r\n+   var someButton = Hud_GetChild( file.menu, "SomeButton" )\r\n+   Hud_AddEventHandler( someButton, UIE_CLICK, OnSomeButtonClick )\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now you need to define the ",(0,r.jsx)(n.code,{children:"OnSomeButtonClick"})," callback that's\r\ntriggered when the button is activated."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'void function OnSomeButtonClick( var button )\r\n{\r\n    file.clicks++\r\n    Hud_SetText( file.someLabel, format( "clicked the button %i times", file.clicks ) )\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"adding-a-reset-button",children:"Adding a Reset Button"}),"\n",(0,r.jsxs)(n.p,{children:["First you need to add a definition in your ",(0,r.jsx)(n.code,{children:"custommenu.menu"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'ResetButton\r\n{\r\n    ControlName RuiButton\r\n    InheritProperties RuiSmallButton\r\n\r\n    tall 50\r\n    wide 250\r\n\r\n    labelText "Reset Counter"\r\n    textAlignment center\r\n\r\n    pin_to_sibling SomeButton\r\n    pin_corner_to_sibling TOP\r\n    pin_to_sibling_corner BOTTOM\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then add a ",(0,r.jsx)(n.code,{children:"UIE_CLICK"})," callback for the button. It also makes sense to\r\nmove the code that updates the label text to it's own function so it\r\ncan be reused by the reset button."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:'void function AddCustomMenu()\r\n{\r\n   AddMenu( "CustomMenu", $"resource/ui/menus/custommenu.menu", CustomMenu_Init )\r\n   file.menu = GetMenu( "CustomMenu" )\r\n   file.someLabel = Hud_GetChild( file.menu, "SomeLabel" )\r\n\r\n   var someButton = Hud_GetChild( file.menu, "SomeButton" )\r\n+   var resetButton = Hud_GetChild( file.menu, "ResetButton" )\r\n\r\n   Hud_AddEventHandler( someButton, UIE_CLICK, OnSomeButtonClick )\r\n+   Hud_AddEventHandler( resetButton, UIE_CLICK, OnResetButtonClick )\r\n}\r\n\r\nvoid function OnSomeButtonClick( var button )\r\n{\r\n   file.clicks++\r\n-   Hud_SetText( file.someLabel, format( "clicked the button %i times", file.clicks ) )\r\n+   UpdateClickLabel()\r\n}\r\n\r\nvoid function OnResetButtonClick( var button )\r\n{\r\n   file.clicks = 0\r\n+   UpdateClickLabel()\r\n}\r\n\r\n+void function UpdateClickLabel()\r\n+{\r\n+   Hud_SetText( file.someLabel, format( "clicked the button %i times", file.clicks ) )\r\n+}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"resetting-the-counter-when-the-menu-is-closed",children:"Resetting the Counter when the Menu is closed"}),"\n",(0,r.jsx)(n.p,{children:"You can add callbacks for menu events, for example when a menu is closed\r\nor opened."}),"\n",(0,r.jsxs)(n.p,{children:["If you want to reset the counter if the menu is closed, edit\r\n",(0,r.jsx)(n.code,{children:"AddCustomMenu"})," like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",children:'void function AddCustomMenu()\r\n{\r\n   AddMenu( "CustomMenu", $"resource/ui/menus/custommenu.menu", CustomMenu_Init )\r\n   file.menu = GetMenu( "CustomMenu" )\r\n   file.someLabel = Hud_GetChild( file.menu, "SomeLabel" )\r\n\r\n   var someButton = Hud_GetChild( file.menu, "SomeButton" )\r\n   var resetButton = Hud_GetChild( file.menu, "ResetButton" )\r\n\r\n   Hud_AddEventHandler( someButton, UIE_CLICK, OnSomeButtonClick )\r\n   Hud_AddEventHandler( resetButton, UIE_CLICK, OnResetButtonClick )\r\n\r\n+   AddMenuEventHandler( file.menu, eUIEvent.MENU_CLOSE, OnCloseCustomMenu )\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["And define the callback ",(0,r.jsx)(n.code,{children:"OnCloseCustomMenu"})," to simply call\r\n",(0,r.jsx)(n.code,{children:"OnResetButtonClick"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"void function OnCloseCustomMenu()\r\n{\r\n    OnResetButtonClick( null )\r\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>u});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);