"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[7038],{9264:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var s=t(4848),r=t(8453);const i={},c="Object creation and handling",l={id:"squirrel/cpp_api/objecthandling",title:"objecthandling",description:"Parameters or descriptions may be wrong or incomplete",source:"@site/docs/squirrel/cpp_api/objecthandling.md",sourceDirName:"squirrel/cpp_api",slug:"/squirrel/cpp_api/objecthandling",permalink:"/ns-wiki/docs/squirrel/cpp_api/objecthandling",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/cpp_api/objecthandling.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Interface",permalink:"/ns-wiki/docs/squirrel/cpp_api/"},next:{title:"objectmanipulation",permalink:"/ns-wiki/docs/squirrel/cpp_api/objectmanipulation"}},h={},a=[{value:"Pushing Objects to the stack",id:"pushing-objects-to-the-stack",level:2},{value:"Getting Objects from the stack",id:"getting-objects-from-the-stack",level:2},{value:"Stack Infos",id:"stack-infos",level:2},{value:"sq-stackinfos",id:"sq-stackinfos",level:2},{value:"Other",id:"other",level:2}];function o(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsx)(n.p,{children:"Parameters or descriptions may be wrong or incomplete"}),(0,s.jsxs)(n.p,{children:["This list is incomplete and only lists methods available in\r\n",(0,s.jsx)(n.a,{href:"https://github.com/R2Northstar/NorthstarLauncher/blob/main/NorthstarDLL/squirrel/squirrel.h",children:"squirrel.h"}),"."]}),(0,s.jsxs)(n.p,{children:["Some descriptions are taken from the ",(0,s.jsx)(n.a,{href:"http://www.squirrel-lang.org/mainsite/squirreldoc/reference/api_reference.html",children:"Squirrel\r\nDocumentation"})]})]}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"object-creation-and-handling",children:"Object creation and handling"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["You can access all sq functions only with a ",(0,s.jsx)(n.code,{children:"SquirrelManager"}),"\r\ninstance. You have one available inside the ",(0,s.jsx)(n.code,{children:"ADD_SQFUNC"})," macro."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pushing-objects-to-the-stack",children:"Pushing Objects to the stack"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target VM"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger bVal"}),"\n",(0,s.jsx)(n.p,{children:":   the bool that will be pushed"}),"\n",(0,s.jsx)(n.p,{children:"pushes a boolean to the stack"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target VM"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger iVal"}),"\n",(0,s.jsx)(n.p,{children:":   the integer that will be pushed"}),"\n",(0,s.jsx)(n.p,{children:"pushes an integer to the stack"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target VM"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger fVal"}),"\n",(0,s.jsx)(n.p,{children:":   the float that will be pushed"}),"\n",(0,s.jsx)(n.p,{children:"pushes a float to the stack"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target VM"}),"\n",(0,s.jsx)(n.p,{children:"param SQChar* sVal"}),"\n",(0,s.jsx)(n.p,{children:":   the string that will be pushed"}),"\n",(0,s.jsx)(n.p,{children:"param int len"}),"\n",(0,s.jsxs)(n.p,{children:[":   length of the string ",(0,s.jsx)(n.code,{children:"sVal"})]}),"\n",(0,s.jsx)(n.p,{children:"remarks"}),"\n",(0,s.jsxs)(n.p,{children:[":   if the parameter length is less than 0 the VM will calculate the\r\nlength using ",(0,s.jsx)(n.code,{children:"strlen"})]}),"\n",(0,s.jsx)(n.p,{children:"pushes a string to the stack"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"pushasset",children:"pushasset"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target VM"}),"\n",(0,s.jsx)(n.p,{children:"param SQChar* sVal"}),"\n",(0,s.jsx)(n.p,{children:":   the string that will be pushed"}),"\n",(0,s.jsx)(n.p,{children:"param int len"}),"\n",(0,s.jsxs)(n.p,{children:[":   length of the string ",(0,s.jsx)(n.code,{children:"sVal"})]}),"\n",(0,s.jsx)(n.p,{children:"remarks"}),"\n",(0,s.jsxs)(n.p,{children:[":   if the parameter length is less than 0 the VM will calculate the\r\nlength using ",(0,s.jsx)(n.code,{children:"strlen"})]}),"\n",(0,s.jsx)(n.p,{children:"pushes an asset to the stack"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"pushvector",children:"pushvector"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target VM"}),"\n",(0,s.jsx)(n.p,{children:"param Vector3 vVal"}),"\n",(0,s.jsx)(n.p,{children:":   the vector that will be pushed"}),"\n",(0,s.jsx)(n.p,{children:"pushes a vector to the stack"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"pushobject",children:"pushobject"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target VM"}),"\n",(0,s.jsx)(n.p,{children:"param SQObject obj"}),"\n",(0,s.jsx)(n.p,{children:":   the object that will be pushed"}),"\n",(0,s.jsx)(n.p,{children:"pushes an object like functions to the stack"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"pushroottable",children:"pushroottable"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target VM"}),"\n",(0,s.jsx)(n.p,{children:"pushes the current root table into the stack"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"sq_pushnull"})," (",(0,s.jsx)(n.code,{children:"0x33D0"}),") and more aren't included in ",(0,s.jsx)(n.code,{children:"squirrel.h"})," right\r\nnow but may be in the future."]})}),"\n",(0,s.jsx)(n.h2,{id:"getting-objects-from-the-stack",children:"Getting Objects from the stack"}),"\n",(0,s.jsx)(n.h1,{id:"getbool",children:"getbool"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger stackpos"}),"\n",(0,s.jsx)(n.p,{children:":   stack position of the object"}),"\n",(0,s.jsx)(n.p,{children:"returns"}),"\n",(0,s.jsx)(n.p,{children:":   The value of the object"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"getinteger",children:"getinteger"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger stackpos"}),"\n",(0,s.jsx)(n.p,{children:":   stack position of the object"}),"\n",(0,s.jsx)(n.p,{children:"returns"}),"\n",(0,s.jsx)(n.p,{children:":   The value of the object"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"getfloat",children:"getfloat"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger stackpos"}),"\n",(0,s.jsx)(n.p,{children:":   stack position of the object"}),"\n",(0,s.jsx)(n.p,{children:"returns"}),"\n",(0,s.jsx)(n.p,{children:":   The value of the object"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"getstring",children:"getstring"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger stackpos"}),"\n",(0,s.jsx)(n.p,{children:":   stack position of the object"}),"\n",(0,s.jsx)(n.p,{children:"returns"}),"\n",(0,s.jsx)(n.p,{children:":   The value of the object"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"getvector",children:"getvector"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger stackpos"}),"\n",(0,s.jsx)(n.p,{children:":   stack position of the object"}),"\n",(0,s.jsx)(n.p,{children:"returns"}),"\n",(0,s.jsx)(n.p,{children:":   The value of the object"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"getasset",children:"getasset}"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger stackpos"}),"\n",(0,s.jsx)(n.p,{children:":   stack position of the object"}),"\n",(0,s.jsx)(n.p,{children:"returns"}),"\n",(0,s.jsx)(n.p,{children:":   The value of the object"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"getconstants",children:"getConstants"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["This function (",(0,s.jsx)(n.code,{children:"server.dll+0x5920"}),"`) is not available in the launcher\r\nor plugins at the moment."]}),(0,s.jsx)(n.p,{children:"You can open a PR if you need it now."}),(0,s.jsxs)(n.p,{children:["To define an integer constant you can use\r\n",(0,s.jsx)(n.code,{children:"defconst <defconst>"})]}),(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),(0,s.jsx)(n.p,{children:":   the target vm"}),(0,s.jsx)(n.p,{children:"returns"}),(0,s.jsx)(n.p,{children:":   the table of constants"}),(0,s.jsx)(n.p,{children:"Pushes the constants table to the stack."}),(0,s.jsx)(n.p,{children:"Used to add global constants for scripts."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'getConstants(sqvm);\r\n\r\npushstring(sqvm, "MY_CONSTANT");\r\npushstring(sqvm, "MY_VALUE");\r\nnewslot(sqvm, -3, false);\r\n\r\nremoveFromStack(sqvm); // don\'t forget this!\n'})})]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"sq-getfunction",children:"sq-getfunction"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQChar* name"}),"\n",(0,s.jsx)(n.p,{children:":   the function name to search for"}),"\n",(0,s.jsx)(n.p,{children:"param SQObject* returnObj"}),"\n",(0,s.jsx)(n.p,{children:":   reference to the object to hold the function object"}),"\n",(0,s.jsx)(n.p,{children:"param SQChar* signature"}),"\n",(0,s.jsx)(n.p,{children:":"}),"\n",(0,s.jsxs)(n.p,{children:["returns ",(0,s.jsx)(n.code,{children:"0"})," if the function was found."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"SQObject functionobj {};\r\nint result = sq_getfunction(m_pSQVM->sqvm, funcname, &functionobj, 0);\r\nif (result != 0) // This func returns 0 on success for some reason\r\n{\r\n    NS::log::squirrel_logger<context>()->error(\"Call was unable to find function with name '{}'. Is it global?\", funcname);\r\n    return SQRESULT_ERROR;\r\n}\n"})}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"getentity",children:"getentity"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   The target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger iStackPos"}),"\n",(0,s.jsx)(n.p,{children:":   Stack position of the entity"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"sq-getentityfrominstance",children:"sq-getentityfrominstance"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param CSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   The target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQObject* pInstance"}),"\n",(0,s.jsx)(n.p,{children:":   Instance holding an entity"}),"\n",(0,s.jsx)(n.p,{children:"param char** ppEntityConstant"}),"\n",(0,s.jsxs)(n.p,{children:[":   Entity constant like\r\n",(0,s.jsx)(n.code,{children:"__sq_GetEntityConstant_CBaseEntity <sq-GetEntityConstant-CBaseEntity>"})]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"sq-getentityconstant-cbaseentity",children:"sq-GetEntityConstant-CBaseEntity"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"There are entity constants for other types, but seemingly\r\nCBaseEntity's is the only one needed"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"sq-getobject",children:"sq-getobject"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   The target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger iStackPos"}),"\n",(0,s.jsx)(n.p,{children:":   Stack position of the object"}),"\n",(0,s.jsx)(n.p,{children:"param SQObject* obj"}),"\n",(0,s.jsx)(n.p,{children:":   Pointer that will hold the object"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"obj"})," will be overwritten to hold the squirrel object."]}),"\n",(0,s.jsxs)(n.p,{children:["This example adds a native function with the\r\n",(0,s.jsx)(n.code,{children:"ADD_SQFUNC <sq-api-register-native-functions-c-macro>"})," macro. The function takes a function reference as a\r\ncallback and calls it immediately. More information about function\r\ncalls are available\r\n",(0,s.jsx)(n.code,{children:"here <sq-api-calling-functions>"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'ADD_SQFUNC("void", SQCallbackTest, "void functionref()", "", ScriptContext::UI)\r\n{\r\n    SQObject fn; // Make an empty sqobject. This will hold the function object later\r\n    g_pSquirrel<context>->__sq_getobject(sqvm, 1, &fn); // Assign the function object to the SQOBJECT\r\n    g_pSquirrel<context>->pushobject(sqvm, &fn); // Push the function object for the call\r\n    g_pSquirrel<context>->pushroottable(sqvm); // Push the root table for the function stack\r\n    g_pSquirrel<context>->__sq_call(sqvm, 1, false, true); // call the function with one parameter (the \'this\' object)\r\n\r\n    return SQRESULT_NULL;\r\n}\n'})}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"get",children:"get"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQInteger stackpos"}),"\n",(0,s.jsx)(n.p,{children:":   stack position of the object"}),"\n",(0,s.jsx)(n.p,{children:"returns"}),"\n",(0,s.jsxs)(n.p,{children:[":   an ",(0,s.jsx)(n.code,{children:"SQRESULT"})," that indicates whether or not the access was\r\nsuccessful."]}),"\n",(0,s.jsx)(n.p,{children:"pops a key from the stack and performs a get operation on the object\r\nat the position idx in the stack; and pushes the result in the stack."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"stack-infos",children:"Stack Infos"}),"\n",(0,s.jsx)(n.h2,{id:"sq-stackinfos",children:"sq-stackinfos"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target vm"}),"\n",(0,s.jsx)(n.p,{children:"param int level"}),"\n",(0,s.jsx)(n.p,{children:":   stack depth of the info"}),"\n",(0,s.jsx)(n.p,{children:"param SQStackInfos& out"}),"\n",(0,s.jsx)(n.p,{children:":   instance that will hold the information"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"getcallingmod",children:"getcallingmod"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param HSquirrelVM* sqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target vm"}),"\n",(0,s.jsx)(n.p,{children:"param int depth"}),"\n",(0,s.jsx)(n.p,{children:":   stack depth of the origin mod"}),"\n",(0,s.jsx)(n.p,{children:"returns"}),"\n",(0,s.jsx)(n.p,{children:":   Pointer to the Mod object at the stack depth"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Not available in\r\n",(0,s.jsx)(n.a,{href:"https://github.com/R2Northstar/NorthstarLauncher/blob/main/NorthstarDLL/plugins/plugin_abi.h",children:"plugins"})]})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"other",children:"Other"}),"\n",(0,s.jsx)(n.p,{children:"defconst"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"param CSquirrelVM* csqvm"}),"\n",(0,s.jsx)(n.p,{children:":   the target vm"}),"\n",(0,s.jsx)(n.p,{children:"param SQChar* pName"}),"\n",(0,s.jsx)(n.p,{children:":   the constant name"}),"\n",(0,s.jsx)(n.p,{children:"param int nValue"}),"\n",(0,s.jsx)(n.p,{children:":   the constant value"}),"\n",(0,s.jsx)(n.p,{children:"defines a global squirrel integer constant"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var s=t(6540);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);