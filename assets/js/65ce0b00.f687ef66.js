"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[5346],{3486:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(4848),s=t(8453);const i={},a="Interface API",l={id:"plugins/interfacesapi",title:"Interface API",description:"the plugins system now use source interfaces.",source:"@site/docs/plugins/interfacesapi.md",sourceDirName:"plugins",slug:"/plugins/interfacesapi",permalink:"/ns-wiki/docs/plugins/interfacesapi",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/plugins/interfacesapi.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Info-Dump",permalink:"/ns-wiki/docs/mapping/info-dump"},next:{title:"Resources",permalink:"/ns-wiki/docs/plugins/resources"}},o={},d=[{value:"Northstar Interfaces",id:"northstar-interfaces",level:2},{value:"NSSys001",id:"nssys001",level:3},{value:"Required Plugin Interfaces",id:"required-plugin-interfaces",level:2},{value:"PluginId001",id:"pluginid001",level:3},{value:"PluginCallbacks001",id:"plugincallbacks001",level:3},{value:"What&#39;s an interface anyways?",id:"whats-an-interface-anyways",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"interface-api",children:"Interface API"})}),"\n",(0,r.jsx)(n.p,{children:"the plugins system now use source interfaces."}),"\n",(0,r.jsx)(n.p,{children:"The launcher exposes almost everything required by plugins in interfaces\r\nthat allow for backwards compatibility. The only thing that's passed to\r\na plugin directly is the northstar dll HWND and a struct of data that's\r\ndifferent for each plugin."}),"\n",(0,r.jsxs)(n.p,{children:["Plugins are required to expose a\r\n",(0,r.jsx)(n.code,{children:"void* CreateInterface(const char* name, int* status)"})," function to share\r\ntheir own interfaces. The launcher loads the ",(0,r.jsx)(n.code,{children:"PluginId"})," interface from\r\nthe plugin to query info such as it's name."]}),"\n",(0,r.jsxs)(n.p,{children:["Plugins can use the ",(0,r.jsx)(n.code,{children:"CreateInterface"})," function exposed by the\r\nnorthstarDll to use northstar interfaces such as for logging. An\r\ninterface is just an abstract class to force all functions into a\r\nvftable."]}),"\n",(0,r.jsx)(n.h2,{id:"northstar-interfaces",children:"Northstar Interfaces"}),"\n",(0,r.jsx)(n.h3,{id:"nssys001",children:"NSSys001"}),"\n",(0,r.jsx)(n.p,{children:"Exposes some system functionality to plugins"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"// 32 bit\r\nenum LogLevel {\r\n  INFO,\r\n  WARN,\r\n  ERR,\r\n};\r\n\r\n// handle: handle of the plugin. Passed to the plugin on init.\r\nvoid Log(HMODULE handle, LogLevel level, char* msg); // logs a message with the plugin's log name\r\nvoid Unload(HMODULE handle); // unloads the plugin\r\nvoid Reload(HMODULE handle);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"required-plugin-interfaces",children:"Required Plugin Interfaces"}),"\n",(0,r.jsx)(n.p,{children:"Interfaces that have to be exposed for the plugin to be loaded."}),"\n",(0,r.jsx)(n.h3,{id:"pluginid001",children:"PluginId001"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"// strings of data about the plugin itself. may be extended in the future\r\n// 32 bit\r\nenum PluginString {\r\n  NAME, // the name of the plugin\r\n  LOG_NAME, // the name used for logging\r\n  DEPENDENCY_NAME, // the name used for squirrel dependency constants created. The value returned for this has to be a valid squirrel identifier or the plugin will fail to load\r\n}\r\n\r\n// bitfields about the plugin\r\n// 32 bit\r\nenum PluginField {\r\n  CONTEXT // 0x1 if the plugin is allowed to run on dedicated servers and 0x2 if the plugin is allowed to run on clients (is this even needed seems useless to me)\r\n}\r\n\r\nchar* GetString(PluginString prop);\r\ni64 GetField(PluginField prop);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"plugincallbacks001",children:"PluginCallbacks001"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"struct PluginNorthstarData { HMODULE handle; };\r\n\r\n// COPY THE initData IT MAY BE MOVED AT RUNTIME\r\nvoid Init(HMODULE nsModule, const PluginNorthstarData* initData, bool reloaded); // called after the plugin has been validated. The nsmodule allows northstar plugins to work for the ronin client as well (assuming they update their fork lmao)\r\nvoid Finalize(); // called after all plugins have been loaded. Useful for dependencies\r\nvoid Unload(); // called just before the plugin is getting unloaded\r\nvoid OnSqvmCreated(CSquirrelVM* sqvm); // the context of the sqvm is contained in the instance\r\nvoid OnSqvmDestroying(CSquirrelVM* sqvm); // callback with the sqvm instance that's about to be destroyed (for UI, CLIENT is destroyed for some reason??)\r\nvoid OnLibraryLoaded(HMODULE module, const char* libraryName); // called for any library loaded by the game (for example engine.dll)\r\nvoid RunFrame(); // just runs on every frame of the game I think\n"})}),"\n",(0,r.jsx)(n.h2,{id:"whats-an-interface-anyways",children:"What's an interface anyways?"}),"\n",(0,r.jsx)(n.p,{children:"Interfaces are just abstract classes. So make sure the first parameter\r\nis always a pointer to the instance of the interface you're using."}),"\n",(0,r.jsx)(n.p,{children:"an example what NSSys001 looks like in C:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'typedef enum {\r\n  LOG_INFO,\r\n  LOG_WARN,\r\n  LOG_ERR,\r\n};\r\n\r\ntypedef struct CSys {\r\n  struct {\r\n    void (*log)(struct CSys* self, HMODULE handle, LogLevel level, char* msg);\r\n    void (*unload)(struct CSys* self, HMODULE handle);\r\n  }* vftable;\r\n} CSys;\r\n\r\n// use like this\r\ng_c_sys->vftable->log(g_c_sys, g_handle, LOG_INFO, "my balls are itching");\n'})}),"\n",(0,r.jsx)(n.p,{children:"Interfaces are created with CreateInterface that's exposed in another\r\ndll."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);