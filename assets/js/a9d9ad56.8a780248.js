"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[3230],{5561:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var s=r(4848),t=r(8453);const a={},i="Chathooks",c={id:"reference/northstar/chathooks",title:"Chathooks",description:"This document provides usage of the Chathook API added in Northstar",source:"@site/docs/reference/northstar/chathooks.md",sourceDirName:"reference/northstar",slug:"/reference/northstar/chathooks",permalink:"/ns-wiki/docs/reference/northstar/chathooks",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/reference/northstar/chathooks.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom Northstar Callbacks",permalink:"/ns-wiki/docs/reference/northstar/callbacks"},next:{title:"Custom Damage Source IDs",permalink:"/ns-wiki/docs/reference/northstar/customdamagesources"}},l={},o=[{value:"Client chat API",id:"client-chat-api",level:2},{value:"Callbacks",id:"callbacks",level:3},{value:"Writing to Chat",id:"writing-to-chat",level:3},{value:"Server Chat API",id:"server-chat-api",level:2},{value:"Callbacks",id:"callbacks-1",level:3},{value:"Custom Messages",id:"custom-messages",level:3},{value:"ANSI Escape Codes",id:"ansi_escape",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"chathooks",children:"Chathooks"})}),"\n",(0,s.jsxs)(n.p,{children:["This document provides usage of the Chathook API added in Northstar\r\n",(0,s.jsx)(n.code,{children:"v1.6.0"}),". For an example of chathooks in use, check out EmmaM's\r\n",(0,s.jsx)(n.a,{href:"https://github.com/emma-miler/OwOfier/",children:"OwOfier mod"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.div,{children:[(0,s.jsx)(n.p,{children:"Warning"}),(0,s.jsx)(n.p,{children:"Your mod needs to be load priority 1 or above to use the structs and\r\ncallbacks in your script."})]})}),"\n",(0,s.jsx)(n.h2,{id:"client-chat-api",children:"Client chat API"}),"\n",(0,s.jsx)(n.h3,{id:"callbacks",children:"Callbacks"}),"\n",(0,s.jsx)(n.p,{children:"The client chat callbacks allow you to intercept chat messages and\r\nmodify or block them."}),"\n",(0,s.jsx)(n.h1,{id:"clclient_messagestruct",children:"clclient_messagestruct"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Contains details on a chat message to be displayed. You can receive\r\none of these by adding a chat callback with\r\n",(0,s.jsx)(n.code,{children:"AddCallback_OnReceivedSayTextMessage <addcallback_onreceivedsaytextmessage>"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"the text sent by the player."}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"the player who sent the chat."}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"the display name of the player who sent the chat."}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["whether this chat has a ",(0,s.jsx)(n.code,{children:"[TEAM]"})," tag."]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["whether this chat has a ",(0,s.jsx)(n.code,{children:"[DEAD]"})," tag."]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["whether this chat has a ",(0,s.jsx)(n.code,{children:"[WHISPER]"})," tag."]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"if true, this chat will not be displayed."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"addcallback_onreceivedsaytextmessage",children:"addcallback_onreceivedsaytextmessage"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Adds a callback that will be run when a chat message is received from\r\nthe server. This will only be triggered for messages from players, not\r\nserver messages."}),"\n",(0,s.jsxs)(n.p,{children:["The provided function should accept a\r\n",(0,s.jsx)(n.code,{children:"ClClient_MessageStruct <clclient_messagestruct>"})," and return an optionally modified copy of it. When a chat\r\nmessage is received, each registered callback is run in sequence to\r\nmodify or block the message."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'ClClient_MessageStruct function MyChatFilter(ClClient_MessageStruct message)\r\n{\r\n    if (message.message.find("nft") != null)\r\n    {\r\n        message.shouldBlock = true\r\n    }\r\n\r\n    message.message = StringReplace(message.message, "yes", "no", true, true)\r\n\r\n    return message\r\n}\r\n\r\nvoid function MyModInit()\r\n{\r\n    AddCallback_OnReceivedSayTextMessage(MyChatFilter)\r\n}\n'})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"writing-to-chat",children:"Writing to Chat"}),"\n",(0,s.jsx)(n.p,{children:"A handful of functions are provided to write messages in local chat\r\nwindows. These do not send messages to other players, they only display\r\nthem locally."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Writes a line of text in local game chat panels. Supports\r\n",(0,s.jsx)(n.code,{children:"ANSI escape codes <ansi_escape>"})," ."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'void function OnGameStarted()\r\n{\r\n    Chat_GameWriteLine("You got this, " + GetLocalClientPlayer().GetPlayerName() + "!")\r\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Appends text to local game chat panels. Supports\r\n",(0,s.jsx)(n.code,{children:"ANSI escape codes <ansi_escape>"})," ."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'void function InitialiseHEVSuit()\r\n{\r\n    Chat_GameWriteLine("SENSOR ARRAYS-")\r\n    ActivateSensorArrays()\r\n    Chat_GameWrite("ACTIVATED")\r\n    wait 1\r\n    Chat_GameWriteLine("BIOMETRIC MONITORING SYSTEMS-")\r\n    ActivateBiometricMonitoringSystems()\r\n    Chat_GameWrite("ACTIVATED")\r\n    wait 1\r\n    Chat_GameWriteLine("HAVE A VERY SAFE DAY.")\r\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Writes a line of text in local network chat panels. Supports\r\n",(0,s.jsx)(n.code,{children:"ANSI escape codes <ansi_escape>"})," ."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'void function MyModInit()\r\n{\r\n    Chat_NetworkWriteLine("MyMod v1.0.0 is good to go!")\r\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Appends text to local network chat panels. Supports\r\n",(0,s.jsx)(n.code,{children:"ANSI escape codes <ansi_escape>"})," ."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'void function OnButtonPressed()\r\n{\r\n    Chat_NetworkWrite("Connecting in 3...")\r\n    wait 1\r\n    Chat_NetworkWrite("2...")\r\n    wait 1\r\n    Chat_NetworkWrite("1...")\r\n    wait 1\r\n    Chat_NetworkWrite("0")\r\n    Connect()\r\n}\n'})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"server-chat-api",children:"Server Chat API"}),"\n",(0,s.jsx)(n.h3,{id:"callbacks-1",children:"Callbacks"}),"\n",(0,s.jsx)(n.p,{children:"The server chat callbacks allow you to intercept incoming chat messages\r\nand modify or block them."}),"\n",(0,s.jsx)(n.h1,{id:"clserver_messagestruct",children:"clserver_messagestruct}"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Contains details on an incoming chat message. You can receive one of\r\nthese by adding a chat callback with\r\n",(0,s.jsx)(n.code,{children:"AddCallback_OnReceivedSayTextMessage <addcallback_onreceivedsaytextmessage_server>"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"the text sent by the player."}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"the player who sent the chat."}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"whether this chat is only sent to the player's team."}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"if true, this chat will not be sent."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Adds a callback that will be run when a chat message is received from\r\na player. This will not be fired for custom messages sent by server\r\nmods."}),"\n",(0,s.jsxs)(n.p,{children:["The provided function should accept a\r\n",(0,s.jsx)(n.code,{children:"ClServer_MessageStruct <clserver_messagestruct>"})," and return an optionally modified copy of it. When a chat\r\nmessage is received, each registered callback is run in sequence to\r\nmodify or block the message."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'ClServer_MessageStruct function MyChatFilter(ClServer_MessageStruct message)\r\n{\r\n    if (message.message.find("nft") != null)\r\n    {\r\n        message.shouldBlock = true\r\n    }\r\n\r\n    message.message = StringReplace(message.message, "yes", "no", true, true)\r\n\r\n    return message\r\n}\r\nvoid function MyModInit()\r\n{\r\n    AddCallback_OnReceivedSayTextMessage(MyChatFilter)\r\n}\n'})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-messages",children:"Custom Messages"}),"\n",(0,s.jsx)(n.p,{children:"With custom messages you can send chat messages at any time, to all\r\nplayers or to specific players."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Displays a chat message as if the player sent it. Only use this when\r\nthe player has performed a clear action to send a chat message."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"entity player"})," - the player that the chat message will appear to\r\nbe from."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string text"})," - the contents of the chat message. Supports\r\n",(0,s.jsx)(n.code,{children:"ANSI escape codes <ansi_escape>"}),"\r\nfor colors."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bool isTeamChat"})," - whether this chat is only sent to the\r\nplayer's team."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'void function OnSayRedCommand(entity player, string text)\r\n{\r\n    Chat_Impersonate(player, "red text -> \\x1b[31m" + text)\r\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Sends a private chat message from a player that is only displayed to\r\none other player. Only use this when the player has performed a clear\r\naction to send a chat message."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"entity fromPlayer"})," - the player the message will be from."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"entity toPlayer"})," - the player that the message will be shown to."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string text"})," - the contents of the chat message. Supports\r\n",(0,s.jsx)(n.code,{children:"ANSI escape codes <ansi_escape>"}),"\r\nfor colors."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bool whisper"})," - if true, ",(0,s.jsx)(n.code,{children:"[WHISPER]"})," will be displayed before the\r\nmessage to indicate the message is private."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"void function OnSendToFriendsCommand(entity fromPlayer, string text)\r\n{\r\n    array<entity> friends = GetPlayerFriends(fromPlayer)\r\n    foreach (friend in friends)\r\n    {\r\n        Chat_PrivateMessage(fromPlayer, friend, text, true)\r\n    }\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Displays a server message to all players in the chat."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string text"})," - the contents of the chat message. Supports\r\n",(0,s.jsx)(n.code,{children:"ANSI escape codes <ansi_escape>"}),"\r\nfor colors."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bool withServerTag"})," - if true, ",(0,s.jsx)(n.code,{children:"[SERVER]"})," will appear before the\r\nmessage in chat. Defaults to true."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'void function RestartServerThread()\r\n{\r\n    // wait one hour\r\n    wait 3600\r\n    Chat_ServerBroadcast("Server will be shut down in \\x1b[93m5 seconds")\r\n    wait 1\r\n    Chat_ServerBroadcast("Server will be shut down in \\x1b[93m4 seconds")\r\n    wait 1\r\n    Chat_ServerBroadcast("Server will be shut down in \\x1b[93m3 seconds")\r\n    wait 1\r\n    Chat_ServerBroadcast("Server will be shut down in \\x1b[93m2 seconds")\r\n    wait 1\r\n    Chat_ServerBroadcast("Server will be shut down in \\x1b[93m1 second")\r\n    wait 1\r\n    StopServer()\r\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Sends a server message to a specific player in the chat."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"entity toPlayer"})," - the player that the message will be shown to."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string text"})," - the contents of the chat message. Supports\r\n",(0,s.jsx)(n.code,{children:"ANSI escape codes <ansi_escape>"}),"\r\nfor colors."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bool whisper"})," - if true, ",(0,s.jsx)(n.code,{children:"[WHISPER]"})," will be displayed before the\r\nmessage to indicate the message is private."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bool withServerTag"})," - if true, ",(0,s.jsx)(n.code,{children:"[SERVER]"})," will appear before the\r\nmessage in chat. Defaults to true."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'void function OnBanCommand(entity player, array<string> args)\r\n{\r\n    if (!PlayerIsModerator(player))\r\n    {\r\n        Chat_ServerPrivateMessage(player, "You do not have the permissions to perform this command.", true, false)\r\n        return\r\n    }\r\n\r\n    BanPlayerByName(args[0])\r\n}\n'})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"ansi_escape",children:"ANSI Escape Codes"}),"\n",(0,s.jsx)(n.p,{children:"All messages support ANSI escape codes for customising text color. These\r\nare commands in strings that have special meaning. For example, the\r\nstring:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Hello world, \\x1b[31mthis text is red\\x1b[0m. And \\x1b[34mthis text is blue\\x1b[0m.\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"\\x1b"})," is a special character that Squirrel (and other languages)\r\nreplace with a reserved ASCII character. For future reference this will\r\nbe referred to with ",(0,s.jsx)(n.code,{children:"ESC"})," (e.g. setting red text is ",(0,s.jsx)(n.code,{children:"ESC[31m"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"The following commands are available:"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["Codes                        Description\r\n",(0,s.jsx)(n.code,{children:"ESC[0m"})," and ",(0,s.jsx)(n.code,{children:"ESC[39m"}),"       Reset text formatting.\r\n",(0,s.jsx)(n.code,{children:"ESC[30-37m"}),", ",(0,s.jsx)(n.code,{children:"ESC[90-97m"}),"   Set to one of ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit",children:"the available color presets"}),".\r\n",(0,s.jsx)(n.code,{children:"ESC[38;5;Xm"}),"                Set to one of ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit",children:"the available 8-bit colors"}),".\r\n",(0,s.jsx)(n.code,{children:"ESC[38;2;R;G;Bm"}),"            Set to an RGB color, with ",(0,s.jsx)(n.code,{children:"R"}),", ",(0,s.jsx)(n.code,{children:"G"})," and ",(0,s.jsx)(n.code,{children:"B"})," in the range 0-255.\r\n",(0,s.jsx)(n.code,{children:"ESC[110m"}),"                   Set to chat text color.\r\n",(0,s.jsx)(n.code,{children:"ESC[111m"}),"                   Set to friendly player name color.\r\n",(0,s.jsx)(n.code,{children:"ESC[112m"}),"                   Set to enemy player name color.\r\n",(0,s.jsx)(n.code,{children:"ESC[113m"}),"                   Set to network name color."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:": ANSI Codes"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var s=r(6540);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);