"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[7553],{1899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=n(4848),i=n(8453);const a={},s="Damage History",o={id:"reference/respawn/damagehistory",title:"Damage History",description:"After a player receives damage it is stored by the game in an array of",source:"@site/docs/reference/respawn/damagehistory.md",sourceDirName:"reference/respawn",slug:"/reference/respawn/damagehistory",permalink:"/ns-wiki/docs/reference/respawn/damagehistory",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/reference/respawn/damagehistory.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Callbacks",permalink:"/ns-wiki/docs/reference/respawn/callbacks"},next:{title:"Dialogs",permalink:"/ns-wiki/docs/reference/respawn/dialog"}},c={},d=[{value:"DamageHistoryStruct",id:"damagehistorystruct",level:2},{value:"Getter functions",id:"getter-functions",level:3},{value:"Setter functions",id:"setter-functions",level:3},{value:"Built in Checks",id:"built-in-checks",level:2}];function l(e){const t={admonition:"admonition",blockquote:"blockquote",code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"damage-history",children:"Damage History"})}),"\n",(0,r.jsx)(t.p,{children:"After a player receives damage it is stored by the game in an array of\r\nthe following struct. The information in that struct is final and\r\nchanging it does not affect the game."}),"\n",(0,r.jsx)(t.h2,{id:"damagehistorystruct",children:"DamageHistoryStruct"}),"\n",(0,r.jsx)(t.p,{children:"Getting the info from the entity\r\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}),"\n",(0,r.jsxs)(t.p,{children:["You can get the damage history for any player entity with\r\n",(0,r.jsx)(t.code,{children:"player.e.recentDamageHistory"}),", this is of the type\r\n",(0,r.jsx)(t.code,{children:"array<DamageHistoryStruct>"})," and gets automatically updated by the game.\r\nThe higher the index the older the ",(0,r.jsx)(t.code,{children:"DamageHistoryStruct"})," is ( so to get\r\nthe most recent struct you do ",(0,r.jsx)(t.code,{children:"player.e.recentDamageHistory[ 0 ]"})," )."]}),"\n",(0,r.jsx)(t.h3,{id:"getter-functions",children:"Getter functions"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"param entity player"}),"\n",(0,r.jsx)(t.p,{children:":   The player you want the damage history from."}),"\n",(0,r.jsx)(t.p,{children:"param float time"}),"\n",(0,r.jsx)(t.p,{children:":   How old the damage history can be in seconds."}),"\n",(0,r.jsx)(t.p,{children:"returns"}),"\n",(0,r.jsxs)(t.p,{children:[":   All ",(0,r.jsx)(t.code,{children:"DamageHistoryStruct"})," found in the given time frame."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"setter-functions",children:"Setter functions"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["Removes all ",(0,r.jsx)(t.code,{children:"DamageHistoryStruct"})," in the time frame ",(0,r.jsx)(t.code,{children:"time - maxTime"})]}),"\n",(0,r.jsx)(t.p,{children:"param entity player"}),"\n",(0,r.jsx)(t.p,{children:":   The player you want to update the damage history from."}),"\n",(0,r.jsx)(t.p,{children:"param float maxTime"}),"\n",(0,r.jsx)(t.p,{children:":   How old the damage history can maximally be"}),"\n",(0,r.jsx)(t.p,{children:"param float time"}),"\n",(0,r.jsx)(t.p,{children:":   How old the damage history can be in seconds."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"built-in-checks",children:"Built in Checks"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.admonition,{type:"note",children:[(0,r.jsx)(t.div,{children:(0,r.jsx)(t.p,{children:"Note"})}),(0,r.jsx)(t.blockquote,{children:"\n"})]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(6540);const i={},a=r.createContext(i);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);