"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[4147],{3388:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>o,toc:()=>a});var t=r(4848),s=r(8453);const c={},i="Server Authentification",o={id:"reference/northstar/msinterface",title:"Server Authentification",description:"All of these functions are only exposed to the UI VM.",source:"@site/docs/reference/northstar/msinterface.md",sourceDirName:"reference/northstar",slug:"/reference/northstar/msinterface",permalink:"/ns-wiki/docs/reference/northstar/msinterface",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/reference/northstar/msinterface.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"modsettings",permalink:"/ns-wiki/docs/reference/northstar/modsettings"},next:{title:"Safe I/O",permalink:"/ns-wiki/docs/reference/northstar/safeio"}},l={},a=[{value:"Masterserver Authentification",id:"masterserver-authentification",level:2},{value:"Game Server Authentification",id:"game-server-authentification",level:2},{value:"Server Information",id:"server-information",level:2},{value:"Connection Callbacks",id:"connection-callbacks",level:2},{value:"AddConnectToServerCallback",id:"addconnecttoservercallback",level:3},{value:"Script Structs",id:"script-structs",level:2}];function h(e){const n={admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"server-authentification",children:"Server Authentification"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["All of these functions are only exposed to the ",(0,t.jsx)(n.code,{children:"UI"})," VM."]})}),"\n",(0,t.jsx)(n.p,{children:"These are functions required for the ingame server browser and the\r\nauthorization process for the Masterserver and game servers."}),"\n",(0,t.jsx)(n.h2,{id:"masterserver-authentification",children:"Masterserver Authentification"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Returns ",(0,t.jsx)(n.code,{children:"true"})," if the client is authenticated with the Masterserver"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Returns ",(0,t.jsx)(n.code,{children:"true"})," if a successful connection has been established"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"game-server-authentification",children:"Game Server Authentification"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Tries authing with the fetched server at ",(0,t.jsx)(n.code,{children:"serverIndex"})," and the\r\nprovided password"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Returns ",(0,t.jsx)(n.code,{children:"true"})," if the client is currently authing with a game server"]}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"nswasauthsuccessful",children:"NSWasAuthSuccessful"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Returns ",(0,t.jsx)(n.code,{children:"true"})," if the client successfully authed with a game server"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Tries to connect to the game server that has previously been\r\nauthenticated with"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Returns the API reason why the last authentification failed"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Tries to authenticate with the local game server"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Call this after\r\n",(0,t.jsx)(n.code,{children:"NSWasAuthSuccessful <NSWasAuthSuccessful>"})," returns ",(0,t.jsx)(n.code,{children:"true"})," to complete the local authorization\r\nprocess."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"server-information",children:"Server Information"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Start fetching all available game servers from the Masterserver"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Returns ",(0,t.jsx)(n.code,{children:"true"})," if the last request by"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Returns the total amount of fetched game servers"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Clears all fetched game servers"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Returns an array of all available Servers fetched from the\r\nMasterserver."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"connection-callbacks",children:"Connection Callbacks"}),"\n",(0,t.jsx)(n.h3,{id:"addconnecttoservercallback",children:"AddConnectToServerCallback"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Add a callback to be executed right before connecting to a game server\r\nvia the Server Browser"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Remove a function object from the list of callbacks"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Runs all callbacks that have been registered with\r\n",(0,t.jsx)(n.code,{children:"AddConnectToServerCallback <AddConnectToServerCallback>"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"script-structs",children:"Script Structs"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Contains all info about a game server."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Index of the native Object equivalent"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"ID assigned to the game server by the Masterserver in the\r\nregistration"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Name of this game server"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Description of this game server"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Unlocalized name of the map that's currently running on the game\r\nserver"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Unlocalized name of the playlist that's currently running on the\r\ngame server"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"The total amount of players currently connected to the player"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"The maximum amount of players that can connect to the server"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"true"})," an extra password is required to connect to the server.\r\nOtherwise the password is an empty string"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Unlocalized region where the physical server is located"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Array of all mods that are required to be loaded on the client to be\r\nable to join the server"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Information of a mod that has to be loaded on the client in order to\r\njoin a game server"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Name of the mod"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Version of the mod"}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const s={},c=t.createContext(s);function i(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);