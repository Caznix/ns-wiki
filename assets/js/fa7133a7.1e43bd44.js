"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[7726],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>y});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=u(n),m=a,y=s["".concat(p,".").concat(m)]||s[m]||g[m]||o;return n?r.createElement(y,l(l({ref:t},c),{},{components:n})):r.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2931:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(8168),a=(n(6540),n(5680));const o={},l="Squirrel Functions",i={unversionedId:"source/squirrel/cpp_api/sq_functions",id:"source/squirrel/cpp_api/sq_functions",isDocsHomePage:!1,title:"Squirrel Functions",description:"Adding Squirrel Functions",source:"@site/docs/source/squirrel/cpp_api/sq_functions.md",sourceDirName:"source/squirrel/cpp_api",slug:"/source/squirrel/cpp_api/sq_functions",permalink:"/ns-wiki/docs/source/squirrel/cpp_api/sq_functions",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/source/squirrel/cpp_api/sq_functions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"objectmanipulation",permalink:"/ns-wiki/docs/source/squirrel/cpp_api/objectmanipulation"},next:{title:"Stack",permalink:"/ns-wiki/docs/source/squirrel/cpp_api/stack"}},p=[{value:"Adding Squirrel Functions",id:"sq-api-register-native-functions-c-macro",children:[{value:"Examples",id:"examples",children:[]}]},{value:"Replacing Squirrel Functions",id:"replacing-squirrel-functions",children:[]},{value:"Script Contexts",id:"script-contexts",children:[]},{value:"Script Returns",id:"script-returns",children:[]},{value:"Calling",id:"sq-api-calling-functions",children:[]},{value:"Errors",id:"errors",children:[]}],u={toc:p},c="wrapper";function s(e){let{components:t,...n}=e;return(0,a.yg)(c,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"squirrel-functions"},"Squirrel Functions"),(0,a.yg)("h2",{id:"sq-api-register-native-functions-c-macro"},"Adding Squirrel Functions"),(0,a.yg)("p",null,"You can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"ADD_SQFUNC")," macro defined in ",(0,a.yg)("inlineCode",{parentName:"p"},"squirrelautobind.h")," to\neasily add new Squirrel functions for specific contexts."),(0,a.yg)("p",null,"Inside the macro you have access to the Squirrel Manager of the context\nthe function has been called from and the SQVM."),(0,a.yg)("p",null,"Parameters are the initial stack in the function context."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"param return_type"),(0,a.yg)("p",{parentName:"blockquote"},":   The squirrel return type the compiler expects from this function"),(0,a.yg)("p",{parentName:"blockquote"},"param funcName"),(0,a.yg)("p",{parentName:"blockquote"},":   The squirrel function name"),(0,a.yg)("p",{parentName:"blockquote"},"param argTypes"),(0,a.yg)("p",{parentName:"blockquote"},":   The args with types the compiler expects"),(0,a.yg)("p",{parentName:"blockquote"},"param helpText"),(0,a.yg)("p",{parentName:"blockquote"},":   A help text describing the function"),(0,a.yg)("p",{parentName:"blockquote"},"param runOnContext"),(0,a.yg)("p",{parentName:"blockquote"},":   The contexts that have access to this function")),(0,a.yg)("h3",{id:"examples"},"Examples"),(0,a.yg)("p",null,"Return a string from a native registered function:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'ADD_SQFUNC("string", CPlugTest, "", "returns \\"native gaming\\"", ScriptContext::CLIENT | ScriptContext::SERVER)\n{\n    g_pSquirrel<context>->pushstring(sqvm, "native gaming"); // push a string to the stack\n\n    return SQRESULT_NOTNULL; // Signal that the topmost item on the stack is returned by this function\n}\n')),(0,a.yg)("p",null,"Return a complex ",(0,a.yg)("inlineCode",{parentName:"p"},"ornull")," type:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'ADD_SQFUNC("array<int> ornull", CPlugComplex, "int n", "returns null", ScriptContext::CLIENT | ScriptContext::SERVER | ScriptContext::UI)\n{\n    SQInteger n = g_pSquirrel<context>->getinteger(sqvm, 1);\n\n    if (n == 0)\n        return SQRESULT_NULL;\n\n    g_pSquirrel<context>->newarray(sqvm, 0);\n    g_pSquirrel<context>->pushinteger(sqvm, n);\n    g_pSquirrel<context>->arrayappend(sqvm, 2);\n    g_pSquirrel<context>->pushinteger(sqvm, n * 2);\n    g_pSquirrel<context>->arrayappend(sqvm, 2);\n\n    return SQRESULT_NOTNULL; // return the array [ n, n * 2 ] or NULL if n == 0\n}\n')),(0,a.yg)("h2",{id:"replacing-squirrel-functions"},"Replacing Squirrel Functions"),(0,a.yg)("p",null,":::: note\n::: title\nNote\n:::"),(0,a.yg)("p",null,"Replacing functions is not possible in plugins\n::::"),(0,a.yg)("p",null,"You can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"REPLACE_SQFUNC")," macro to replace an existing sq\nfunction."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"param funcName"),(0,a.yg)("p",{parentName:"blockquote"},":   The name of the function to replace"),(0,a.yg)("p",{parentName:"blockquote"},"param runOnContext"),(0,a.yg)("p",{parentName:"blockquote"},":   The contexts that have access to this function")),(0,a.yg)("p",null,"It\\'s also possible to add an override directly with the\n",(0,a.yg)("inlineCode",{parentName:"p"},"AddFuncOverride")," function of the ",(0,a.yg)("inlineCode",{parentName:"p"},"SquirrelManager")," class."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},":param std::string name: The name of the function to override :param\nSQFunc func: A function object that replaces the logic")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'// Replaces dangerous vanilla functions to only log their call with no further logic.\ng_pSquirrel<context>->AddFuncOverride("DevTextBufferWrite", SQ_StubbedFunc<context, "DevTextBufferWrite">);\ng_pSquirrel<context>->AddFuncOverride("DevTextBufferClear", SQ_StubbedFunc<context, "DevTextBufferClear">);\ng_pSquirrel<context>->AddFuncOverride("DevTextBufferDumpToFile", SQ_StubbedFunc<context, "DevTextBufferDumpToFile">);\n')),(0,a.yg)("h2",{id:"script-contexts"},"Script Contexts"),(0,a.yg)("p",null,"Scriptcontexts are used to define the VMs that have access to a native\nfunction. Available Contexts are"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"ScriptContext::SERVER")," - The SERVER sqvm"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"ScriptContext::CLIENT")," - The CLIENT sqvm"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"ScriptContext::UI")," - The UI vm")),(0,a.yg)("h2",{id:"script-returns"},"Script Returns"),(0,a.yg)("p",null,"Squirrel functions need to return a ",(0,a.yg)("inlineCode",{parentName:"p"},"SQRESULT"),". Valid results are"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"SQRESULT_NULL")," - This function returns ",(0,a.yg)("inlineCode",{parentName:"li"},"null"),". Nothing is left over\non the stack."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"SQRESULT_NOTNULL")," - This functions returns the last item on the\nstack."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"SQRESULT_ERROR")," - This function has thrown an error.")),(0,a.yg)("h2",{id:"sq-api-calling-functions"},"Calling"),(0,a.yg)("p",null,"::: {#Call}\n:::"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"param char","*"," funcname"),(0,a.yg)("p",{parentName:"blockquote"},":   Name of the function to call"),(0,a.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,a.yg)("p",{parentName:"blockquote"},"This is a squirrel API wrapper added by northstar. It\\'s not available\nfor plugins and is supposed to abstract squirrel calls.\n::::"),(0,a.yg)("p",{parentName:"blockquote"},"This function assumes the squirrel VM is stopped/blocked at the moment\nof call"),(0,a.yg)("p",{parentName:"blockquote"},"Calling this function while the VM is running is likely to result in a\ncrash due to stack destruction"),(0,a.yg)("p",{parentName:"blockquote"},"If you want to call into squirrel asynchronously, use\n",(0,a.yg)("a",{parentName:"p",href:"#AsyncCall"},"AsyncCall")," instead."),(0,a.yg)("pre",{parentName:"blockquote"},(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'Call("PluginCallbackTest"); // PluginCallbackTest()\n'))),(0,a.yg)("p",null,"::: {#Call-args}\n:::"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"param char","*"," funcname"),(0,a.yg)("p",{parentName:"blockquote"},":   Name of the function to call"),(0,a.yg)("p",{parentName:"blockquote"},"param Args",".",".. args"),(0,a.yg)("p",{parentName:"blockquote"},":   vector of args to pass to the function"),(0,a.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,a.yg)("p",{parentName:"blockquote"},"This is a squirrel API wrapper added by northstar. It\\'s not available\nfor plugins and is supposed to abstract squirrel calls.\n::::"),(0,a.yg)("pre",{parentName:"blockquote"},(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'Call("PluginCallbackTest", "param"); // PluginCallbackTest("param")\n'))),(0,a.yg)("p",null,"::: {#AsyncCall}\n:::"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"param char","*"," funcname"),(0,a.yg)("p",{parentName:"blockquote"},":   Name of the function to call"),(0,a.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,a.yg)("p",{parentName:"blockquote"},"This is a squirrel API wrapper added by northstar. It\\'s not available\nfor plugins and is supposed to abstract squirrel calls.\n::::"),(0,a.yg)("p",{parentName:"blockquote"},"This function schedules a call to be executed on the next frame"),(0,a.yg)("p",{parentName:"blockquote"},"This is useful for things like threads and plugins, which do not run\non the main thread.")),(0,a.yg)("p",null,"::: {#AsyncCall-args}\n:::"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"param char","*"," funcname"),(0,a.yg)("p",{parentName:"blockquote"},":   Name of the function to call"),(0,a.yg)("p",{parentName:"blockquote"},"param Args",".",".. args"),(0,a.yg)("p",{parentName:"blockquote"},":   vector of args to pass to the function"),(0,a.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,a.yg)("p",{parentName:"blockquote"},"This is a squirrel API wrapper added by northstar. It\\'s not available\nfor plugins and is supposed to abstract squirrel calls.\n::::")),(0,a.yg)("p",null,"::: {#ns-call}\n:::"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,a.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,a.yg)("p",{parentName:"blockquote"},"param SQInteger args"),(0,a.yg)("p",{parentName:"blockquote"},":   number of arguments to call this function with"),(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("inlineCode",{parentName:"p"},"_call")," adds one to the ",(0,a.yg)("inlineCode",{parentName:"p"},"args")," count for ",(0,a.yg)("inlineCode",{parentName:"p"},"this"),"."),(0,a.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,a.yg)("p",{parentName:"blockquote"},"This is a squirrel API wrapper added by northstar. It\\'s not available\nfor plugins and is supposed to abstract squirrel calls.\n::::"),(0,a.yg)("pre",{parentName:"blockquote"},(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'SQObject functionobj {};\nSQRESULT result = g_pSquirrel<context>->sq_getfunction(sqvm, "PluginCallbackTest", &functionobj, 0); // Get a global squirrel function called "PluginCallbackTest"\n\nif (result == SQRESULT_ERROR)\n{\n    spdlog::error("Unable to find function. Is it global?");\n    return SQRESULT_ERROR;\n}\n\ng_pSquirrel<context>->pushobject(sqvm, &functionobj);\ng_pSquirrel<context>->pushroottable(sqvm);\ng_pSquirrel<context>->pushstring(sqvm, "param");\nreturn g_pSquirrel<context>->_call(sqvm, 1); // PluginCallbackTest("param")\n'))),(0,a.yg)("p",null,"::: {#sq-call}\n:::"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,a.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,a.yg)("p",{parentName:"blockquote"},"param SQInteger iArgs"),(0,a.yg)("p",{parentName:"blockquote"},":   number of parameters of the function"),(0,a.yg)("p",{parentName:"blockquote"},"param SQBool bShouldReturn"),(0,a.yg)("p",{parentName:"blockquote"},":   if true the function will push the return value to the stack"),(0,a.yg)("p",{parentName:"blockquote"},"param SQBool bThrowError"),(0,a.yg)("p",{parentName:"blockquote"},":   if true, if a runtime error occurs during the execution of the\ncall, the vm will invoke the error handler"),(0,a.yg)("p",{parentName:"blockquote"},"calls a closure or a native closure. The function pops all the\nparameters and leave the closure in the stack; if retval is true the\nreturn value of the closure is pushed. If the execution of the\nfunction is suspended through sq_suspendvm(), the closure and the\narguments will not be automatically popped from the stack."),(0,a.yg)("p",{parentName:"blockquote"},"When using to create an instance, push a dummy parameter to be filled\nwith the newly-created instance for the constructor\\'s ",(0,a.yg)("inlineCode",{parentName:"p"},"this"),"\nparameter.")),(0,a.yg)("h2",{id:"errors"},"Errors"),(0,a.yg)("p",null,"::: {#raiseerror}\n:::"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,a.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,a.yg)("p",{parentName:"blockquote"},"param SQChar","*"," error"),(0,a.yg)("p",{parentName:"blockquote"},":   string thrown"),(0,a.yg)("p",{parentName:"blockquote"},"returns"),(0,a.yg)("p",{parentName:"blockquote"},":   ",(0,a.yg)("inlineCode",{parentName:"p"},"SQRESULT_ERROR")),(0,a.yg)("p",{parentName:"blockquote"},"Throws an error with ",(0,a.yg)("inlineCode",{parentName:"p"},"error")," being the thrown object."),(0,a.yg)("pre",{parentName:"blockquote"},(0,a.yg)("code",{parentName:"pre",className:"language-cpp"},'ADD_SQFUNC("void", CPlugThrowTest, "", "", ScriptContext::UI)\n{\n    return g_pSquirrel<context>->raiseerror(sqvm, "test error");\n}\n\n/* sq:\ntry {\n    CPlugThrowTest()\n} catch(e) {\n    print(e) // "test error"\n}\n*/\n'))))}s.isMDXComponent=!0}}]);