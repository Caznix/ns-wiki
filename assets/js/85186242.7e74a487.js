"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[7375],{5680:(e,t,n)=>{n.d(t,{xA:()=>o,yg:()=>f});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},o=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),p=c(n),y=i,f=p["".concat(u,".").concat(y)]||p[y]||d[y]||a;return n?r.createElement(f,s(s({ref:t},o),{},{components:n})):r.createElement(f,s({ref:t},o))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=y;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:i,s[1]=l;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},1988:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(8168),i=(n(6540),n(5680));const a={},s="Structs",l={unversionedId:"squirrel/types/structs",id:"squirrel/types/structs",isDocsHomePage:!1,title:"Structs",description:"Structs are statically typed, fixed size structures that contain other",source:"@site/docs/squirrel/types/structs.md",sourceDirName:"squirrel/types",slug:"/squirrel/types/structs",permalink:"/ns-wiki/docs/squirrel/types/structs",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/squirrel/types/structs.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Strings",permalink:"/ns-wiki/docs/squirrel/types/strings"},next:{title:"Tables",permalink:"/ns-wiki/docs/squirrel/types/tables"}},u=[{value:"Declaration",id:"declaration",children:[]},{value:"Nesting Structs",id:"nesting-structs",children:[{value:"Self Nesting Structs",id:"self-nesting-structs",children:[]}]},{value:"Field Default Values",id:"field-default-values",children:[]},{value:"Singleton Instances",id:"singleton-instances",children:[]}],c={toc:u},o="wrapper";function p(e){let{components:t,...n}=e;return(0,i.yg)(o,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"structs"},"Structs"),(0,i.yg)("p",null,"Structs are statically typed, fixed size structures that contain other\nvalues. Similar to tables they are used to store mutliple values,\nhowever structs allow for each value to have a seperate type."),(0,i.yg)("h2",{id:"declaration"},"Declaration"),(0,i.yg)("p",null,"Before using a struct you need to define it and all contents."),(0,i.yg)("p",null,"The fields are typed like any regular variable."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"struct MyStruct\n{\n int field1\n string field2\n array<float> field3\n}\n")),(0,i.yg)("p",null,"You can then use ",(0,i.yg)("inlineCode",{parentName:"p"},"MyStruct")," as a type anywhere in the file. Structs are\ndefault initialized by assigning each field it\\'s appropriate default\nvalue. Struct fields can be indexed by writing ",(0,i.yg)("inlineCode",{parentName:"p"},"instance.field"),", just\nlike with tables."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"MyStruct myStructInstance\nprintt( myStructInstance.field1 ) // 0\n")),(0,i.yg)("p",null,"Structs are passed by reference so if a function changes a field that\nfield is changed for everything that uses the struct instance."),(0,i.yg)("p",null,"Struct instances can also get initiaized with different default values\nif required."),(0,i.yg)("p",null,"Similar like in static arrays, you can omit any fields that should have\ntheir type\\'s default value with ",(0,i.yg)("inlineCode",{parentName:"p"},"..."),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'MyStruct ins = { field3 = [], field1 = 1, ... }\nprintt( ins.field1, ins.field2 ) // 1, ""\n')),(0,i.yg)("h2",{id:"nesting-structs"},"Nesting Structs"),(0,i.yg)("p",null,"Struct fields can be any type, this includes previously declared structs\nas well."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"struct Engine\n{\n string manufacturer\n}\n\nstruct Tire\n{\n string material\n}\n\nstruct Car\n{\n Engine engine,\n Tire[4] tires\n}\n")),(0,i.yg)("h3",{id:"self-nesting-structs"},"Self Nesting Structs"),(0,i.yg)("p",null,"Structs can contain fields of their own type, however they need to be\n",(0,i.yg)("strong",{parentName:"p"},"null initialized"),". You can achieve this by specifying their type as\n",(0,i.yg)("inlineCode",{parentName:"p"},"ornull"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"struct LinkedList\n{\n var content\n LinkedList ornull nextNode\n}\n")),(0,i.yg)("h2",{id:"field-default-values"},"Field Default Values"),(0,i.yg)("p",null,"Any struct field can have an optional default value. If omitted, the\ntype\\'s default value is used instead."),(0,i.yg)("p",null,"Default values need to be a constant expression that can be evaluated at\ncompile time."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"struct Dice\n{\n int[6] sides = [ 1, 2, 3, 4, 5, 6 ]\n}\n")),(0,i.yg)("h2",{id:"singleton-instances"},"Singleton Instances"),(0,i.yg)("p",null,"You can define a struct and initialize a local variable of that struct\ninstantly with singletons. These are often used to have global variables\nthat are only used in a single script file."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'struct {\n var menu\n} file\n\nvoid function InitMyMenu()\n{\n file.menu = GetMenu( "SomeMenu" )\n}\n')),(0,i.yg)("p",null,"Singletons can also be used for struct fields."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'struct Car\n{\n struct {\n   string manufacturer\n   } engine\n}\n\n// ...\nCar car\ncar.engine.manufacturer = "Vinson Dynamics"\n')))}p.isMDXComponent=!0}}]);