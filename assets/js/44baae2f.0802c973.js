"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[4298],{6178:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var s=t(4848),i=t(8453);const r={},o="API",d={id:"reference/northstar/modsettings",title:"modsettings",description:"Mod Settings ====",source:"@site/docs/reference/northstar/modsettings.md",sourceDirName:"reference/northstar",slug:"/reference/northstar/modsettings",permalink:"/ns-wiki/docs/reference/northstar/modsettings",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/reference/northstar/modsettings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HTTP and JSON",permalink:"/ns-wiki/docs/reference/northstar/httprequests"},next:{title:"Server Authentification",permalink:"/ns-wiki/docs/reference/northstar/msinterface"}},l={},a=[];function c(e){const n={admonition:"admonition",blockquote:"blockquote",code:"code",div:"div",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Mod Settings ===="}),"\n",(0,s.jsx)(n.p,{children:"Setup ----"}),"\n",(0,s.jsx)(n.p,{children:"ConVars are the easiest way to implement settings for your mod using the\r\nMod Settings API."}),"\n",(0,s.jsx)(n.p,{children:"Your mod needs to register itself and all ConVars that are a part of\r\nyour mod that should be accessible in the Mod Settings menu. To do this,\r\nsimply add a new script to your mod that runs only in the UI VM like\r\nthis:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"Path": "ui/ms_example_mod.nut",\r\n"RunOn": "UI",\r\n"UICallback": {\r\n  "Before": "ExampleMod_AddModSettings"\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Inside of the callback specified here, you can add your settings."}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"api",children:"API"})}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsx)(n.div,{children:(0,s.jsx)(n.p,{children:"Warning"})}),(0,s.jsxs)(n.p,{children:["ConVar values will only persist if the ConVar has an ARCHIVE flag. For\r\nClients, use ",(0,s.jsx)(n.code,{children:"FCVAR_ARCHIVE_PLAYERPROFILE"}),"."]}),(0,s.jsxs)(n.p,{children:["All Mod Settings functions have a ",(0,s.jsx)(n.code,{children:"stackPos"})," paramter. This parameter\r\nshould only be changed if you're writing custom wrappers for the\r\nsettings."]})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Adds a new category in the settings for your mod"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.div,{children:(0,s.jsx)(n.p,{children:"Note"})}),(0,s.jsx)(n.p,{children:"It's mandatory to register a mod before you can add any settings"})]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Adds a new category to your mod"}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.div,{children:(0,s.jsx)(n.p,{children:"Note"})}),(0,s.jsx)(n.p,{children:"It's mandatory to register a category for your mod. A mod may have\r\nmultiple categories"})]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Adds a basic setting to the last declared category."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string conVar"})," - the ConVar this setting modifies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string displayName"})," - The display string of this setting. This\r\ncan be a localization token."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'string type = ""'})," - Optional type of this ConVar. This guards\r\nagainst users inserting invalid values."]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"int stackPos = 2"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Types:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"int"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"bool"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"float"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"float2"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"float3"})," / ",(0,s.jsx)(n.code,{children:"vector"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"other types will default to setting a string for the ConVar."}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Adds a setting to the menu that uses an enum. Users can navigate with\r\nbuttons next to the input between possible values."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string conVar"})," - the ConVar this setting modifies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string displayName"})," - The display string of this setting. This\r\ncan be a localization token."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"array<string> values"})," - all possible values of this enum. The\r\nConVar value will be set to the index of the selected value."]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"int stackPos = 2"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Adds a ConVar setting to the menu that has a slider."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string conVar"})," - the conVar this setting modifies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"string displayName"})," - The display string of this setting. This\r\ncan be a localization token."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"float min = 0.0"})," - the minimum value of the ConVar"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"float max = 0.0"})," - the maximum value of the ConVar"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"float stepSize = 0.1"})," - the distance between each possible value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bool forceClamp = false"})," - wether to force the value to round to\r\nthe nearest interval of ",(0,s.jsx)(n.code,{children:"stepValue"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.div,{children:(0,s.jsx)(n.p,{children:"Note"})}),(0,s.jsx)(n.p,{children:"Whenever Mod Settings is used, the value will be clamped to the\r\nnearest value available in the slider."})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Examples ----"}),"\n",(0,s.jsx)(n.p,{children:"Settings Declaration ^^^^"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'AddModTitle( "#MY_LOCALIZED_MOD_TITLE" )\r\n\r\nAddModCategory( "Gameplay" )\r\nAddConVarSetting( "my_mod_gamer_setting", "Gamer Setting", "string" )\r\nAddConVarSettingEnum( "my_mod_enum_setting_whatever", "Cool Feature", [ "Disabled", "Enabled" ] )\r\n\r\nAddModCategory( "Visuals" )\r\nAddConVarSetting( "my_mod_display_color", "Display Color", "vector" )\r\nAddModSettingsButton( "Preview", void function(){ AdvanceMenu( "MyModMenu" ) } )  // Assumes you have "MyModMenu" set up etc.\n'})}),"\n",(0,s.jsx)(n.p,{children:"Wrapper ^^^^"}),"\n",(0,s.jsx)(n.p,{children:"To create custom wrapper functions you need to specify the stack\r\nposition where the root of your Mod Setting declarations take place."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"void function AddModSettingsDropDown( string displayName, array<string> options )\r\n{\r\n  NSModSettingsAddButton( displayName, void function() { OpenDropDown( options ) }, 3 )\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that in this example the stack position is ",(0,s.jsx)(n.code,{children:"3"}),", since\r\n",(0,s.jsx)(n.code,{children:"AddModSettingsButton"})," needs to walk one additional step to the callback\r\nfunction."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);