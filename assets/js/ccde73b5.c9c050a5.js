"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[6397],{9489:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>l});var i=r(4848),a=r(8453);const t={},o="Creating gamemodes",s={id:"guides/scripting/gamemodemods",title:"Creating gamemodes",description:"Creating a gamemode is significantly more complex than making",source:"@site/docs/guides/scripting/gamemodemods.md",sourceDirName:"guides/scripting",slug:"/guides/scripting/gamemodemods",permalink:"/ns-wiki/docs/guides/scripting/gamemodemods",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/guides/scripting/gamemodemods.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Creating a custom Menu",permalink:"/ns-wiki/docs/guides/scripting/custommenus"},next:{title:"Modding Tools",permalink:"/ns-wiki/docs/guides/tools/"}},d={},l=[{value:"The <code>mod.json</code>",id:"the-modjson",level:2},{value:"Language file",id:"language-file",level:2},{value:"Shared functions",id:"shared-functions",level:2},{value:"Server-side function",id:"server-side-function",level:2},{value:"Randomise function",id:"randomise-function",level:3},{value:"Localization",id:"localization",level:2},{value:"Maps",id:"maps",level:2},{value:"Closing words",id:"closing-words",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"creating-gamemodes",children:"Creating gamemodes"})}),"\n",(0,i.jsxs)(n.p,{children:["Creating a gamemode is ",(0,i.jsx)(n.strong,{children:"significantly"})," more complex than making\r\nmutators. The main differences are the number of things you must define\r\nin order to create a functioning gamemode."]}),"\n",(0,i.jsx)(n.p,{children:"For example, the client localisation, the way the gamemode is defined\r\n(FFA, TDM, etc), the scoring system, respawn system (FFA or TDM\r\nspawnpoints) and team mechanics must all be considered."}),"\n",(0,i.jsxs)(n.h2,{id:"the-modjson",children:["The ",(0,i.jsx)(n.code,{children:"mod.json"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"mod.json"})," is responsible for governing when, and where your mod is\r\nloaded, and follows a layout that is fairly complicated at first glance.\r\nHowever, once you get the hang of it, it should be fairly easy to use."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\r\n    "Name" : "SimpleRandomiser",\r\n    "Description" : "A randomiser gamemode that randomizes your loadouts!",\r\n    "Version": "0.1.0",\r\n    "LoadPriority": 1,\n'})}),"\n",(0,i.jsx)(n.p,{children:"The script above defines the pubic and listed details of the mod."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"Scripts": [\r\n    {\r\n        "Path": "gamemodes/_gamemode_simplerandomiser.nut",\r\n    "RunOn": "SERVER && MP"\r\n    },\r\n    {\r\n        "Path": "gamemodes/cl_gamemode_simplerandomiser.nut",\r\n        "RunOn": "CLIENT && MP"\r\n    },\r\n    {\r\n        "Path": "sh_gamemode_simplerandomiser.nut",\r\n        "RunOn": "MP",\r\n        "ClientCallback": {\r\n            "Before": "simplerandomiser_init"\r\n        },\r\n        "ServerCallback": {\r\n            "Before": "simplerandomiser_init"\r\n        }\r\n    }\r\n],\n'})}),"\n",(0,i.jsx)(n.p,{children:"The script above defines both what functions to run, when to run them\r\nand WHERE to run them,"}),"\n",(0,i.jsxs)(n.p,{children:["The first one being ",(0,i.jsx)(n.code,{children:"_gamemode_simplerandomiser.nut"})," runs the server\r\nscripts, which handles the portion of everything related to the player,\r\nsuch as taking their weapons and replacing it with a different one."]}),"\n",(0,i.jsxs)(n.p,{children:["Second one being ",(0,i.jsx)(n.code,{children:"cl_gamemode_simplerandomiser.nut"})," is where the client\r\nscripts run to perform stuff locally on the player's game, such as\r\nplaying music, receiving announcement texts from the server and so on."]}),"\n",(0,i.jsxs)(n.p,{children:["Lastly, ",(0,i.jsx)(n.code,{children:"sh_gamemode_simplerandomiser.nut"})," is a shared script between\r\nserver and client, in this case it runs your ",(0,i.jsx)(n.code,{children:"simplerandomiser_init"}),' in\r\norder to assign many variables for the server and client to "know"\r\nabout this gamemode.']}),"\n",(0,i.jsx)(n.p,{children:"For example, both server and client needs to know whether if this\r\ngamemode exists in the private match settings, the scoring HUD and\r\nsystem, the spawnpoints configuration and many more."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"Localisation": [\r\n    "resource/simplerandomiser_localisation_%language%.txt"\r\n]\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This defines the path to the language file, and its main use is to\r\nlocalize strings such as the announcement texts, gamemode and so on."}),"\n",(0,i.jsxs)(n.p,{children:["Name this file ",(0,i.jsx)(n.code,{children:"mod.json"}),", and it should go in the mods root folder,\r\nthat being /yourmodname."]}),"\n",(0,i.jsx)(n.p,{children:"Here's what the end result would look like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\r\n    "Name" : "SimpleRandomiser",\r\n    "Description" : "SimpleRandomiser",\r\n    "Version": "0.1.0",\r\n    "LoadPriority": 1,\r\n    "Scripts": [\r\n    {\r\n        "Path": "gamemodes/_gamemode_simplerandomiser.nut",\r\n    "RunOn": "SERVER && MP"\r\n    },\r\n    {\r\n        "Path": "gamemodes/cl_gamemode_simplerandomiser.nut",\r\n        "RunOn": "CLIENT && MP"\r\n    },\r\n    {\r\n        "Path": "sh_gamemode_simplerandomiser.nut",\r\n        "RunOn": "MP",\r\n        "ClientCallback": {\r\n            "Before": "simplerandomiser_init"\r\n        },\r\n        "ServerCallback": {\r\n            "Before": "simplerandomiser_init"\r\n        }\r\n    }\r\n],\r\n    "Localisation": [\r\n        "resource/simplerandomiser_localisation_%language%.txt"\r\n    ]\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"language-file",children:"Language file"}),"\n",(0,i.jsxs)(n.p,{children:["This follows a fairly simple template, the only thing of note is that\r\nyou often get strange behaviour using ",(0,i.jsx)(n.code,{children:"UTF-8"})," when saving the file\r\ninstead of using ",(0,i.jsx)(n.code,{children:"UTF-16 LE"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'"lang"\r\n{\r\n    "Language" "english"\r\n    "Tokens"\r\n    {\r\n        "MODE_SETTING_CATEGORY_SIMPLERANDOMISER" "Simple Randomiser"\r\n        "SIMPLERANDOMISER" "Randomise"\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Name this file ",(0,i.jsx)(n.code,{children:"simplerandomiser_localisation_english.txt"})," and place it\r\nin the ",(0,i.jsx)(n.code,{children:"yourmodsname/mod/resource/"})," folder."]}),"\n",(0,i.jsx)(n.h2,{id:"shared-functions",children:"Shared functions"}),"\n",(0,i.jsxs)(n.p,{children:["Let's begin the process by first creating the file\r\n",(0,i.jsx)(n.code,{children:"sh_gamemode_simplerandomiser.nut"})," and making the core components of the\r\ngamemode, which is to define the gamemode properties."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'global function simplerandomiser_init // initializing functions\r\nglobal const string GAMEMODE_SIMPLERANDOMISER = "rand" \r\n// we want a short term to use which allows server owners to \r\n// select our gamemode without typing the entire name\r\n// also makes it easier for us lol\r\n\r\nvoid function simplerandomiser_init()\r\n{\r\n    // start defining what to do before the map loads on this gamemode\r\nAddCallback_OnCustomGamemodesInit( CreateGamemodeRand ) // define various properties such as name, desc, so on\r\nAddCallback_OnRegisteringCustomNetworkVars( RandRegisterNetworkVars ) // server callbacks stuff\r\n}\r\n\r\nvoid function CreateGamemodeRand()\r\n{\r\nGameMode_Create( GAMEMODE_SIMPLERANDOMISER )\r\nGameMode_SetName( GAMEMODE_SIMPLERANDOMISER, "#GAMEMODE_SIMPLERANDOMISER" ) // localizations will be handled later\r\nGameMode_SetDesc( GAMEMODE_SIMPLERANDOMISER, "#PL_rand_desc" )\r\nGameMode_SetGameModeAnnouncement( GAMEMODE_SIMPLERANDOMISER, "grnc_modeDesc" )\r\nGameMode_SetDefaultTimeLimits( GAMEMODE_SIMPLERANDOMISER, 10, 0.0 ) // a time limit of 10 minutes\r\nGameMode_AddScoreboardColumnData( GAMEMODE_SIMPLERANDOMISER, "#SCOREBOARD_SCORE", PGS_ASSAULT_SCORE, 2 ) // dont fuck with it\r\nGameMode_AddScoreboardColumnData( GAMEMODE_SIMPLERANDOMISER, "#SCOREBOARD_PILOT_KILLS", PGS_PILOT_KILLS, 2 ) // dont fuck with it\r\nGameMode_SetColor( GAMEMODE_SIMPLERANDOMISER, [147, 204, 57, 255] ) // dont fuck with it\r\n\r\nAddPrivateMatchMode( GAMEMODE_SIMPLERANDOMISER ) // add to private lobby modes\r\n\r\nAddPrivateMatchModeSettingEnum("#PL_rand", "rand_enableannouncements", ["#SETTING_DISABLED", "#SETTING_ENABLED"], "1")\r\n// creates a togglable riff whether or not we want to announce a text to the client\r\nAddPrivateMatchModeSettingArbitrary("#PL_rand", "rand_announcementduration", "3")\r\n// Creates a riff with an arbitrary numerical value for how long the announcement text remains on screen\r\n// These riffs can be accessed from server configs or from the private match settings screen, under the "Simple Randomiser" category\r\n\r\n\r\n// set this to 25 score limit default\r\nGameMode_SetDefaultScoreLimits( GAMEMODE_SIMPLERANDOMISER, 25, 0 )\r\n\r\n#if SERVER\r\n    GameMode_AddServerInit( GAMEMODE_SIMPLERANDOMISER, GamemodeRand_Init ) // server side initalizing function\r\n    GameMode_SetPilotSpawnpointsRatingFunc( GAMEMODE_SIMPLERANDOMISER, RateSpawnpoints_Generic )\r\n    GameMode_SetTitanSpawnpointsRatingFunc( GAMEMODE_SIMPLERANDOMISER, RateSpawnpoints_Generic )\r\n            // until northstar adds more spawnpoints algorithm, we are using the default.\r\n#elseif CLIENT\r\n    GameMode_AddClientInit( GAMEMODE_SIMPLERANDOMISER, ClGamemodeRand_Init ) // client side initializing function\r\n#endif\r\n#if !UI\r\n    GameMode_SetScoreCompareFunc( GAMEMODE_SIMPLERANDOMISER, CompareAssaultScore ) \r\n            // usually compares which team\'s score is higher and places the winning team on top of the losing team in the scoreboard\r\n#endif\r\n}\r\n\r\nvoid function RandRegisterNetworkVars()\r\n{\r\nif ( GAMETYPE != GAMEMODE_SIMPLERANDOMISER )\r\n    return\r\n\r\nRemote_RegisterFunction( "ServerCallback_Randomiser" )\r\n    // will come in useful later when we want the server to communicate to the client\r\n    // for example, making an announcement appear on the client\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The comments should hopefully explain what most of everything does, but\r\njust to summarize:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"we defined the gamemode's name and description using a string that\r\nwe will localize ourselves later."}),"\n",(0,i.jsx)(n.li,{children:"we set the default scoring method, what spawnpoint algorithm to use,\r\nas well as the scoreboard size."}),"\n",(0,i.jsx)(n.li,{children:"we defined server callbacks, which we will use later on in the\r\nserver scripts portion of this gamemode."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Now that we're done, name this file ",(0,i.jsx)(n.code,{children:"sh_gamemode_simplerandomiser.nut"}),"\r\nand place it in the ",(0,i.jsx)(n.code,{children:"yourmodsname/mod/scripts/vscripts/gamemodes"}),"\r\nfolder."]}),"\n",(0,i.jsx)(n.h2,{id:"server-side-function",children:"Server-side function"}),"\n",(0,i.jsxs)(n.p,{children:["Now that we're down with defining the gamemode, its time to focus on\r\nthe component on that makes the gamemode function in-game. For this, it\r\nwill be mostly handled by the server scripts, so head into\r\n",(0,i.jsx)(n.code,{children:"_gamemode_simplerandomiser.nut"})," to begin writing the randomizing\r\nscript."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"global function GamemodeRand_Init\r\n\r\nvoid function GamemodeRand_Init()\r\n{\r\n    #if SERVER\r\nSetLoadoutGracePeriodEnabled( false ) // prevent modifying loadouts with grace period\r\nSetWeaponDropsEnabled( false ) // prevents picking up weapons on the ground\r\n    AddCallback_OnPlayerRespawned( GiveRandomGun )\r\n    #endif\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["As you may have noticed, checking if it is a server is a special case,\r\nso we use ",(0,i.jsx)(n.code,{children:"#if SERVER"})," and ",(0,i.jsx)(n.code,{children:"#endif"})," instead of the usual\r\n",(0,i.jsx)(n.code,{children:"if(thing){stuff}"})]}),"\n",(0,i.jsx)(n.p,{children:"Now that our initial function is created, we now have the game\r\ntriggering [GiveRandomGun] when a player spawns, but we\r\ndon't have any such function, so let's begin creating one."}),"\n",(0,i.jsx)(n.p,{children:"Firstly, we need to know what weapons we can equip. For this we define\r\nan array:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'array<string> pilotWeapons = ["mp_weapon_alternator_smg",\r\n                              "mp_weapon_autopistol",\r\n                              "mp_weapon_car",\r\n                              "mp_weapon_dmr"]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Here we have defined an array with only 4 weapons in it, you can make\r\nthis list however you like but remember to separate all but the last\r\nitem with a ",(0,i.jsx)(n.code,{children:","})]}),"\n",(0,i.jsx)(n.h3,{id:"randomise-function",children:"Randomise function"}),"\n",(0,i.jsxs)(n.p,{children:["As we already know its going to call the function ",(0,i.jsx)(n.code,{children:"GiveRandomGun"})," when a\r\nplayer respawns, let's define that now. First we strip any existing\r\nweapons:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"void function GiveRandomGun(entity player)\r\n{\r\n    foreach ( entity weapon in player.GetMainWeapons() )\r\n        player.TakeWeaponNow( weapon.GetWeaponClassName() )\n"})}),"\n",(0,i.jsx)(n.p,{children:"This iterates through each weapon (that being the primary, secondary and\r\nanti-titan weapons) and removes them individually."}),"\n",(0,i.jsx)(n.p,{children:"Then lets give them a new, random weapon by selecting a random item from\r\nour previous array:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"player.GiveWeapon( pilotWeapons[ RandomInt( pilotWeapons.len() ) ] )\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now, remember the server callback that we defined earlier in\r\n",(0,i.jsx)(n.code,{children:"sh_gamemode_simplerandomiser.nut"}),"? Let's put that to use. We are going\r\nto make it so the player receives an announcement whenever they have\r\ntheir weapons randomized."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'// checks if the toggle option is set to enabled\r\nif ( GetCurrentPlaylistVarInt( "rand_enableannouncements", 1 ) == 1 )\r\n    Remote_CallFunction_NonReplay( player, "ServerCallback_Randomiser" ) // call the function that will be used client-side\n'})}),"\n",(0,i.jsx)(n.p,{children:"Overall, the server script should look like this."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'global function GamemodeRand_Init\r\n\r\nvoid function GamemodeRand_Init()\r\n{\r\n    #if SERVER\r\nSetLoadoutGracePeriodEnabled( false ) // prevent modifying loadouts with grace period\r\nSetWeaponDropsEnabled( false ) // prevents picking up weapons on the ground\r\n    AddCallback_OnPlayerRespawned( GiveRandomGun )\r\n    #endif\r\n}\r\n\r\narray<string> pilotWeapons = ["mp_weapon_alternator_smg",\r\n                              "mp_weapon_autopistol",\r\n                              "mp_weapon_car",\r\n                              "mp_weapon_dmr"]\r\n\r\nvoid function GiveRandomGun(entity player)\r\n{\r\n    foreach ( entity weapon in player.GetMainWeapons() )\r\n        player.TakeWeaponNow( weapon.GetWeaponClassName() )\r\n\r\n    player.GiveWeapon( pilotWeapons[ RandomInt( pilotWeapons.len() ) ] )\r\n\r\n    // checks if the toggle option is set to enabled\r\n    if ( GetCurrentPlaylistVarInt( "rand_enableannouncements", 1 ) == 1 )\r\n        Remote_CallFunction_NonReplay( player, "ServerCallback_Randomiser", GetCurrentPlaylistVarFloat( "rand_announcementduration", 3 ) ) // call the function that will be used client-side\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Name this file ",(0,i.jsx)(n.code,{children:"_gamemode_simplerandomiser.nut"})," and place it in the\r\n",(0,i.jsx)(n.code,{children:"yourmodsname/mod/scripts/vscripts/gamemodes"})," folder as well. Make sure\r\nto double check that all spellings are correct in your mod as everything\r\nis case-sensitive."]}),"\n",(0,i.jsxs)(n.p,{children:["Client-side functions ------------------Lastly, for\r\nyour ",(0,i.jsx)(n.code,{children:"cl_gamemode_simplerandomiser.nut"}),", we are going to utilize the\r\ncallback functions from earlier, as well as add some music to play\r\nduring the gamemode."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'global function ClGamemodeRand_Init\r\nglobal function ServerCallback_Randomiser\r\n\r\nvoid function ClGamemodeRand_Init()\r\n{\r\n    RegisterLevelMusicForTeam( eMusicPieceID.LEVEL_INTRO, "music_mp_freeagents_intro", TEAM_IMC )\r\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_INTRO, "music_mp_freeagents_intro", TEAM_MILITIA )\r\n\r\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_WIN, "music_mp_freeagents_outro_win", TEAM_IMC )\r\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_WIN, "music_mp_freeagents_outro_win", TEAM_MILITIA )\r\n\r\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_DRAW, "music_mp_freeagents_outro_lose", TEAM_IMC )\r\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_DRAW, "music_mp_freeagents_outro_lose", TEAM_MILITIA )\r\n\r\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LOSS, "music_mp_freeagents_outro_lose", TEAM_IMC )\r\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LOSS, "music_mp_freeagents_outro_lose", TEAM_MILITIA )\r\n\r\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_THREE_MINUTE, "music_mp_freeagents_almostdone", TEAM_IMC )\r\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_THREE_MINUTE, "music_mp_freeagents_almostdone", TEAM_MILITIA )\r\n\r\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LAST_MINUTE, "music_mp_freeagents_lastminute", TEAM_IMC )\r\nRegisterLevelMusicForTeam( eMusicPieceID.LEVEL_LAST_MINUTE, "music_mp_freeagents_lastminute", TEAM_MILITIA )\r\n}\r\n\r\nvoid function ServerCallback_Randomiser( float duration )\r\n{\r\n    AnnouncementData announcement = Announcement_Create( "#RAND_RANDOMIZED" )\r\nAnnouncement_SetSubText( announcement, "#RAND_RANDOMIZED_DESC" )\r\nAnnouncement_SetTitleColor( announcement, <0,0,1> )\r\nAnnouncement_SetPurge( announcement, true )\r\nAnnouncement_SetPriority( announcement, 200 ) //Be higher priority than Titanfall ready indicator etc\r\nAnnouncement_SetSoundAlias( announcement, SFX_HUD_ANNOUNCE_QUICK )\r\nAnnouncement_SetDuration( announcement, duration )\r\nAnnouncement_SetStyle( announcement, ANNOUNCEMENT_STYLE_QUICK )\r\nAnnouncementFromClass( GetLocalViewPlayer(), announcement )\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"What this script does is quite simple. It registers default music to\r\nplay during the intro portion, when winning, drawing or losing, as well\r\nas the event when the timelimit reaches 3 minutes or 1 minute left."}),"\n",(0,i.jsx)(n.p,{children:"Also, it also displays an announcement towards the player when they have\r\ntheir weapons randomized."}),"\n",(0,i.jsx)(n.h2,{id:"localization",children:"Localization"}),"\n",(0,i.jsx)(n.p,{children:'"So we\'re all done with the scripting stuff, right? That means we can\r\nfinally run the gamemode itself!"'}),"\n",(0,i.jsx)(n.p,{children:"Technically, yes, you could. But it wouldn't look pretty. Remember all\r\nthose strings with the # symbol in front of them? We have to localize\r\nthem first so it displays correctly."}),"\n",(0,i.jsxs)(n.p,{children:["Hence, open your ",(0,i.jsx)(n.code,{children:"simplerandomiser_localisation_english.txt"})," which is\r\nlocated in the ",(0,i.jsx)(n.code,{children:"yourmodsname/mod/resource/"})," folder."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'"lang"\r\n{\r\n"Language" "english"\r\n"Tokens"\r\n{\r\n    "PL_rand" "Simple Randomiser" // displays in the lobby settings\r\n            "rand_enableannouncements" "Toggle announcements" // describe the togglable setting\r\n    "rand_announcementduration" "Announcement duration" // describe the numerical setting\r\n    "PL_rand_lobby" "Simple Randomiser Lobby" // displays in lobby\r\n    "PL_rand_desc" "Your weapons are randomised! Fight and win!" // displays in the description of the gamemode in the lobby\r\n    "PL_rand_hint" "Your weapons are randomised! Fight and win!" // displays in the scoreboard of the gamemode ingame\r\n    "PL_rand_abbr" "RAND"\r\n    "GAMEMODE_TBAG" "Simple Randomiser" // displays in the loading screen\r\n            "RAND_RANDOMIZED" "Weapons Randomized" // displays in the announcement text\r\n            "RAND_RANDOMIZED_DESC" "Fight and win!" // displays below the announcement text, as a description\r\n}\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Alright, we're finally done! However, there's just one thing missing,\r\nwhich is to let the game know what maps are available for this gamemode\r\nto play on."}),"\n",(0,i.jsx)(n.h2,{id:"maps",children:"Maps"}),"\n",(0,i.jsxs)(n.p,{children:["We will need to create a file called ",(0,i.jsx)(n.code,{children:"playlists_v2.txt"})," and place it in\r\n",(0,i.jsx)(n.code,{children:"yourmodsname/keyvalues"})," folder."]}),"\n",(0,i.jsxs)(n.p,{children:["Yes, you will need to create a folder called ",(0,i.jsx)(n.code,{children:"keyvalues"})," which is\r\nseparate from the ",(0,i.jsx)(n.code,{children:"mod"})," folder that we placed all our scripts and\r\nlocalization inside."]}),"\n",(0,i.jsxs)(n.p,{children:["Next, inside this ",(0,i.jsx)(n.code,{children:"playlists_v2.txt"}),", we will need to allow/disallow\r\nwhat maps can the gamemode be played on."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"playlists\r\n{\r\nGamemodes\r\n{\r\n    rand\r\n    {\r\n        inherit defaults\r\n        vars\r\n        {\r\n            name #PL_rand\r\n            lobbytitle #PL_rand_lobby\r\n            description #PL_rand_desc\r\n            hint #PL_rand_hint\r\n            abbreviation #PL_rand_abbr\r\n            max_players 12\r\n            max_teams 2\r\n            classic_mp 1\r\n\r\n            gamemode_score_hint #GAMEMODE_SCORE_HINT_TDM\r\n        }\r\n    }\r\n    }\r\n    Playlists\r\n{\r\n    rand\r\n    {\r\n        inherit defaults\r\n        vars\r\n        {\r\n            name #PL_rand\r\n            lobbytitle #PL_rand_lobby\r\n            description #PL_rand_desc\r\n            abbreviation #PL_rand_abbr\r\n            image ps\r\n            //mixtape_slot 7\r\n            mixtape_timeout 120\r\n            visible 0\r\n        }\r\n        gamemodes\r\n        {\r\n            rand\r\n            {\r\n                    maps\r\n                {\r\n                        mp_forwardbase_kodai 1\r\n                                            mp_grave 1\r\n                                            mp_homestead 1\r\n                                            mp_thaw 1\r\n                                            mp_black_water_canal 1\r\n                                            mp_eden 1\r\n                                            mp_drydock 1\r\n                                            mp_crashsite3 1\r\n                                            mp_complex3 1\r\n                                            mp_angel_city 1\r\n                                            mp_colony02 1\r\n                                            mp_glitch 1\r\n                    mp_lf_stacks 1\r\n                    mp_lf_deck 1\r\n                    mp_lf_meadow 1\r\n                    mp_lf_traffic 1\r\n                    mp_lf_township 1\r\n                    mp_lf_uma 1\r\n                    mp_relic02 1\r\n                    mp_wargames 1\r\n                    mp_rise 1\r\n                                            mp_coliseum 1\r\n                                            mp_coliseum_column 1\r\n                }\r\n            }\r\n        }\r\n    }\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["There isn't much to say here except that we enabled this gamemode to\r\nplayed on all maps. So if this gamemode is set to auto-rotate maps in a\r\nserver, it will go from one map to the next in order. You could disable\r\ncertain maps by changing the ",(0,i.jsx)(n.code,{children:"1"})," to a ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Another thing to note is that under the ",(0,i.jsx)(n.code,{children:"Playlists"})," tab, there is an\r\n",(0,i.jsx)(n.code,{children:"image"})," slot. You could change the image that displays when selecting a\r\ngamemode in the private match lobby. You can find out what the keyvalues\r\nfor the other images by checking out other gamemodes in\r\n",(0,i.jsx)(n.code,{children:"Northstar.Custom/keyvalues/playlists_v2.txt"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"closing-words",children:"Closing words"}),"\n",(0,i.jsx)(n.p,{children:"And that should be all you need in order to create a gamemode. Thanks\r\nfor reading all the way to this point, and I hope you have learnt a\r\nthing or two."}),"\n",(0,i.jsx)(n.p,{children:"If you ever have a question or two, feel free to head into the Northstar\r\nDiscord and ask about in #modding-chat."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Revised by ",(0,i.jsx)(n.code,{children:"x3Karma#6984"})]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var i=r(6540);const a={},t=i.createContext(a);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);