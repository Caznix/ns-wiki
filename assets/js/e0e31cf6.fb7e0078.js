"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[8784],{5680:(e,t,a)=>{a.d(t,{xA:()=>i,yg:()=>b});var n=a(6540);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},i=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},s="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),s=u(a),m=o,b=s["".concat(c,".").concat(m)]||s[m]||g[m]||r;return a?n.createElement(b,p(p({ref:t},i),{},{components:a})):n.createElement(b,p({ref:t},i))}));function b(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,p=new Array(r);p[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:o,p[1]=l;for(var u=2;u<r;u++)p[u]=a[u];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7047:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>p,default:()=>s,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=a(8168),o=(a(6540),a(5680));const r={},p=void 0,l={unversionedId:"source/squirrel/cpp_api/objecthandling",id:"source/squirrel/cpp_api/objecthandling",isDocsHomePage:!1,title:"objecthandling",description:"Warning",source:"@site/docs/source/squirrel/cpp_api/objecthandling.md",sourceDirName:"source/squirrel/cpp_api",slug:"/source/squirrel/cpp_api/objecthandling",permalink:"/ns-wiki/docs/source/squirrel/cpp_api/objecthandling",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/source/squirrel/cpp_api/objecthandling.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ Interface",permalink:"/ns-wiki/docs/source/squirrel/cpp_api/index"},next:{title:"objectmanipulation",permalink:"/ns-wiki/docs/source/squirrel/cpp_api/objectmanipulation"}},c=[{value:"Pushing Objects to the stack",id:"pushing-objects-to-the-stack",children:[]},{value:"Getting Objects from the stack",id:"getting-objects-from-the-stack",children:[]},{value:"Stack Infos",id:"stack-infos",children:[]},{value:"Other",id:"other",children:[]}],u={toc:c},i="wrapper";function s(e){let{components:t,...a}=e;return(0,o.yg)(i,(0,n.A)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,":::: warning\n::: title\nWarning\n:::"),(0,o.yg)("p",null,"Parameters or descriptions may be wrong or incomplete"),(0,o.yg)("p",null,"This list is incomplete and only lists methods available in\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/R2Northstar/NorthstarLauncher/blob/main/NorthstarDLL/squirrel/squirrel.h"},"squirrel.h"),"."),(0,o.yg)("p",null,"Some descriptions are taken from the ",(0,o.yg)("a",{parentName:"p",href:"http://www.squirrel-lang.org/mainsite/squirreldoc/reference/api_reference.html"},"Squirrel\nDocumentation"),"\n::::"),(0,o.yg)("h1",{id:"object-creation-and-handling"},"Object creation and handling"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"You can access all sq functions only with a ",(0,o.yg)("inlineCode",{parentName:"p"},"SquirrelManager"),"\ninstance. You have one available inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"ADD_SQFUNC")," macro.")),(0,o.yg)("h2",{id:"pushing-objects-to-the-stack"},"Pushing Objects to the stack"),(0,o.yg)("p",null,"::: {#pushbool}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target VM"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger bVal"),(0,o.yg)("p",{parentName:"blockquote"},":   the bool that will be pushed"),(0,o.yg)("p",{parentName:"blockquote"},"pushes a boolean to the stack")),(0,o.yg)("p",null,"::: {#pushinteger}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target VM"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger iVal"),(0,o.yg)("p",{parentName:"blockquote"},":   the integer that will be pushed"),(0,o.yg)("p",{parentName:"blockquote"},"pushes an integer to the stack")),(0,o.yg)("p",null,"::: {#pushfloat}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target VM"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger fVal"),(0,o.yg)("p",{parentName:"blockquote"},":   the float that will be pushed"),(0,o.yg)("p",{parentName:"blockquote"},"pushes a float to the stack")),(0,o.yg)("p",null,"::: {#pushstring}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target VM"),(0,o.yg)("p",{parentName:"blockquote"},"param SQChar","*"," sVal"),(0,o.yg)("p",{parentName:"blockquote"},":   the string that will be pushed"),(0,o.yg)("p",{parentName:"blockquote"},"param int len"),(0,o.yg)("p",{parentName:"blockquote"},":   length of the string ",(0,o.yg)("inlineCode",{parentName:"p"},"sVal")),(0,o.yg)("p",{parentName:"blockquote"},"remarks"),(0,o.yg)("p",{parentName:"blockquote"},":   if the parameter length is less than 0 the VM will calculate the\nlength using ",(0,o.yg)("inlineCode",{parentName:"p"},"strlen")),(0,o.yg)("p",{parentName:"blockquote"},"pushes a string to the stack")),(0,o.yg)("p",null,"::: {#pushasset}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target VM"),(0,o.yg)("p",{parentName:"blockquote"},"param SQChar","*"," sVal"),(0,o.yg)("p",{parentName:"blockquote"},":   the string that will be pushed"),(0,o.yg)("p",{parentName:"blockquote"},"param int len"),(0,o.yg)("p",{parentName:"blockquote"},":   length of the string ",(0,o.yg)("inlineCode",{parentName:"p"},"sVal")),(0,o.yg)("p",{parentName:"blockquote"},"remarks"),(0,o.yg)("p",{parentName:"blockquote"},":   if the parameter length is less than 0 the VM will calculate the\nlength using ",(0,o.yg)("inlineCode",{parentName:"p"},"strlen")),(0,o.yg)("p",{parentName:"blockquote"},"pushes an asset to the stack")),(0,o.yg)("p",null,"::: {#pushvector}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target VM"),(0,o.yg)("p",{parentName:"blockquote"},"param Vector3 vVal"),(0,o.yg)("p",{parentName:"blockquote"},":   the vector that will be pushed"),(0,o.yg)("p",{parentName:"blockquote"},"pushes a vector to the stack")),(0,o.yg)("p",null,"::: {#pushobject}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target VM"),(0,o.yg)("p",{parentName:"blockquote"},"param SQObject obj"),(0,o.yg)("p",{parentName:"blockquote"},":   the object that will be pushed"),(0,o.yg)("p",{parentName:"blockquote"},"pushes an object like functions to the stack")),(0,o.yg)("p",null,"::: {#pushroottable}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target VM"),(0,o.yg)("p",{parentName:"blockquote"},"pushes the current root table into the stack")),(0,o.yg)("p",null,":::: note\n::: title\nNote\n:::"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"sq_pushnull")," (",(0,o.yg)("inlineCode",{parentName:"p"},"0x33D0"),") and more aren\\'t included in ",(0,o.yg)("inlineCode",{parentName:"p"},"squirrel.h")," right\nnow but may be in the future.\n::::"),(0,o.yg)("h2",{id:"getting-objects-from-the-stack"},"Getting Objects from the stack"),(0,o.yg)("p",null,"::: {#getbool}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger stackpos"),(0,o.yg)("p",{parentName:"blockquote"},":   stack position of the object"),(0,o.yg)("p",{parentName:"blockquote"},"returns"),(0,o.yg)("p",{parentName:"blockquote"},":   The value of the object")),(0,o.yg)("p",null,"::: {#getinteger}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger stackpos"),(0,o.yg)("p",{parentName:"blockquote"},":   stack position of the object"),(0,o.yg)("p",{parentName:"blockquote"},"returns"),(0,o.yg)("p",{parentName:"blockquote"},":   The value of the object")),(0,o.yg)("p",null,"::: {#getfloat}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger stackpos"),(0,o.yg)("p",{parentName:"blockquote"},":   stack position of the object"),(0,o.yg)("p",{parentName:"blockquote"},"returns"),(0,o.yg)("p",{parentName:"blockquote"},":   The value of the object")),(0,o.yg)("p",null,"::: {#getstring}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger stackpos"),(0,o.yg)("p",{parentName:"blockquote"},":   stack position of the object"),(0,o.yg)("p",{parentName:"blockquote"},"returns"),(0,o.yg)("p",{parentName:"blockquote"},":   The value of the object")),(0,o.yg)("p",null,"::: {#getvector}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger stackpos"),(0,o.yg)("p",{parentName:"blockquote"},":   stack position of the object"),(0,o.yg)("p",{parentName:"blockquote"},"returns"),(0,o.yg)("p",{parentName:"blockquote"},":   The value of the object")),(0,o.yg)("p",null,"::: {#getasset}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger stackpos"),(0,o.yg)("p",{parentName:"blockquote"},":   stack position of the object"),(0,o.yg)("p",{parentName:"blockquote"},"returns"),(0,o.yg)("p",{parentName:"blockquote"},":   The value of the object")),(0,o.yg)("p",null,"::: {#getConstants}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,o.yg)("p",{parentName:"blockquote"},"This function (",(0,o.yg)("inlineCode",{parentName:"p"},"server.dll+0x5920"),"`",") is not available in the launcher\nor plugins at the moment."),(0,o.yg)("p",{parentName:"blockquote"},"You can open a PR if you need it now."),(0,o.yg)("p",{parentName:"blockquote"},"To define an integer constant you can use\n",(0,o.yg)("inlineCode",{parentName:"p"},"defconst <defconst>"),'{.interpreted-text role="ref"} instead.\n::::'),(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"returns"),(0,o.yg)("p",{parentName:"blockquote"},":   the table of constants"),(0,o.yg)("p",{parentName:"blockquote"},"Pushes the constants table to the stack."),(0,o.yg)("p",{parentName:"blockquote"},"Used to add global constants for scripts."),(0,o.yg)("pre",{parentName:"blockquote"},(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},'getConstants(sqvm);\n\npushstring(sqvm, "MY_CONSTANT");\npushstring(sqvm, "MY_VALUE");\nnewslot(sqvm, -3, false);\n\nremoveFromStack(sqvm); // don\'t forget this!\n'))),(0,o.yg)("p",null,"::: {#sq-getfunction}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQChar","*"," name"),(0,o.yg)("p",{parentName:"blockquote"},":   the function name to search for"),(0,o.yg)("p",{parentName:"blockquote"},"param SQObject","*"," returnObj"),(0,o.yg)("p",{parentName:"blockquote"},":   reference to the object to hold the function object"),(0,o.yg)("p",{parentName:"blockquote"},"param SQChar","*"," signature"),(0,o.yg)("p",{parentName:"blockquote"},":   "),(0,o.yg)("p",{parentName:"blockquote"},"returns ",(0,o.yg)("inlineCode",{parentName:"p"},"0")," if the function was found."),(0,o.yg)("pre",{parentName:"blockquote"},(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"SQObject functionobj {};\nint result = sq_getfunction(m_pSQVM->sqvm, funcname, &functionobj, 0);\nif (result != 0) // This func returns 0 on success for some reason\n{\n    NS::log::squirrel_logger<context>()->error(\"Call was unable to find function with name '{}'. Is it global?\", funcname);\n    return SQRESULT_ERROR;\n}\n"))),(0,o.yg)("p",null,"::: {#getentity}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   The target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger iStackPos"),(0,o.yg)("p",{parentName:"blockquote"},":   Stack position of the entity")),(0,o.yg)("p",null,"::: {#sq-getentityfrominstance}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param CSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   The target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQObject","*"," pInstance"),(0,o.yg)("p",{parentName:"blockquote"},":   Instance holding an entity"),(0,o.yg)("p",{parentName:"blockquote"},"param char","*","*"," ppEntityConstant"),(0,o.yg)("p",{parentName:"blockquote"},":   Entity constant like\n",(0,o.yg)("inlineCode",{parentName:"p"},"__sq_GetEntityConstant_CBaseEntity <sq-GetEntityConstant-CBaseEntity>"),'{.interpreted-text\nrole="ref"}')),(0,o.yg)("p",null,"::: {#sq-GetEntityConstant-CBaseEntity}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"There are entity constants for other types, but seemingly\nCBaseEntity\\'s is the only one needed")),(0,o.yg)("p",null,"::: {#sq-getobject}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   The target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger iStackPos"),(0,o.yg)("p",{parentName:"blockquote"},":   Stack position of the object"),(0,o.yg)("p",{parentName:"blockquote"},"param SQObject","*"," obj"),(0,o.yg)("p",{parentName:"blockquote"},":   Pointer that will hold the object"),(0,o.yg)("p",{parentName:"blockquote"},(0,o.yg)("inlineCode",{parentName:"p"},"obj")," will be overwritten to hold the squirrel object."),(0,o.yg)("p",{parentName:"blockquote"},"This example adds a native function with the\n",(0,o.yg)("inlineCode",{parentName:"p"},"ADD_SQFUNC <sq-api-register-native-functions-c-macro>"),'{.interpreted-text\nrole="ref"} macro. The function takes a function reference as a\ncallback and calls it immediately. More information about function\ncalls are available\n',(0,o.yg)("inlineCode",{parentName:"p"},"here <sq-api-calling-functions>"),'{.interpreted-text role="ref"}'),(0,o.yg)("pre",{parentName:"blockquote"},(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},'ADD_SQFUNC("void", SQCallbackTest, "void functionref()", "", ScriptContext::UI)\n{\n    SQObject fn; // Make an empty sqobject. This will hold the function object later\n    g_pSquirrel<context>->__sq_getobject(sqvm, 1, &fn); // Assign the function object to the SQOBJECT\n    g_pSquirrel<context>->pushobject(sqvm, &fn); // Push the function object for the call\n    g_pSquirrel<context>->pushroottable(sqvm); // Push the root table for the function stack\n    g_pSquirrel<context>->__sq_call(sqvm, 1, false, true); // call the function with one parameter (the \'this\' object)\n\n    return SQRESULT_NULL;\n}\n'))),(0,o.yg)("p",null,"::: {#get}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQInteger stackpos"),(0,o.yg)("p",{parentName:"blockquote"},":   stack position of the object"),(0,o.yg)("p",{parentName:"blockquote"},"returns"),(0,o.yg)("p",{parentName:"blockquote"},":   an ",(0,o.yg)("inlineCode",{parentName:"p"},"SQRESULT")," that indicates whether or not the access was\nsuccessful."),(0,o.yg)("p",{parentName:"blockquote"},"pops a key from the stack and performs a get operation on the object\nat the position idx in the stack; and pushes the result in the stack.")),(0,o.yg)("h2",{id:"stack-infos"},"Stack Infos"),(0,o.yg)("p",null,"::: {#sq-stackinfos}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param int level"),(0,o.yg)("p",{parentName:"blockquote"},":   stack depth of the info"),(0,o.yg)("p",{parentName:"blockquote"},"param SQStackInfos& out"),(0,o.yg)("p",{parentName:"blockquote"},":   instance that will hold the information")),(0,o.yg)("p",null,"::: {#getcallingmod}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param HSquirrelVM","*"," sqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param int depth"),(0,o.yg)("p",{parentName:"blockquote"},":   stack depth of the origin mod"),(0,o.yg)("p",{parentName:"blockquote"},"returns"),(0,o.yg)("p",{parentName:"blockquote"},":   Pointer to the Mod object at the stack depth"),(0,o.yg)("p",{parentName:"blockquote"},":::: note\n::: title\nNote\n:::"),(0,o.yg)("p",{parentName:"blockquote"},"Not available in\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/R2Northstar/NorthstarLauncher/blob/main/NorthstarDLL/plugins/plugin_abi.h"},"plugins"),"\n::::")),(0,o.yg)("h2",{id:"other"},"Other"),(0,o.yg)("p",null,"::: {#defconst}\n:::"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"param CSquirrelVM","*"," csqvm"),(0,o.yg)("p",{parentName:"blockquote"},":   the target vm"),(0,o.yg)("p",{parentName:"blockquote"},"param SQChar","*"," pName"),(0,o.yg)("p",{parentName:"blockquote"},":   the constant name"),(0,o.yg)("p",{parentName:"blockquote"},"param int nValue"),(0,o.yg)("p",{parentName:"blockquote"},":   the constant value"),(0,o.yg)("p",{parentName:"blockquote"},"defines a global squirrel integer constant")))}s.isMDXComponent=!0}}]);