"use strict";(self.webpackChunkns_wiki=self.webpackChunkns_wiki||[]).push([[2082],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=i,y=c["".concat(l,".").concat(m)]||c[m]||d[m]||a;return t?r.createElement(y,o(o({ref:n},u),{},{components:t})):r.createElement(y,o({ref:n},u))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8204:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(8168),i=(t(6540),t(5680));const a={},o="Statements",s={unversionedId:"source/squirrel/statements",id:"source/squirrel/statements",isDocsHomePage:!1,title:"Statements",description:"If statements",source:"@site/docs/source/squirrel/statements.md",sourceDirName:"source/squirrel",slug:"/source/squirrel/statements",permalink:"/ns-wiki/docs/source/squirrel/statements",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/source/squirrel/statements.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Squirrel VM",permalink:"/ns-wiki/docs/source/squirrel/sqvm"},next:{title:"Control Flow",permalink:"/ns-wiki/docs/source/squirrel/statements/controlflow"}},l=[{value:"If statements",id:"if-statements",children:[]},{value:"Loops",id:"loops",children:[{value:"While Loops",id:"while-loops",children:[]},{value:"For Loop",id:"for-loop",children:[]},{value:"Foreach Loop",id:"foreach-loop",children:[]}]},{value:"Implicit conditional behavior",id:"implicit-conditional-behavior",children:[]},{value:"Formatting of actions",id:"formatting-of-actions",children:[]}],p={toc:l},u="wrapper";function c(e){let{components:n,...t}=e;return(0,i.yg)(u,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"statements"},"Statements"),(0,i.yg)("h2",{id:"if-statements"},"If statements"),(0,i.yg)("p",null,"If statements use a similar style to most programming languages and will\nexecute their asigned code if the test placed inside returns the boolean\nvalue true. If I wanted to have something occur if, and only if, our\nprevious ",(0,i.yg)("inlineCode",{parentName:"p"},"ReturnTrueOrFalse")," function returned true, then you can use:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"if( ReturnTrueOrFalse() )\n")),(0,i.yg)("p",null,"Conditional operators can also be used to make comparisons, such as ",(0,i.yg)("inlineCode",{parentName:"p"},"=="),"\n(equals), ",(0,i.yg)("inlineCode",{parentName:"p"},"<")," (less than), ",(0,i.yg)("inlineCode",{parentName:"p"},"<=")," (less than or equal), ",(0,i.yg)("inlineCode",{parentName:"p"},"!=")," (not equal),\netc., returning true if their condition is satisfied. For example, to\nexecute code if a dice roll landed on 5:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"if( RandomInt( 6 ) + 1 == 5 )\n")),(0,i.yg)("p",null,"Like other languages, if statements can be connected to ",(0,i.yg)("inlineCode",{parentName:"p"},"else if")," and\n",(0,i.yg)("inlineCode",{parentName:"p"},"else")," statements. ",(0,i.yg)("inlineCode",{parentName:"p"},"else if")," statements must be used immediately after\nan ",(0,i.yg)("inlineCode",{parentName:"p"},"if")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"else if")," and will only check their condition if the\npreceding statements failed. ",(0,i.yg)("inlineCode",{parentName:"p"},"else")," statements behave similarly, but\nalways run if the preceding statements failed and must be last."),(0,i.yg)("p",null,"Squirrel supports ternary operations like most languages. The value of\nthe expression depends if a condition is truthy or not. However, if not\nused carefully this can worsen readability. The Syntax is\n",(0,i.yg)("inlineCode",{parentName:"p"},"condition ? if_condition_true : if_condition_false"),". This is especially\nuseful when declaring variables or passing parameters."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'// shortenedUsername is "longus..."" if username is "longusername" or "short" if username is "short"\nstring shortenedUsername = username.len() > 9 ? username.slice(0,6) + "..." : username;\n')),(0,i.yg)("h2",{id:"loops"},"Loops"),(0,i.yg)("p",null,"Loops are used to execute the same code n times."),(0,i.yg)("h3",{id:"while-loops"},"While Loops"),(0,i.yg)("p",null,"A while loop runs as long as the condition evaluates to a truthy value."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"while( true )\n{\n  // this will result in an endless loop because the probe condition will never be false \n}\n\nwhile( RandomInt( 2 ) )\n{\n  // This will run until a 1 is generated by chance, because squirrel treats 0 as a falsy value and 1 as truthy.\n}\n")),(0,i.yg)("p",null,"Do While Loop ","~","~","~","~"),(0,i.yg)("p",null,"A do while loop is the same as a while loop but the condition is checked\n",(0,i.yg)("strong",{parentName:"p"},"after")," the body is executed."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"do\n{\n  // this will execute only one time\n} while( false )\n")),(0,i.yg)("h3",{id:"for-loop"},"For Loop"),(0,i.yg)("p",null,"A for loop also runs until a condition is met however it provides you\nwith a counter variable."),(0,i.yg)("p",null,"The Syntax is as follows:\n",(0,i.yg)("inlineCode",{parentName:"p"},"for( int counter; condition; behaviour_after_body_execution )")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"// prints 0, 1, 2, 3, 4\nfor( int i; i < 5; i++ )\n{\n  print( i )\n}\n\narray<int> arr = [ 14, 2, 18, 9 ]\n// prints 14, 2, 18, 9\nfor( int i; i < arr.len() * 2; i += 2 )\n{\n  print( arr[i] )\n}\n")),(0,i.yg)("h3",{id:"foreach-loop"},"Foreach Loop"),(0,i.yg)("p",null,"A foreach loop iterates over a ",(0,i.yg)("inlineCode",{parentName:"p"},"table")," or an ",(0,i.yg)("inlineCode",{parentName:"p"},"array")," and executes for\neach entry. The loop provides you with an optional counter for arrays or\nkey for tables."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'array<int> arr = [ 1, 2, 3, 4 ]\ntable<string, string> map = {\n  key1 = "mapped value 1",\n  key2 = "mapped value 2"\n}\n\n// prints 0 1, 1 2, 2 3, 3 4\nforeach( int index, int value in arr )\n{\n  printt( index, value )\n}\n\n// prints key1 mapped value 1, key2 mapped value 2\nforeach( string key, string value in map )\n{\n  printt( key, value )\n}\n')),(0,i.yg)("h2",{id:"implicit-conditional-behavior"},"Implicit conditional behavior"),(0,i.yg)("p",null,"Conditional statements, such as while loops and if statements, also\nimplictly cast non-boolean inputs to booleans. For numbers, this means 0\nis considered false and anything else is considered true. For instance\nvariables like arrays and entities, ",(0,i.yg)("inlineCode",{parentName:"p"},"null")," is considered false and\nanything else is considered true. For example, these inputs are\nconsidered true by the if statements:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"if(2)\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"array somelist = [0, 1]\nif(somelist)\n")),(0,i.yg)("p",null,"Be aware that empty arrays and strings, ",(0,i.yg)("inlineCode",{parentName:"p"},"[]")," and ",(0,i.yg)("inlineCode",{parentName:"p"},'""'),", are considered\ntrue by this logic."),(0,i.yg)("h2",{id:"formatting-of-actions"},"Formatting of actions"),(0,i.yg)("p",null,"So great, we can loop and check things, but what can we do with this\ninformation? Squirrel uses ",(0,i.yg)("inlineCode",{parentName:"p"},"{}")," to denote the contents of a series of\nactions caused by such a statement."),(0,i.yg)("p",null,"For example, lets make our ",(0,i.yg)("inlineCode",{parentName:"p"},"ReturnTrueOrFalse")," function, that randomly\npicks either true or false, first:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"bool function ReturnTrueOrFalse() {\n  return RandomInt(2) == 1\n}\n")),(0,i.yg)("p",null,"Note that while functions always need ",(0,i.yg)("inlineCode",{parentName:"p"},"{}"),", single-line ",(0,i.yg)("inlineCode",{parentName:"p"},"if"),"/",(0,i.yg)("inlineCode",{parentName:"p"},"else"),"\nstatements and loops do not:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'if(ReturnTrueOrFalse())\n  printt("Only called if true")\n')),(0,i.yg)("p",null,"Now let\\'s make a more complicated function that will use the previous\nscript to determine true or false, printing a list each time it returns\ntrue:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"array<int> someinformation = [1,2,3,4,5,6]\nvoid function ThisDoesStuff(){\n  while(ReturnTrueOrFalse()){\n    foreach( int information in someinformation){\n      printt(information)\n    }\n  }\n}\n")))}c.isMDXComponent=!0}}]);